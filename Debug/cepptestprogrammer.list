
cepptestprogrammer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b40  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08005d38  08005d38  00006d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d68  08005d68  0000714c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d68  08005d68  00006d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d70  08005d70  0000714c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d70  08005d70  00006d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d74  08005d74  00006d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005d78  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08005d84  0000700c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  08005e24  000070ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000083c  2000014c  08005ec4  0000714c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000988  08005ec4  00007988  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000714c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ae66  00000000  00000000  0000717a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003264  00000000  00000000  00021fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001700  00000000  00000000  00025248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000120e  00000000  00000000  00026948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a2c3  00000000  00000000  00027b56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c553  00000000  00000000  00051e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00106658  00000000  00000000  0006e36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001749c4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006354  00000000  00000000  00174a08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006d  00000000  00000000  0017ad5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000014c 	.word	0x2000014c
 8000214:	00000000 	.word	0x00000000
 8000218:	08005d20 	.word	0x08005d20

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000150 	.word	0x20000150
 8000234:	08005d20 	.word	0x08005d20

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b590      	push	{r4, r7, lr}
 800052a:	b087      	sub	sp, #28
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t DAC_OUT[4] = {0, 1241, 2482, 3723};
 800052e:	4b65      	ldr	r3, [pc, #404]	@ (80006c4 <main+0x19c>)
 8000530:	463c      	mov	r4, r7
 8000532:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000534:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	uint8_t i = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	75fb      	strb	r3, [r7, #23]
	uint8_t pwm1;
	float dutyCycle = 0.5;
 800053c:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8000540:	613b      	str	r3, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000542:	f000 ffb2 	bl	80014aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000546:	f000 f8c9 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054a:	f000 fb13 	bl	8000b74 <MX_GPIO_Init>
  MX_DMA_Init();
 800054e:	f000 faf3 	bl	8000b38 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000552:	f000 fa63 	bl	8000a1c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000556:	f000 fac1 	bl	8000adc <MX_USB_OTG_FS_PCD_Init>
  MX_DAC_Init();
 800055a:	f000 f92f 	bl	80007bc <MX_DAC_Init>
  MX_I2C1_Init();
 800055e:	f000 f9a5 	bl	80008ac <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8000562:	f000 fa8b 	bl	8000a7c <MX_USART6_UART_Init>
  MX_ETH_Init();
 8000566:	f000 f953 	bl	8000810 <MX_ETH_Init>
  MX_TIM2_Init();
 800056a:	f000 f9df 	bl	800092c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 800056e:	2100      	movs	r1, #0
 8000570:	4855      	ldr	r0, [pc, #340]	@ (80006c8 <main+0x1a0>)
 8000572:	f001 f94e 	bl	8001812 <HAL_DAC_Start>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	2104      	movs	r1, #4
 800057a:	4854      	ldr	r0, [pc, #336]	@ (80006cc <main+0x1a4>)
 800057c:	f002 f9a6 	bl	80028cc <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000586:	4852      	ldr	r0, [pc, #328]	@ (80006d0 <main+0x1a8>)
 8000588:	f002 f9a0 	bl	80028cc <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000592:	484f      	ldr	r0, [pc, #316]	@ (80006d0 <main+0x1a8>)
 8000594:	f002 f99a 	bl	80028cc <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800059e:	484d      	ldr	r0, [pc, #308]	@ (80006d4 <main+0x1ac>)
 80005a0:	f002 f994 	bl	80028cc <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005aa:	484b      	ldr	r0, [pc, #300]	@ (80006d8 <main+0x1b0>)
 80005ac:	f002 f98e 	bl	80028cc <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005b6:	4847      	ldr	r0, [pc, #284]	@ (80006d4 <main+0x1ac>)
 80005b8:	f002 f988 	bl	80028cc <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005c2:	4845      	ldr	r0, [pc, #276]	@ (80006d8 <main+0x1b0>)
 80005c4:	f002 f982 	bl	80028cc <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005ce:	4842      	ldr	r0, [pc, #264]	@ (80006d8 <main+0x1b0>)
 80005d0:	f002 f97c 	bl	80028cc <HAL_GPIO_WritePin>
//	  		  HAL_Delay(50);
//	  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
//	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
//	  		  HAL_Delay(50);

	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2104      	movs	r1, #4
 80005d8:	483c      	ldr	r0, [pc, #240]	@ (80006cc <main+0x1a4>)
 80005da:	f002 f977 	bl	80028cc <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005e4:	483c      	ldr	r0, [pc, #240]	@ (80006d8 <main+0x1b0>)
 80005e6:	f002 f971 	bl	80028cc <HAL_GPIO_WritePin>
	  		  HAL_Delay(10);
 80005ea:	200a      	movs	r0, #10
 80005ec:	f000 ffba 	bl	8001564 <HAL_Delay>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2104      	movs	r1, #4
 80005f4:	4835      	ldr	r0, [pc, #212]	@ (80006cc <main+0x1a4>)
 80005f6:	f002 f969 	bl	80028cc <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, 1);
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000600:	4833      	ldr	r0, [pc, #204]	@ (80006d0 <main+0x1a8>)
 8000602:	f002 f963 	bl	80028cc <HAL_GPIO_WritePin>
	  		  HAL_Delay(10);
 8000606:	200a      	movs	r0, #10
 8000608:	f000 ffac 	bl	8001564 <HAL_Delay>
	  		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, 0);
 800060c:	2200      	movs	r2, #0
 800060e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000612:	482f      	ldr	r0, [pc, #188]	@ (80006d0 <main+0x1a8>)
 8000614:	f002 f95a 	bl	80028cc <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 1);
 8000618:	2201      	movs	r2, #1
 800061a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800061e:	482c      	ldr	r0, [pc, #176]	@ (80006d0 <main+0x1a8>)
 8000620:	f002 f954 	bl	80028cc <HAL_GPIO_WritePin>
	  		  HAL_Delay(10);
 8000624:	200a      	movs	r0, #10
 8000626:	f000 ff9d 	bl	8001564 <HAL_Delay>
	  		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000630:	4827      	ldr	r0, [pc, #156]	@ (80006d0 <main+0x1a8>)
 8000632:	f002 f94b 	bl	80028cc <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, 1);
 8000636:	2201      	movs	r2, #1
 8000638:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800063c:	4825      	ldr	r0, [pc, #148]	@ (80006d4 <main+0x1ac>)
 800063e:	f002 f945 	bl	80028cc <HAL_GPIO_WritePin>
	  		  HAL_Delay(10);
 8000642:	200a      	movs	r0, #10
 8000644:	f000 ff8e 	bl	8001564 <HAL_Delay>
	  		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, 0);
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800064e:	4821      	ldr	r0, [pc, #132]	@ (80006d4 <main+0x1ac>)
 8000650:	f002 f93c 	bl	80028cc <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 8000654:	2201      	movs	r2, #1
 8000656:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800065a:	481f      	ldr	r0, [pc, #124]	@ (80006d8 <main+0x1b0>)
 800065c:	f002 f936 	bl	80028cc <HAL_GPIO_WritePin>
	  		  HAL_Delay(10);
 8000660:	200a      	movs	r0, #10
 8000662:	f000 ff7f 	bl	8001564 <HAL_Delay>
	  		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800066c:	481a      	ldr	r0, [pc, #104]	@ (80006d8 <main+0x1b0>)
 800066e:	f002 f92d 	bl	80028cc <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000678:	4816      	ldr	r0, [pc, #88]	@ (80006d4 <main+0x1ac>)
 800067a:	f002 f927 	bl	80028cc <HAL_GPIO_WritePin>
	     	  HAL_Delay(10);
 800067e:	200a      	movs	r0, #10
 8000680:	f000 ff70 	bl	8001564 <HAL_Delay>
	  		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 0);
 8000684:	2200      	movs	r2, #0
 8000686:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800068a:	4812      	ldr	r0, [pc, #72]	@ (80006d4 <main+0x1ac>)
 800068c:	f002 f91e 	bl	80028cc <HAL_GPIO_WritePin>
	   		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000696:	4810      	ldr	r0, [pc, #64]	@ (80006d8 <main+0x1b0>)
 8000698:	f002 f918 	bl	80028cc <HAL_GPIO_WritePin>
	   	 	  HAL_Delay(10);
 800069c:	200a      	movs	r0, #10
 800069e:	f000 ff61 	bl	8001564 <HAL_Delay>
	   		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006a8:	480b      	ldr	r0, [pc, #44]	@ (80006d8 <main+0x1b0>)
 80006aa:	f002 f90f 	bl	80028cc <HAL_GPIO_WritePin>
	   		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 80006ae:	2201      	movs	r2, #1
 80006b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006b4:	4808      	ldr	r0, [pc, #32]	@ (80006d8 <main+0x1b0>)
 80006b6:	f002 f909 	bl	80028cc <HAL_GPIO_WritePin>
	   		  HAL_Delay(10);
 80006ba:	200a      	movs	r0, #10
 80006bc:	f000 ff52 	bl	8001564 <HAL_Delay>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 80006c0:	bf00      	nop
 80006c2:	e787      	b.n	80005d4 <main+0xac>
 80006c4:	08005d38 	.word	0x08005d38
 80006c8:	200001a0 	.word	0x200001a0
 80006cc:	40020400 	.word	0x40020400
 80006d0:	40021800 	.word	0x40021800
 80006d4:	40021400 	.word	0x40021400
 80006d8:	40021000 	.word	0x40021000

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	@ 0x50
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 031c 	add.w	r3, r7, #28
 80006e6:	2234      	movs	r2, #52	@ 0x34
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f005 faec 	bl	8005cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000700:	f002 fb6e 	bl	8002de0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000704:	4b2b      	ldr	r3, [pc, #172]	@ (80007b4 <SystemClock_Config+0xd8>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000708:	4a2a      	ldr	r2, [pc, #168]	@ (80007b4 <SystemClock_Config+0xd8>)
 800070a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800070e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000710:	4b28      	ldr	r3, [pc, #160]	@ (80007b4 <SystemClock_Config+0xd8>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071c:	4b26      	ldr	r3, [pc, #152]	@ (80007b8 <SystemClock_Config+0xdc>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a25      	ldr	r2, [pc, #148]	@ (80007b8 <SystemClock_Config+0xdc>)
 8000722:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b23      	ldr	r3, [pc, #140]	@ (80007b8 <SystemClock_Config+0xdc>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000734:	2301      	movs	r3, #1
 8000736:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000738:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800073c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073e:	2302      	movs	r3, #2
 8000740:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000742:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000746:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000748:	2304      	movs	r3, #4
 800074a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800074c:	23d8      	movs	r3, #216	@ 0xd8
 800074e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000754:	2309      	movs	r3, #9
 8000756:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000758:	2302      	movs	r3, #2
 800075a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 031c 	add.w	r3, r7, #28
 8000760:	4618      	mov	r0, r3
 8000762:	f002 fb9d 	bl	8002ea0 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800076c:	f000 fafe 	bl	8000d6c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000770:	f002 fb46 	bl	8002e00 <HAL_PWREx_EnableOverDrive>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800077a:	f000 faf7 	bl	8000d6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077e:	230f      	movs	r3, #15
 8000780:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000782:	2302      	movs	r3, #2
 8000784:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800078a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800078e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000790:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000794:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000796:	f107 0308 	add.w	r3, r7, #8
 800079a:	2107      	movs	r1, #7
 800079c:	4618      	mov	r0, r3
 800079e:	f002 fe2d 	bl	80033fc <HAL_RCC_ClockConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80007a8:	f000 fae0 	bl	8000d6c <Error_Handler>
  }
}
 80007ac:	bf00      	nop
 80007ae:	3750      	adds	r7, #80	@ 0x50
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40007000 	.word	0x40007000

080007bc <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007c2:	463b      	mov	r3, r7
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000808 <MX_DAC_Init+0x4c>)
 80007cc:	4a0f      	ldr	r2, [pc, #60]	@ (800080c <MX_DAC_Init+0x50>)
 80007ce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007d0:	480d      	ldr	r0, [pc, #52]	@ (8000808 <MX_DAC_Init+0x4c>)
 80007d2:	f000 fffc 	bl	80017ce <HAL_DAC_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007dc:	f000 fac6 	bl	8000d6c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007e8:	463b      	mov	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	4619      	mov	r1, r3
 80007ee:	4806      	ldr	r0, [pc, #24]	@ (8000808 <MX_DAC_Init+0x4c>)
 80007f0:	f001 f861 	bl	80018b6 <HAL_DAC_ConfigChannel>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80007fa:	f000 fab7 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200001a0 	.word	0x200001a0
 800080c:	40007400 	.word	0x40007400

08000810 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000814:	4b1f      	ldr	r3, [pc, #124]	@ (8000894 <MX_ETH_Init+0x84>)
 8000816:	4a20      	ldr	r2, [pc, #128]	@ (8000898 <MX_ETH_Init+0x88>)
 8000818:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800081a:	4b20      	ldr	r3, [pc, #128]	@ (800089c <MX_ETH_Init+0x8c>)
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000820:	4b1e      	ldr	r3, [pc, #120]	@ (800089c <MX_ETH_Init+0x8c>)
 8000822:	2280      	movs	r2, #128	@ 0x80
 8000824:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000826:	4b1d      	ldr	r3, [pc, #116]	@ (800089c <MX_ETH_Init+0x8c>)
 8000828:	22e1      	movs	r2, #225	@ 0xe1
 800082a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800082c:	4b1b      	ldr	r3, [pc, #108]	@ (800089c <MX_ETH_Init+0x8c>)
 800082e:	2200      	movs	r2, #0
 8000830:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000832:	4b1a      	ldr	r3, [pc, #104]	@ (800089c <MX_ETH_Init+0x8c>)
 8000834:	2200      	movs	r2, #0
 8000836:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000838:	4b18      	ldr	r3, [pc, #96]	@ (800089c <MX_ETH_Init+0x8c>)
 800083a:	2200      	movs	r2, #0
 800083c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800083e:	4b15      	ldr	r3, [pc, #84]	@ (8000894 <MX_ETH_Init+0x84>)
 8000840:	4a16      	ldr	r2, [pc, #88]	@ (800089c <MX_ETH_Init+0x8c>)
 8000842:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000844:	4b13      	ldr	r3, [pc, #76]	@ (8000894 <MX_ETH_Init+0x84>)
 8000846:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800084a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800084c:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <MX_ETH_Init+0x84>)
 800084e:	4a14      	ldr	r2, [pc, #80]	@ (80008a0 <MX_ETH_Init+0x90>)
 8000850:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000852:	4b10      	ldr	r3, [pc, #64]	@ (8000894 <MX_ETH_Init+0x84>)
 8000854:	4a13      	ldr	r2, [pc, #76]	@ (80008a4 <MX_ETH_Init+0x94>)
 8000856:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000858:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <MX_ETH_Init+0x84>)
 800085a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800085e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000860:	480c      	ldr	r0, [pc, #48]	@ (8000894 <MX_ETH_Init+0x84>)
 8000862:	f001 fb61 	bl	8001f28 <HAL_ETH_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800086c:	f000 fa7e 	bl	8000d6c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000870:	2238      	movs	r2, #56	@ 0x38
 8000872:	2100      	movs	r1, #0
 8000874:	480c      	ldr	r0, [pc, #48]	@ (80008a8 <MX_ETH_Init+0x98>)
 8000876:	f005 fa27 	bl	8005cc8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <MX_ETH_Init+0x98>)
 800087c:	2221      	movs	r2, #33	@ 0x21
 800087e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000880:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_ETH_Init+0x98>)
 8000882:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000886:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000888:	4b07      	ldr	r3, [pc, #28]	@ (80008a8 <MX_ETH_Init+0x98>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000214 	.word	0x20000214
 8000898:	40028000 	.word	0x40028000
 800089c:	2000097c 	.word	0x2000097c
 80008a0:	200000ac 	.word	0x200000ac
 80008a4:	2000000c 	.word	0x2000000c
 80008a8:	20000168 	.word	0x20000168

080008ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000920 <MX_I2C1_Init+0x74>)
 80008b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000924 <MX_I2C1_Init+0x78>)
 80008b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80008b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000920 <MX_I2C1_Init+0x74>)
 80008b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000928 <MX_I2C1_Init+0x7c>)
 80008ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008bc:	4b18      	ldr	r3, [pc, #96]	@ (8000920 <MX_I2C1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c2:	4b17      	ldr	r3, [pc, #92]	@ (8000920 <MX_I2C1_Init+0x74>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c8:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <MX_I2C1_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008ce:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <MX_I2C1_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008d4:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <MX_I2C1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008da:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <MX_I2C1_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <MX_I2C1_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008e6:	480e      	ldr	r0, [pc, #56]	@ (8000920 <MX_I2C1_Init+0x74>)
 80008e8:	f002 f80a 	bl	8002900 <HAL_I2C_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008f2:	f000 fa3b 	bl	8000d6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008f6:	2100      	movs	r1, #0
 80008f8:	4809      	ldr	r0, [pc, #36]	@ (8000920 <MX_I2C1_Init+0x74>)
 80008fa:	f002 f891 	bl	8002a20 <HAL_I2CEx_ConfigAnalogFilter>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000904:	f000 fa32 	bl	8000d6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000908:	2100      	movs	r1, #0
 800090a:	4805      	ldr	r0, [pc, #20]	@ (8000920 <MX_I2C1_Init+0x74>)
 800090c:	f002 f8d3 	bl	8002ab6 <HAL_I2CEx_ConfigDigitalFilter>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000916:	f000 fa29 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200002c4 	.word	0x200002c4
 8000924:	40005400 	.word	0x40005400
 8000928:	20404768 	.word	0x20404768

0800092c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08e      	sub	sp, #56	@ 0x38
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000932:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800094c:	463b      	mov	r3, r7
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]
 800095a:	615a      	str	r2, [r3, #20]
 800095c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800095e:	4b2e      	ldr	r3, [pc, #184]	@ (8000a18 <MX_TIM2_Init+0xec>)
 8000960:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000964:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1080-1;
 8000966:	4b2c      	ldr	r3, [pc, #176]	@ (8000a18 <MX_TIM2_Init+0xec>)
 8000968:	f240 4237 	movw	r2, #1079	@ 0x437
 800096c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096e:	4b2a      	ldr	r3, [pc, #168]	@ (8000a18 <MX_TIM2_Init+0xec>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000974:	4b28      	ldr	r3, [pc, #160]	@ (8000a18 <MX_TIM2_Init+0xec>)
 8000976:	f242 720f 	movw	r2, #9999	@ 0x270f
 800097a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097c:	4b26      	ldr	r3, [pc, #152]	@ (8000a18 <MX_TIM2_Init+0xec>)
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000982:	4b25      	ldr	r3, [pc, #148]	@ (8000a18 <MX_TIM2_Init+0xec>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000988:	4823      	ldr	r0, [pc, #140]	@ (8000a18 <MX_TIM2_Init+0xec>)
 800098a:	f003 fb85 	bl	8004098 <HAL_TIM_Base_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000994:	f000 f9ea 	bl	8000d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000998:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800099c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800099e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009a2:	4619      	mov	r1, r3
 80009a4:	481c      	ldr	r0, [pc, #112]	@ (8000a18 <MX_TIM2_Init+0xec>)
 80009a6:	f003 fd43 	bl	8004430 <HAL_TIM_ConfigClockSource>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80009b0:	f000 f9dc 	bl	8000d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009b4:	4818      	ldr	r0, [pc, #96]	@ (8000a18 <MX_TIM2_Init+0xec>)
 80009b6:	f003 fbc6 	bl	8004146 <HAL_TIM_PWM_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80009c0:	f000 f9d4 	bl	8000d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4811      	ldr	r0, [pc, #68]	@ (8000a18 <MX_TIM2_Init+0xec>)
 80009d4:	f004 f98e 	bl	8004cf4 <HAL_TIMEx_MasterConfigSynchronization>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80009de:	f000 f9c5 	bl	8000d6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e2:	2360      	movs	r3, #96	@ 0x60
 80009e4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10000/4-1;
 80009e6:	f640 13c3 	movw	r3, #2499	@ 0x9c3
 80009ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009f4:	463b      	mov	r3, r7
 80009f6:	2200      	movs	r2, #0
 80009f8:	4619      	mov	r1, r3
 80009fa:	4807      	ldr	r0, [pc, #28]	@ (8000a18 <MX_TIM2_Init+0xec>)
 80009fc:	f003 fc04 	bl	8004208 <HAL_TIM_PWM_ConfigChannel>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 8000a06:	f000 f9b1 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a0a:	4803      	ldr	r0, [pc, #12]	@ (8000a18 <MX_TIM2_Init+0xec>)
 8000a0c:	f000 fb82 	bl	8001114 <HAL_TIM_MspPostInit>

}
 8000a10:	bf00      	nop
 8000a12:	3738      	adds	r7, #56	@ 0x38
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000318 	.word	0x20000318

08000a1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a20:	4b14      	ldr	r3, [pc, #80]	@ (8000a74 <MX_USART3_UART_Init+0x58>)
 8000a22:	4a15      	ldr	r2, [pc, #84]	@ (8000a78 <MX_USART3_UART_Init+0x5c>)
 8000a24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a26:	4b13      	ldr	r3, [pc, #76]	@ (8000a74 <MX_USART3_UART_Init+0x58>)
 8000a28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <MX_USART3_UART_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <MX_USART3_UART_Init+0x58>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <MX_USART3_UART_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <MX_USART3_UART_Init+0x58>)
 8000a42:	220c      	movs	r2, #12
 8000a44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <MX_USART3_UART_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <MX_USART3_UART_Init+0x58>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a52:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <MX_USART3_UART_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <MX_USART3_UART_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a5e:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <MX_USART3_UART_Init+0x58>)
 8000a60:	f004 f9d6 	bl	8004e10 <HAL_UART_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a6a:	f000 f97f 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000364 	.word	0x20000364
 8000a78:	40004800 	.word	0x40004800

08000a7c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a80:	4b14      	ldr	r3, [pc, #80]	@ (8000ad4 <MX_USART6_UART_Init+0x58>)
 8000a82:	4a15      	ldr	r2, [pc, #84]	@ (8000ad8 <MX_USART6_UART_Init+0x5c>)
 8000a84:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000a86:	4b13      	ldr	r3, [pc, #76]	@ (8000ad4 <MX_USART6_UART_Init+0x58>)
 8000a88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a8c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ad4 <MX_USART6_UART_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad4 <MX_USART6_UART_Init+0x58>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <MX_USART6_UART_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <MX_USART6_UART_Init+0x58>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad4 <MX_USART6_UART_Init+0x58>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aac:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <MX_USART6_UART_Init+0x58>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	@ (8000ad4 <MX_USART6_UART_Init+0x58>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <MX_USART6_UART_Init+0x58>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <MX_USART6_UART_Init+0x58>)
 8000ac0:	f004 f9a6 	bl	8004e10 <HAL_UART_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000aca:	f000 f94f 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200003ec 	.word	0x200003ec
 8000ad8:	40011400 	.word	0x40011400

08000adc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ae0:	4b14      	ldr	r3, [pc, #80]	@ (8000b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000ae6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ae8:	4b12      	ldr	r3, [pc, #72]	@ (8000b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aea:	2206      	movs	r2, #6
 8000aec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000aee:	4b11      	ldr	r3, [pc, #68]	@ (8000b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af0:	2202      	movs	r2, #2
 8000af2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	@ (8000b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000afc:	2202      	movs	r2, #2
 8000afe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	@ (8000b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	@ (8000b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b0c:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b12:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b1e:	4805      	ldr	r0, [pc, #20]	@ (8000b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b20:	f002 f815 	bl	8002b4e <HAL_PCD_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b2a:	f000 f91f 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000474 	.word	0x20000474

08000b38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <MX_DMA_Init+0x38>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	4a0b      	ldr	r2, [pc, #44]	@ (8000b70 <MX_DMA_Init+0x38>)
 8000b44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4a:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <MX_DMA_Init+0x38>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2100      	movs	r1, #0
 8000b5a:	2010      	movs	r0, #16
 8000b5c:	f000 fe01 	bl	8001762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000b60:	2010      	movs	r0, #16
 8000b62:	f000 fe1a 	bl	800179a <HAL_NVIC_EnableIRQ>

}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800

08000b74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08e      	sub	sp, #56	@ 0x38
 8000b78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8a:	4b72      	ldr	r3, [pc, #456]	@ (8000d54 <MX_GPIO_Init+0x1e0>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	4a71      	ldr	r2, [pc, #452]	@ (8000d54 <MX_GPIO_Init+0x1e0>)
 8000b90:	f043 0304 	orr.w	r3, r3, #4
 8000b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b96:	4b6f      	ldr	r3, [pc, #444]	@ (8000d54 <MX_GPIO_Init+0x1e0>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	f003 0304 	and.w	r3, r3, #4
 8000b9e:	623b      	str	r3, [r7, #32]
 8000ba0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba2:	4b6c      	ldr	r3, [pc, #432]	@ (8000d54 <MX_GPIO_Init+0x1e0>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	4a6b      	ldr	r2, [pc, #428]	@ (8000d54 <MX_GPIO_Init+0x1e0>)
 8000ba8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bae:	4b69      	ldr	r3, [pc, #420]	@ (8000d54 <MX_GPIO_Init+0x1e0>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bb6:	61fb      	str	r3, [r7, #28]
 8000bb8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	4b66      	ldr	r3, [pc, #408]	@ (8000d54 <MX_GPIO_Init+0x1e0>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	4a65      	ldr	r2, [pc, #404]	@ (8000d54 <MX_GPIO_Init+0x1e0>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc6:	4b63      	ldr	r3, [pc, #396]	@ (8000d54 <MX_GPIO_Init+0x1e0>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	61bb      	str	r3, [r7, #24]
 8000bd0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	4b60      	ldr	r3, [pc, #384]	@ (8000d54 <MX_GPIO_Init+0x1e0>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	4a5f      	ldr	r2, [pc, #380]	@ (8000d54 <MX_GPIO_Init+0x1e0>)
 8000bd8:	f043 0302 	orr.w	r3, r3, #2
 8000bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bde:	4b5d      	ldr	r3, [pc, #372]	@ (8000d54 <MX_GPIO_Init+0x1e0>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bea:	4b5a      	ldr	r3, [pc, #360]	@ (8000d54 <MX_GPIO_Init+0x1e0>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	4a59      	ldr	r2, [pc, #356]	@ (8000d54 <MX_GPIO_Init+0x1e0>)
 8000bf0:	f043 0320 	orr.w	r3, r3, #32
 8000bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf6:	4b57      	ldr	r3, [pc, #348]	@ (8000d54 <MX_GPIO_Init+0x1e0>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	f003 0320 	and.w	r3, r3, #32
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c02:	4b54      	ldr	r3, [pc, #336]	@ (8000d54 <MX_GPIO_Init+0x1e0>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	4a53      	ldr	r2, [pc, #332]	@ (8000d54 <MX_GPIO_Init+0x1e0>)
 8000c08:	f043 0310 	orr.w	r3, r3, #16
 8000c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0e:	4b51      	ldr	r3, [pc, #324]	@ (8000d54 <MX_GPIO_Init+0x1e0>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	f003 0310 	and.w	r3, r3, #16
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1a:	4b4e      	ldr	r3, [pc, #312]	@ (8000d54 <MX_GPIO_Init+0x1e0>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a4d      	ldr	r2, [pc, #308]	@ (8000d54 <MX_GPIO_Init+0x1e0>)
 8000c20:	f043 0308 	orr.w	r3, r3, #8
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b4b      	ldr	r3, [pc, #300]	@ (8000d54 <MX_GPIO_Init+0x1e0>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0308 	and.w	r3, r3, #8
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c32:	4b48      	ldr	r3, [pc, #288]	@ (8000d54 <MX_GPIO_Init+0x1e0>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	4a47      	ldr	r2, [pc, #284]	@ (8000d54 <MX_GPIO_Init+0x1e0>)
 8000c38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3e:	4b45      	ldr	r3, [pc, #276]	@ (8000d54 <MX_GPIO_Init+0x1e0>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2109      	movs	r1, #9
 8000c4e:	4842      	ldr	r0, [pc, #264]	@ (8000d58 <MX_GPIO_Init+0x1e4>)
 8000c50:	f001 fe3c 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_2|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	f244 0185 	movw	r1, #16517	@ 0x4085
 8000c5a:	4840      	ldr	r0, [pc, #256]	@ (8000d5c <MX_GPIO_Init+0x1e8>)
 8000c5c:	f001 fe36 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000c66:	483e      	ldr	r0, [pc, #248]	@ (8000d60 <MX_GPIO_Init+0x1ec>)
 8000c68:	f001 fe30 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13, GPIO_PIN_RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f44f 5128 	mov.w	r1, #10752	@ 0x2a00
 8000c72:	483c      	ldr	r0, [pc, #240]	@ (8000d64 <MX_GPIO_Init+0x1f0>)
 8000c74:	f001 fe2a 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|GPIO_PIN_9|GPIO_PIN_14, GPIO_PIN_RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f244 2140 	movw	r1, #16960	@ 0x4240
 8000c7e:	483a      	ldr	r0, [pc, #232]	@ (8000d68 <MX_GPIO_Init+0x1f4>)
 8000c80:	f001 fe24 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c8a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c98:	4619      	mov	r1, r3
 8000c9a:	482f      	ldr	r0, [pc, #188]	@ (8000d58 <MX_GPIO_Init+0x1e4>)
 8000c9c:	f001 fc6a 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000ca0:	2309      	movs	r3, #9
 8000ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4828      	ldr	r0, [pc, #160]	@ (8000d58 <MX_GPIO_Init+0x1e4>)
 8000cb8:	f001 fc5c 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB2 LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_2|LD3_Pin|LD2_Pin;
 8000cbc:	f244 0385 	movw	r3, #16517	@ 0x4085
 8000cc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4821      	ldr	r0, [pc, #132]	@ (8000d5c <MX_GPIO_Init+0x1e8>)
 8000cd6:	f001 fc4d 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000cda:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000cde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	481b      	ldr	r0, [pc, #108]	@ (8000d60 <MX_GPIO_Init+0x1ec>)
 8000cf4:	f001 fc3e 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8000cf8:	f44f 5328 	mov.w	r3, #10752	@ 0x2a00
 8000cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4814      	ldr	r0, [pc, #80]	@ (8000d64 <MX_GPIO_Init+0x1f0>)
 8000d12:	f001 fc2f 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin PG9 PG14 */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|GPIO_PIN_9|GPIO_PIN_14;
 8000d16:	f244 2340 	movw	r3, #16960	@ 0x4240
 8000d1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	480e      	ldr	r0, [pc, #56]	@ (8000d68 <MX_GPIO_Init+0x1f4>)
 8000d30:	f001 fc20 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d34:	2380      	movs	r3, #128	@ 0x80
 8000d36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d44:	4619      	mov	r1, r3
 8000d46:	4808      	ldr	r0, [pc, #32]	@ (8000d68 <MX_GPIO_Init+0x1f4>)
 8000d48:	f001 fc14 	bl	8002574 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d4c:	bf00      	nop
 8000d4e:	3738      	adds	r7, #56	@ 0x38
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40020800 	.word	0x40020800
 8000d5c:	40020400 	.word	0x40020400
 8000d60:	40021400 	.word	0x40021400
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40021800 	.word	0x40021800

08000d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d70:	b672      	cpsid	i
}
 8000d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <Error_Handler+0x8>

08000d78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <HAL_MspInit+0x44>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d82:	4a0e      	ldr	r2, [pc, #56]	@ (8000dbc <HAL_MspInit+0x44>)
 8000d84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <HAL_MspInit+0x44>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d96:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <HAL_MspInit+0x44>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9a:	4a08      	ldr	r2, [pc, #32]	@ (8000dbc <HAL_MspInit+0x44>)
 8000d9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000da0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000da2:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <HAL_MspInit+0x44>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	40023800 	.word	0x40023800

08000dc0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	@ 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a2d      	ldr	r2, [pc, #180]	@ (8000e94 <HAL_DAC_MspInit+0xd4>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d153      	bne.n	8000e8a <HAL_DAC_MspInit+0xca>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000de2:	4b2d      	ldr	r3, [pc, #180]	@ (8000e98 <HAL_DAC_MspInit+0xd8>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de6:	4a2c      	ldr	r2, [pc, #176]	@ (8000e98 <HAL_DAC_MspInit+0xd8>)
 8000de8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000dec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dee:	4b2a      	ldr	r3, [pc, #168]	@ (8000e98 <HAL_DAC_MspInit+0xd8>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	4b27      	ldr	r3, [pc, #156]	@ (8000e98 <HAL_DAC_MspInit+0xd8>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	4a26      	ldr	r2, [pc, #152]	@ (8000e98 <HAL_DAC_MspInit+0xd8>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e06:	4b24      	ldr	r3, [pc, #144]	@ (8000e98 <HAL_DAC_MspInit+0xd8>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e12:	2310      	movs	r3, #16
 8000e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e16:	2303      	movs	r3, #3
 8000e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	481d      	ldr	r0, [pc, #116]	@ (8000e9c <HAL_DAC_MspInit+0xdc>)
 8000e26:	f001 fba5 	bl	8002574 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea0 <HAL_DAC_MspInit+0xe0>)
 8000e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ea4 <HAL_DAC_MspInit+0xe4>)
 8000e2e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8000e30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea0 <HAL_DAC_MspInit+0xe0>)
 8000e32:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000e36:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e38:	4b19      	ldr	r3, [pc, #100]	@ (8000ea0 <HAL_DAC_MspInit+0xe0>)
 8000e3a:	2240      	movs	r2, #64	@ 0x40
 8000e3c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ea0 <HAL_DAC_MspInit+0xe0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8000e44:	4b16      	ldr	r3, [pc, #88]	@ (8000ea0 <HAL_DAC_MspInit+0xe0>)
 8000e46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e4a:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ea0 <HAL_DAC_MspInit+0xe0>)
 8000e4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e52:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e54:	4b12      	ldr	r3, [pc, #72]	@ (8000ea0 <HAL_DAC_MspInit+0xe0>)
 8000e56:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e5a:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 8000e5c:	4b10      	ldr	r3, [pc, #64]	@ (8000ea0 <HAL_DAC_MspInit+0xe0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8000e62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea0 <HAL_DAC_MspInit+0xe0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e68:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea0 <HAL_DAC_MspInit+0xe0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8000e6e:	480c      	ldr	r0, [pc, #48]	@ (8000ea0 <HAL_DAC_MspInit+0xe0>)
 8000e70:	f000 fd70 	bl	8001954 <HAL_DMA_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_DAC_MspInit+0xbe>
    {
      Error_Handler();
 8000e7a:	f7ff ff77 	bl	8000d6c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a07      	ldr	r2, [pc, #28]	@ (8000ea0 <HAL_DAC_MspInit+0xe0>)
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	4a06      	ldr	r2, [pc, #24]	@ (8000ea0 <HAL_DAC_MspInit+0xe0>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000e8a:	bf00      	nop
 8000e8c:	3728      	adds	r7, #40	@ 0x28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40007400 	.word	0x40007400
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	200001b4 	.word	0x200001b4
 8000ea4:	40026088 	.word	0x40026088

08000ea8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08e      	sub	sp, #56	@ 0x38
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a4e      	ldr	r2, [pc, #312]	@ (8001000 <HAL_ETH_MspInit+0x158>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	f040 8096 	bne.w	8000ff8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ecc:	4b4d      	ldr	r3, [pc, #308]	@ (8001004 <HAL_ETH_MspInit+0x15c>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed0:	4a4c      	ldr	r2, [pc, #304]	@ (8001004 <HAL_ETH_MspInit+0x15c>)
 8000ed2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ed6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed8:	4b4a      	ldr	r3, [pc, #296]	@ (8001004 <HAL_ETH_MspInit+0x15c>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000edc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ee0:	623b      	str	r3, [r7, #32]
 8000ee2:	6a3b      	ldr	r3, [r7, #32]
 8000ee4:	4b47      	ldr	r3, [pc, #284]	@ (8001004 <HAL_ETH_MspInit+0x15c>)
 8000ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee8:	4a46      	ldr	r2, [pc, #280]	@ (8001004 <HAL_ETH_MspInit+0x15c>)
 8000eea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000eee:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef0:	4b44      	ldr	r3, [pc, #272]	@ (8001004 <HAL_ETH_MspInit+0x15c>)
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000ef8:	61fb      	str	r3, [r7, #28]
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	4b41      	ldr	r3, [pc, #260]	@ (8001004 <HAL_ETH_MspInit+0x15c>)
 8000efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f00:	4a40      	ldr	r2, [pc, #256]	@ (8001004 <HAL_ETH_MspInit+0x15c>)
 8000f02:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000f06:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f08:	4b3e      	ldr	r3, [pc, #248]	@ (8001004 <HAL_ETH_MspInit+0x15c>)
 8000f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000f10:	61bb      	str	r3, [r7, #24]
 8000f12:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f14:	4b3b      	ldr	r3, [pc, #236]	@ (8001004 <HAL_ETH_MspInit+0x15c>)
 8000f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f18:	4a3a      	ldr	r2, [pc, #232]	@ (8001004 <HAL_ETH_MspInit+0x15c>)
 8000f1a:	f043 0304 	orr.w	r3, r3, #4
 8000f1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f20:	4b38      	ldr	r3, [pc, #224]	@ (8001004 <HAL_ETH_MspInit+0x15c>)
 8000f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f24:	f003 0304 	and.w	r3, r3, #4
 8000f28:	617b      	str	r3, [r7, #20]
 8000f2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2c:	4b35      	ldr	r3, [pc, #212]	@ (8001004 <HAL_ETH_MspInit+0x15c>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f30:	4a34      	ldr	r2, [pc, #208]	@ (8001004 <HAL_ETH_MspInit+0x15c>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f38:	4b32      	ldr	r3, [pc, #200]	@ (8001004 <HAL_ETH_MspInit+0x15c>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f44:	4b2f      	ldr	r3, [pc, #188]	@ (8001004 <HAL_ETH_MspInit+0x15c>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f48:	4a2e      	ldr	r2, [pc, #184]	@ (8001004 <HAL_ETH_MspInit+0x15c>)
 8000f4a:	f043 0302 	orr.w	r3, r3, #2
 8000f4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f50:	4b2c      	ldr	r3, [pc, #176]	@ (8001004 <HAL_ETH_MspInit+0x15c>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f5c:	4b29      	ldr	r3, [pc, #164]	@ (8001004 <HAL_ETH_MspInit+0x15c>)
 8000f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f60:	4a28      	ldr	r2, [pc, #160]	@ (8001004 <HAL_ETH_MspInit+0x15c>)
 8000f62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f66:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f68:	4b26      	ldr	r3, [pc, #152]	@ (8001004 <HAL_ETH_MspInit+0x15c>)
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f74:	2332      	movs	r3, #50	@ 0x32
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f80:	2303      	movs	r3, #3
 8000f82:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f84:	230b      	movs	r3, #11
 8000f86:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	481e      	ldr	r0, [pc, #120]	@ (8001008 <HAL_ETH_MspInit+0x160>)
 8000f90:	f001 faf0 	bl	8002574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f94:	2386      	movs	r3, #134	@ 0x86
 8000f96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fa4:	230b      	movs	r3, #11
 8000fa6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fac:	4619      	mov	r1, r3
 8000fae:	4817      	ldr	r0, [pc, #92]	@ (800100c <HAL_ETH_MspInit+0x164>)
 8000fb0:	f001 fae0 	bl	8002574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000fb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fb8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fc6:	230b      	movs	r3, #11
 8000fc8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000fca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480f      	ldr	r0, [pc, #60]	@ (8001010 <HAL_ETH_MspInit+0x168>)
 8000fd2:	f001 facf 	bl	8002574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000fd6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000fda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fe8:	230b      	movs	r3, #11
 8000fea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4808      	ldr	r0, [pc, #32]	@ (8001014 <HAL_ETH_MspInit+0x16c>)
 8000ff4:	f001 fabe 	bl	8002574 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ff8:	bf00      	nop
 8000ffa:	3738      	adds	r7, #56	@ 0x38
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40028000 	.word	0x40028000
 8001004:	40023800 	.word	0x40023800
 8001008:	40020800 	.word	0x40020800
 800100c:	40020000 	.word	0x40020000
 8001010:	40020400 	.word	0x40020400
 8001014:	40021800 	.word	0x40021800

08001018 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b0ae      	sub	sp, #184	@ 0xb8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	2290      	movs	r2, #144	@ 0x90
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f004 fe45 	bl	8005cc8 <memset>
  if(hi2c->Instance==I2C1)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a22      	ldr	r2, [pc, #136]	@ (80010cc <HAL_I2C_MspInit+0xb4>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d13c      	bne.n	80010c2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001048:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800104c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800104e:	2300      	movs	r3, #0
 8001050:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4618      	mov	r0, r3
 8001058:	f002 fbf6 	bl	8003848 <HAL_RCCEx_PeriphCLKConfig>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001062:	f7ff fe83 	bl	8000d6c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001066:	4b1a      	ldr	r3, [pc, #104]	@ (80010d0 <HAL_I2C_MspInit+0xb8>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	4a19      	ldr	r2, [pc, #100]	@ (80010d0 <HAL_I2C_MspInit+0xb8>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	6313      	str	r3, [r2, #48]	@ 0x30
 8001072:	4b17      	ldr	r3, [pc, #92]	@ (80010d0 <HAL_I2C_MspInit+0xb8>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800107e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001082:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001086:	2312      	movs	r3, #18
 8001088:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001092:	2303      	movs	r3, #3
 8001094:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001098:	2304      	movs	r3, #4
 800109a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010a2:	4619      	mov	r1, r3
 80010a4:	480b      	ldr	r0, [pc, #44]	@ (80010d4 <HAL_I2C_MspInit+0xbc>)
 80010a6:	f001 fa65 	bl	8002574 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010aa:	4b09      	ldr	r3, [pc, #36]	@ (80010d0 <HAL_I2C_MspInit+0xb8>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ae:	4a08      	ldr	r2, [pc, #32]	@ (80010d0 <HAL_I2C_MspInit+0xb8>)
 80010b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010b6:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <HAL_I2C_MspInit+0xb8>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010c2:	bf00      	nop
 80010c4:	37b8      	adds	r7, #184	@ 0xb8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40005400 	.word	0x40005400
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40020400 	.word	0x40020400

080010d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010e8:	d10b      	bne.n	8001102 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ea:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <HAL_TIM_Base_MspInit+0x38>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ee:	4a08      	ldr	r2, [pc, #32]	@ (8001110 <HAL_TIM_Base_MspInit+0x38>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010f6:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <HAL_TIM_Base_MspInit+0x38>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001102:	bf00      	nop
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800

08001114 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001134:	d11b      	bne.n	800116e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	4b10      	ldr	r3, [pc, #64]	@ (8001178 <HAL_TIM_MspPostInit+0x64>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	4a0f      	ldr	r2, [pc, #60]	@ (8001178 <HAL_TIM_MspPostInit+0x64>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6313      	str	r3, [r2, #48]	@ 0x30
 8001142:	4b0d      	ldr	r3, [pc, #52]	@ (8001178 <HAL_TIM_MspPostInit+0x64>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800114e:	2301      	movs	r3, #1
 8001150:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115a:	2303      	movs	r3, #3
 800115c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800115e:	2301      	movs	r3, #1
 8001160:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 030c 	add.w	r3, r7, #12
 8001166:	4619      	mov	r1, r3
 8001168:	4804      	ldr	r0, [pc, #16]	@ (800117c <HAL_TIM_MspPostInit+0x68>)
 800116a:	f001 fa03 	bl	8002574 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800116e:	bf00      	nop
 8001170:	3720      	adds	r7, #32
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800
 800117c:	40020000 	.word	0x40020000

08001180 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b0b0      	sub	sp, #192	@ 0xc0
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001198:	f107 031c 	add.w	r3, r7, #28
 800119c:	2290      	movs	r2, #144	@ 0x90
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f004 fd91 	bl	8005cc8 <memset>
  if(huart->Instance==USART3)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a43      	ldr	r2, [pc, #268]	@ (80012b8 <HAL_UART_MspInit+0x138>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d13d      	bne.n	800122c <HAL_UART_MspInit+0xac>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ba:	f107 031c 	add.w	r3, r7, #28
 80011be:	4618      	mov	r0, r3
 80011c0:	f002 fb42 	bl	8003848 <HAL_RCCEx_PeriphCLKConfig>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011ca:	f7ff fdcf 	bl	8000d6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011ce:	4b3b      	ldr	r3, [pc, #236]	@ (80012bc <HAL_UART_MspInit+0x13c>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d2:	4a3a      	ldr	r2, [pc, #232]	@ (80012bc <HAL_UART_MspInit+0x13c>)
 80011d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011da:	4b38      	ldr	r3, [pc, #224]	@ (80012bc <HAL_UART_MspInit+0x13c>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011e2:	61bb      	str	r3, [r7, #24]
 80011e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011e6:	4b35      	ldr	r3, [pc, #212]	@ (80012bc <HAL_UART_MspInit+0x13c>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	4a34      	ldr	r2, [pc, #208]	@ (80012bc <HAL_UART_MspInit+0x13c>)
 80011ec:	f043 0308 	orr.w	r3, r3, #8
 80011f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f2:	4b32      	ldr	r3, [pc, #200]	@ (80012bc <HAL_UART_MspInit+0x13c>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f003 0308 	and.w	r3, r3, #8
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001202:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001218:	2307      	movs	r3, #7
 800121a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800121e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001222:	4619      	mov	r1, r3
 8001224:	4826      	ldr	r0, [pc, #152]	@ (80012c0 <HAL_UART_MspInit+0x140>)
 8001226:	f001 f9a5 	bl	8002574 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800122a:	e040      	b.n	80012ae <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART6)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a24      	ldr	r2, [pc, #144]	@ (80012c4 <HAL_UART_MspInit+0x144>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d13b      	bne.n	80012ae <HAL_UART_MspInit+0x12e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001236:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800123a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800123c:	2300      	movs	r3, #0
 800123e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001240:	f107 031c 	add.w	r3, r7, #28
 8001244:	4618      	mov	r0, r3
 8001246:	f002 faff 	bl	8003848 <HAL_RCCEx_PeriphCLKConfig>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001250:	f7ff fd8c 	bl	8000d6c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001254:	4b19      	ldr	r3, [pc, #100]	@ (80012bc <HAL_UART_MspInit+0x13c>)
 8001256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001258:	4a18      	ldr	r2, [pc, #96]	@ (80012bc <HAL_UART_MspInit+0x13c>)
 800125a:	f043 0320 	orr.w	r3, r3, #32
 800125e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001260:	4b16      	ldr	r3, [pc, #88]	@ (80012bc <HAL_UART_MspInit+0x13c>)
 8001262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001264:	f003 0320 	and.w	r3, r3, #32
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800126c:	4b13      	ldr	r3, [pc, #76]	@ (80012bc <HAL_UART_MspInit+0x13c>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001270:	4a12      	ldr	r2, [pc, #72]	@ (80012bc <HAL_UART_MspInit+0x13c>)
 8001272:	f043 0304 	orr.w	r3, r3, #4
 8001276:	6313      	str	r3, [r2, #48]	@ 0x30
 8001278:	4b10      	ldr	r3, [pc, #64]	@ (80012bc <HAL_UART_MspInit+0x13c>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001284:	23c0      	movs	r3, #192	@ 0xc0
 8001286:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001296:	2303      	movs	r3, #3
 8001298:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800129c:	2308      	movs	r3, #8
 800129e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80012a6:	4619      	mov	r1, r3
 80012a8:	4807      	ldr	r0, [pc, #28]	@ (80012c8 <HAL_UART_MspInit+0x148>)
 80012aa:	f001 f963 	bl	8002574 <HAL_GPIO_Init>
}
 80012ae:	bf00      	nop
 80012b0:	37c0      	adds	r7, #192	@ 0xc0
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40004800 	.word	0x40004800
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020c00 	.word	0x40020c00
 80012c4:	40011400 	.word	0x40011400
 80012c8:	40020800 	.word	0x40020800

080012cc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b0ae      	sub	sp, #184	@ 0xb8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	2290      	movs	r2, #144	@ 0x90
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f004 fceb 	bl	8005cc8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012fa:	d159      	bne.n	80013b0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80012fc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001300:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001302:	2300      	movs	r3, #0
 8001304:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	4618      	mov	r0, r3
 800130e:	f002 fa9b 	bl	8003848 <HAL_RCCEx_PeriphCLKConfig>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001318:	f7ff fd28 	bl	8000d6c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131c:	4b26      	ldr	r3, [pc, #152]	@ (80013b8 <HAL_PCD_MspInit+0xec>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001320:	4a25      	ldr	r2, [pc, #148]	@ (80013b8 <HAL_PCD_MspInit+0xec>)
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	6313      	str	r3, [r2, #48]	@ 0x30
 8001328:	4b23      	ldr	r3, [pc, #140]	@ (80013b8 <HAL_PCD_MspInit+0xec>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001334:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001338:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133c:	2302      	movs	r3, #2
 800133e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001348:	2303      	movs	r3, #3
 800134a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800134e:	230a      	movs	r3, #10
 8001350:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001354:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001358:	4619      	mov	r1, r3
 800135a:	4818      	ldr	r0, [pc, #96]	@ (80013bc <HAL_PCD_MspInit+0xf0>)
 800135c:	f001 f90a 	bl	8002574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001360:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001364:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001368:	2300      	movs	r3, #0
 800136a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001374:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001378:	4619      	mov	r1, r3
 800137a:	4810      	ldr	r0, [pc, #64]	@ (80013bc <HAL_PCD_MspInit+0xf0>)
 800137c:	f001 f8fa 	bl	8002574 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001380:	4b0d      	ldr	r3, [pc, #52]	@ (80013b8 <HAL_PCD_MspInit+0xec>)
 8001382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001384:	4a0c      	ldr	r2, [pc, #48]	@ (80013b8 <HAL_PCD_MspInit+0xec>)
 8001386:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800138a:	6353      	str	r3, [r2, #52]	@ 0x34
 800138c:	4b0a      	ldr	r3, [pc, #40]	@ (80013b8 <HAL_PCD_MspInit+0xec>)
 800138e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	4b07      	ldr	r3, [pc, #28]	@ (80013b8 <HAL_PCD_MspInit+0xec>)
 800139a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139c:	4a06      	ldr	r2, [pc, #24]	@ (80013b8 <HAL_PCD_MspInit+0xec>)
 800139e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80013a4:	4b04      	ldr	r3, [pc, #16]	@ (80013b8 <HAL_PCD_MspInit+0xec>)
 80013a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80013b0:	bf00      	nop
 80013b2:	37b8      	adds	r7, #184	@ 0xb8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020000 	.word	0x40020000

080013c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <NMI_Handler+0x4>

080013c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <HardFault_Handler+0x4>

080013d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <MemManage_Handler+0x4>

080013d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013dc:	bf00      	nop
 80013de:	e7fd      	b.n	80013dc <BusFault_Handler+0x4>

080013e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <UsageFault_Handler+0x4>

080013e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001416:	f000 f885 	bl	8001524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001424:	4802      	ldr	r0, [pc, #8]	@ (8001430 <DMA1_Stream5_IRQHandler+0x10>)
 8001426:	f000 fb43 	bl	8001ab0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	200001b4 	.word	0x200001b4

08001434 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001438:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <SystemInit+0x20>)
 800143a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800143e:	4a05      	ldr	r2, [pc, #20]	@ (8001454 <SystemInit+0x20>)
 8001440:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001444:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001458:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001490 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800145c:	480d      	ldr	r0, [pc, #52]	@ (8001494 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800145e:	490e      	ldr	r1, [pc, #56]	@ (8001498 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001460:	4a0e      	ldr	r2, [pc, #56]	@ (800149c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001464:	e002      	b.n	800146c <LoopCopyDataInit>

08001466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146a:	3304      	adds	r3, #4

0800146c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800146c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001470:	d3f9      	bcc.n	8001466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001472:	4a0b      	ldr	r2, [pc, #44]	@ (80014a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001474:	4c0b      	ldr	r4, [pc, #44]	@ (80014a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001478:	e001      	b.n	800147e <LoopFillZerobss>

0800147a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800147c:	3204      	adds	r2, #4

0800147e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001480:	d3fb      	bcc.n	800147a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001482:	f7ff ffd7 	bl	8001434 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001486:	f004 fc27 	bl	8005cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800148a:	f7ff f84d 	bl	8000528 <main>
  bx  lr    
 800148e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001490:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001498:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800149c:	08005d78 	.word	0x08005d78
  ldr r2, =_sbss
 80014a0:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 80014a4:	20000988 	.word	0x20000988

080014a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014a8:	e7fe      	b.n	80014a8 <ADC_IRQHandler>

080014aa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ae:	2003      	movs	r0, #3
 80014b0:	f000 f94c 	bl	800174c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014b4:	2000      	movs	r0, #0
 80014b6:	f000 f805 	bl	80014c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014ba:	f7ff fc5d 	bl	8000d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014cc:	4b12      	ldr	r3, [pc, #72]	@ (8001518 <HAL_InitTick+0x54>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4b12      	ldr	r3, [pc, #72]	@ (800151c <HAL_InitTick+0x58>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	4619      	mov	r1, r3
 80014d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014da:	fbb3 f3f1 	udiv	r3, r3, r1
 80014de:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 f967 	bl	80017b6 <HAL_SYSTICK_Config>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e00e      	b.n	8001510 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b0f      	cmp	r3, #15
 80014f6:	d80a      	bhi.n	800150e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f8:	2200      	movs	r2, #0
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001500:	f000 f92f 	bl	8001762 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001504:	4a06      	ldr	r2, [pc, #24]	@ (8001520 <HAL_InitTick+0x5c>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	e000      	b.n	8001510 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000000 	.word	0x20000000
 800151c:	20000008 	.word	0x20000008
 8001520:	20000004 	.word	0x20000004

08001524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001528:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <HAL_IncTick+0x20>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <HAL_IncTick+0x24>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4413      	add	r3, r2
 8001534:	4a04      	ldr	r2, [pc, #16]	@ (8001548 <HAL_IncTick+0x24>)
 8001536:	6013      	str	r3, [r2, #0]
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000008 	.word	0x20000008
 8001548:	20000984 	.word	0x20000984

0800154c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return uwTick;
 8001550:	4b03      	ldr	r3, [pc, #12]	@ (8001560 <HAL_GetTick+0x14>)
 8001552:	681b      	ldr	r3, [r3, #0]
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	20000984 	.word	0x20000984

08001564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800156c:	f7ff ffee 	bl	800154c <HAL_GetTick>
 8001570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800157c:	d005      	beq.n	800158a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800157e:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <HAL_Delay+0x44>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	461a      	mov	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4413      	add	r3, r2
 8001588:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800158a:	bf00      	nop
 800158c:	f7ff ffde 	bl	800154c <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	429a      	cmp	r2, r3
 800159a:	d8f7      	bhi.n	800158c <HAL_Delay+0x28>
  {
  }
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000008 	.word	0x20000008

080015ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015bc:	4b0b      	ldr	r3, [pc, #44]	@ (80015ec <__NVIC_SetPriorityGrouping+0x40>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015c8:	4013      	ands	r3, r2
 80015ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015d4:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <__NVIC_SetPriorityGrouping+0x44>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015da:	4a04      	ldr	r2, [pc, #16]	@ (80015ec <__NVIC_SetPriorityGrouping+0x40>)
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	60d3      	str	r3, [r2, #12]
}
 80015e0:	bf00      	nop
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000ed00 	.word	0xe000ed00
 80015f0:	05fa0000 	.word	0x05fa0000

080015f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f8:	4b04      	ldr	r3, [pc, #16]	@ (800160c <__NVIC_GetPriorityGrouping+0x18>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	0a1b      	lsrs	r3, r3, #8
 80015fe:	f003 0307 	and.w	r3, r3, #7
}
 8001602:	4618      	mov	r0, r3
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	2b00      	cmp	r3, #0
 8001620:	db0b      	blt.n	800163a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	f003 021f 	and.w	r2, r3, #31
 8001628:	4907      	ldr	r1, [pc, #28]	@ (8001648 <__NVIC_EnableIRQ+0x38>)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	095b      	lsrs	r3, r3, #5
 8001630:	2001      	movs	r0, #1
 8001632:	fa00 f202 	lsl.w	r2, r0, r2
 8001636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000e100 	.word	0xe000e100

0800164c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	6039      	str	r1, [r7, #0]
 8001656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165c:	2b00      	cmp	r3, #0
 800165e:	db0a      	blt.n	8001676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	b2da      	uxtb	r2, r3
 8001664:	490c      	ldr	r1, [pc, #48]	@ (8001698 <__NVIC_SetPriority+0x4c>)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	0112      	lsls	r2, r2, #4
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	440b      	add	r3, r1
 8001670:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001674:	e00a      	b.n	800168c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4908      	ldr	r1, [pc, #32]	@ (800169c <__NVIC_SetPriority+0x50>)
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	3b04      	subs	r3, #4
 8001684:	0112      	lsls	r2, r2, #4
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	440b      	add	r3, r1
 800168a:	761a      	strb	r2, [r3, #24]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	e000e100 	.word	0xe000e100
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b089      	sub	sp, #36	@ 0x24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f1c3 0307 	rsb	r3, r3, #7
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	bf28      	it	cs
 80016be:	2304      	movcs	r3, #4
 80016c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3304      	adds	r3, #4
 80016c6:	2b06      	cmp	r3, #6
 80016c8:	d902      	bls.n	80016d0 <NVIC_EncodePriority+0x30>
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3b03      	subs	r3, #3
 80016ce:	e000      	b.n	80016d2 <NVIC_EncodePriority+0x32>
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	f04f 32ff 	mov.w	r2, #4294967295
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43da      	mvns	r2, r3
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	401a      	ands	r2, r3
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	fa01 f303 	lsl.w	r3, r1, r3
 80016f2:	43d9      	mvns	r1, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	4313      	orrs	r3, r2
         );
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3724      	adds	r7, #36	@ 0x24
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3b01      	subs	r3, #1
 8001714:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001718:	d301      	bcc.n	800171e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800171a:	2301      	movs	r3, #1
 800171c:	e00f      	b.n	800173e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800171e:	4a0a      	ldr	r2, [pc, #40]	@ (8001748 <SysTick_Config+0x40>)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3b01      	subs	r3, #1
 8001724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001726:	210f      	movs	r1, #15
 8001728:	f04f 30ff 	mov.w	r0, #4294967295
 800172c:	f7ff ff8e 	bl	800164c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001730:	4b05      	ldr	r3, [pc, #20]	@ (8001748 <SysTick_Config+0x40>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001736:	4b04      	ldr	r3, [pc, #16]	@ (8001748 <SysTick_Config+0x40>)
 8001738:	2207      	movs	r2, #7
 800173a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	e000e010 	.word	0xe000e010

0800174c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ff29 	bl	80015ac <__NVIC_SetPriorityGrouping>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001762:	b580      	push	{r7, lr}
 8001764:	b086      	sub	sp, #24
 8001766:	af00      	add	r7, sp, #0
 8001768:	4603      	mov	r3, r0
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
 800176e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001774:	f7ff ff3e 	bl	80015f4 <__NVIC_GetPriorityGrouping>
 8001778:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	68b9      	ldr	r1, [r7, #8]
 800177e:	6978      	ldr	r0, [r7, #20]
 8001780:	f7ff ff8e 	bl	80016a0 <NVIC_EncodePriority>
 8001784:	4602      	mov	r2, r0
 8001786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800178a:	4611      	mov	r1, r2
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff5d 	bl	800164c <__NVIC_SetPriority>
}
 8001792:	bf00      	nop
 8001794:	3718      	adds	r7, #24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	4603      	mov	r3, r0
 80017a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff31 	bl	8001610 <__NVIC_EnableIRQ>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff ffa2 	bl	8001708 <SysTick_Config>
 80017c4:	4603      	mov	r3, r0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e014      	b.n	800180a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	791b      	ldrb	r3, [r3, #4]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d105      	bne.n	80017f6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff fae5 	bl	8000dc0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2202      	movs	r2, #2
 80017fa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	795b      	ldrb	r3, [r3, #5]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d101      	bne.n	8001828 <HAL_DAC_Start+0x16>
 8001824:	2302      	movs	r3, #2
 8001826:	e040      	b.n	80018aa <HAL_DAC_Start+0x98>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2202      	movs	r2, #2
 8001832:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6819      	ldr	r1, [r3, #0]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	f003 0310 	and.w	r3, r3, #16
 8001840:	2201      	movs	r2, #1
 8001842:	409a      	lsls	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	430a      	orrs	r2, r1
 800184a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10f      	bne.n	8001872 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800185c:	2b3c      	cmp	r3, #60	@ 0x3c
 800185e:	d11d      	bne.n	800189c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f042 0201 	orr.w	r2, r2, #1
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	e014      	b.n	800189c <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	f003 0310 	and.w	r3, r3, #16
 8001882:	213c      	movs	r1, #60	@ 0x3c
 8001884:	fa01 f303 	lsl.w	r3, r1, r3
 8001888:	429a      	cmp	r2, r3
 800188a:	d107      	bne.n	800189c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 0202 	orr.w	r2, r2, #2
 800189a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b087      	sub	sp, #28
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	60f8      	str	r0, [r7, #12]
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	795b      	ldrb	r3, [r3, #5]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d101      	bne.n	80018ce <HAL_DAC_ConfigChannel+0x18>
 80018ca:	2302      	movs	r3, #2
 80018cc:	e03c      	b.n	8001948 <HAL_DAC_ConfigChannel+0x92>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2201      	movs	r2, #1
 80018d2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2202      	movs	r2, #2
 80018d8:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f003 0310 	and.w	r3, r3, #16
 80018e8:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	4013      	ands	r3, r2
 80018f6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	4313      	orrs	r3, r2
 8001914:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6819      	ldr	r1, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f003 0310 	and.w	r3, r3, #16
 800192a:	22c0      	movs	r2, #192	@ 0xc0
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43da      	mvns	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	400a      	ands	r2, r1
 8001938:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2201      	movs	r2, #1
 800193e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2200      	movs	r2, #0
 8001944:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	371c      	adds	r7, #28
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001960:	f7ff fdf4 	bl	800154c <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e099      	b.n	8001aa4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2202      	movs	r2, #2
 8001974:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 0201 	bic.w	r2, r2, #1
 800198e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001990:	e00f      	b.n	80019b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001992:	f7ff fddb 	bl	800154c <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b05      	cmp	r3, #5
 800199e:	d908      	bls.n	80019b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2220      	movs	r2, #32
 80019a4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2203      	movs	r2, #3
 80019aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e078      	b.n	8001aa4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1e8      	bne.n	8001992 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	4b38      	ldr	r3, [pc, #224]	@ (8001aac <HAL_DMA_Init+0x158>)
 80019cc:	4013      	ands	r3, r2
 80019ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a08:	2b04      	cmp	r3, #4
 8001a0a:	d107      	bne.n	8001a1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a14:	4313      	orrs	r3, r2
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	f023 0307 	bic.w	r3, r3, #7
 8001a32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	d117      	bne.n	8001a76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00e      	beq.n	8001a76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 f9e9 	bl	8001e30 <DMA_CheckFifoParam>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d008      	beq.n	8001a76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2240      	movs	r2, #64	@ 0x40
 8001a68:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001a72:	2301      	movs	r3, #1
 8001a74:	e016      	b.n	8001aa4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 f9a0 	bl	8001dc4 <DMA_CalcBaseAndBitshift>
 8001a84:	4603      	mov	r3, r0
 8001a86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a8c:	223f      	movs	r2, #63	@ 0x3f
 8001a8e:	409a      	lsls	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	e010803f 	.word	0xe010803f

08001ab0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001abc:	4b8e      	ldr	r3, [pc, #568]	@ (8001cf8 <HAL_DMA_IRQHandler+0x248>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a8e      	ldr	r2, [pc, #568]	@ (8001cfc <HAL_DMA_IRQHandler+0x24c>)
 8001ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac6:	0a9b      	lsrs	r3, r3, #10
 8001ac8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ace:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ada:	2208      	movs	r2, #8
 8001adc:	409a      	lsls	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d01a      	beq.n	8001b1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d013      	beq.n	8001b1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 0204 	bic.w	r2, r2, #4
 8001b02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b08:	2208      	movs	r2, #8
 8001b0a:	409a      	lsls	r2, r3
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b14:	f043 0201 	orr.w	r2, r3, #1
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b20:	2201      	movs	r2, #1
 8001b22:	409a      	lsls	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4013      	ands	r3, r2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d012      	beq.n	8001b52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00b      	beq.n	8001b52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b3e:	2201      	movs	r2, #1
 8001b40:	409a      	lsls	r2, r3
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b4a:	f043 0202 	orr.w	r2, r3, #2
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b56:	2204      	movs	r2, #4
 8001b58:	409a      	lsls	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d012      	beq.n	8001b88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00b      	beq.n	8001b88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b74:	2204      	movs	r2, #4
 8001b76:	409a      	lsls	r2, r3
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b80:	f043 0204 	orr.w	r2, r3, #4
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b8c:	2210      	movs	r2, #16
 8001b8e:	409a      	lsls	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d043      	beq.n	8001c20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0308 	and.w	r3, r3, #8
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d03c      	beq.n	8001c20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001baa:	2210      	movs	r2, #16
 8001bac:	409a      	lsls	r2, r3
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d018      	beq.n	8001bf2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d108      	bne.n	8001be0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d024      	beq.n	8001c20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	4798      	blx	r3
 8001bde:	e01f      	b.n	8001c20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d01b      	beq.n	8001c20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	4798      	blx	r3
 8001bf0:	e016      	b.n	8001c20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d107      	bne.n	8001c10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 0208 	bic.w	r2, r2, #8
 8001c0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c24:	2220      	movs	r2, #32
 8001c26:	409a      	lsls	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 808f 	beq.w	8001d50 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0310 	and.w	r3, r3, #16
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 8087 	beq.w	8001d50 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c46:	2220      	movs	r2, #32
 8001c48:	409a      	lsls	r2, r3
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b05      	cmp	r3, #5
 8001c58:	d136      	bne.n	8001cc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 0216 	bic.w	r2, r2, #22
 8001c68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	695a      	ldr	r2, [r3, #20]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d103      	bne.n	8001c8a <HAL_DMA_IRQHandler+0x1da>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d007      	beq.n	8001c9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 0208 	bic.w	r2, r2, #8
 8001c98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c9e:	223f      	movs	r2, #63	@ 0x3f
 8001ca0:	409a      	lsls	r2, r3
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d07e      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	4798      	blx	r3
        }
        return;
 8001cc6:	e079      	b.n	8001dbc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d01d      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10d      	bne.n	8001d00 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d031      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	4798      	blx	r3
 8001cf4:	e02c      	b.n	8001d50 <HAL_DMA_IRQHandler+0x2a0>
 8001cf6:	bf00      	nop
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d023      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	4798      	blx	r3
 8001d10:	e01e      	b.n	8001d50 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10f      	bne.n	8001d40 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0210 	bic.w	r2, r2, #16
 8001d2e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d032      	beq.n	8001dbe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d022      	beq.n	8001daa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2205      	movs	r2, #5
 8001d68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0201 	bic.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d307      	bcc.n	8001d98 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f2      	bne.n	8001d7c <HAL_DMA_IRQHandler+0x2cc>
 8001d96:	e000      	b.n	8001d9a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d98:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d005      	beq.n	8001dbe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	4798      	blx	r3
 8001dba:	e000      	b.n	8001dbe <HAL_DMA_IRQHandler+0x30e>
        return;
 8001dbc:	bf00      	nop
    }
  }
}
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	3b10      	subs	r3, #16
 8001dd4:	4a13      	ldr	r2, [pc, #76]	@ (8001e24 <DMA_CalcBaseAndBitshift+0x60>)
 8001dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dda:	091b      	lsrs	r3, r3, #4
 8001ddc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001dde:	4a12      	ldr	r2, [pc, #72]	@ (8001e28 <DMA_CalcBaseAndBitshift+0x64>)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4413      	add	r3, r2
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b03      	cmp	r3, #3
 8001df0:	d908      	bls.n	8001e04 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e2c <DMA_CalcBaseAndBitshift+0x68>)
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	1d1a      	adds	r2, r3, #4
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e02:	e006      	b.n	8001e12 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4b08      	ldr	r3, [pc, #32]	@ (8001e2c <DMA_CalcBaseAndBitshift+0x68>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	aaaaaaab 	.word	0xaaaaaaab
 8001e28:	08005d60 	.word	0x08005d60
 8001e2c:	fffffc00 	.word	0xfffffc00

08001e30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d11f      	bne.n	8001e8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	d856      	bhi.n	8001efe <DMA_CheckFifoParam+0xce>
 8001e50:	a201      	add	r2, pc, #4	@ (adr r2, 8001e58 <DMA_CheckFifoParam+0x28>)
 8001e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e56:	bf00      	nop
 8001e58:	08001e69 	.word	0x08001e69
 8001e5c:	08001e7b 	.word	0x08001e7b
 8001e60:	08001e69 	.word	0x08001e69
 8001e64:	08001eff 	.word	0x08001eff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d046      	beq.n	8001f02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e78:	e043      	b.n	8001f02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e7e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e82:	d140      	bne.n	8001f06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e88:	e03d      	b.n	8001f06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e92:	d121      	bne.n	8001ed8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2b03      	cmp	r3, #3
 8001e98:	d837      	bhi.n	8001f0a <DMA_CheckFifoParam+0xda>
 8001e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8001ea0 <DMA_CheckFifoParam+0x70>)
 8001e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea0:	08001eb1 	.word	0x08001eb1
 8001ea4:	08001eb7 	.word	0x08001eb7
 8001ea8:	08001eb1 	.word	0x08001eb1
 8001eac:	08001ec9 	.word	0x08001ec9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8001eb4:	e030      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d025      	beq.n	8001f0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ec6:	e022      	b.n	8001f0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ecc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ed0:	d11f      	bne.n	8001f12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ed6:	e01c      	b.n	8001f12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d903      	bls.n	8001ee6 <DMA_CheckFifoParam+0xb6>
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d003      	beq.n	8001eec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ee4:	e018      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	73fb      	strb	r3, [r7, #15]
      break;
 8001eea:	e015      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00e      	beq.n	8001f16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
      break;
 8001efc:	e00b      	b.n	8001f16 <DMA_CheckFifoParam+0xe6>
      break;
 8001efe:	bf00      	nop
 8001f00:	e00a      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
      break;
 8001f02:	bf00      	nop
 8001f04:	e008      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
      break;
 8001f06:	bf00      	nop
 8001f08:	e006      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
      break;
 8001f0a:	bf00      	nop
 8001f0c:	e004      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
      break;
 8001f0e:	bf00      	nop
 8001f10:	e002      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
      break;   
 8001f12:	bf00      	nop
 8001f14:	e000      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
      break;
 8001f16:	bf00      	nop
    }
  } 
  
  return status; 
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop

08001f28 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e06a      	b.n	8002010 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d106      	bne.n	8001f52 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2223      	movs	r2, #35	@ 0x23
 8001f48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7fe ffab 	bl	8000ea8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f52:	4b31      	ldr	r3, [pc, #196]	@ (8002018 <HAL_ETH_Init+0xf0>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f56:	4a30      	ldr	r2, [pc, #192]	@ (8002018 <HAL_ETH_Init+0xf0>)
 8001f58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f5e:	4b2e      	ldr	r3, [pc, #184]	@ (8002018 <HAL_ETH_Init+0xf0>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001f6a:	4b2c      	ldr	r3, [pc, #176]	@ (800201c <HAL_ETH_Init+0xf4>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4a2b      	ldr	r2, [pc, #172]	@ (800201c <HAL_ETH_Init+0xf4>)
 8001f70:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001f74:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001f76:	4b29      	ldr	r3, [pc, #164]	@ (800201c <HAL_ETH_Init+0xf4>)
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	4927      	ldr	r1, [pc, #156]	@ (800201c <HAL_ETH_Init+0xf4>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001f84:	4b25      	ldr	r3, [pc, #148]	@ (800201c <HAL_ETH_Init+0xf4>)
 8001f86:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6812      	ldr	r2, [r2, #0]
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f9e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fa0:	f7ff fad4 	bl	800154c <HAL_GetTick>
 8001fa4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001fa6:	e011      	b.n	8001fcc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001fa8:	f7ff fad0 	bl	800154c <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001fb6:	d909      	bls.n	8001fcc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2204      	movs	r2, #4
 8001fbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	22e0      	movs	r2, #224	@ 0xe0
 8001fc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e021      	b.n	8002010 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1e4      	bne.n	8001fa8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f958 	bl	8002294 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f9ff 	bl	80023e8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 fa55 	bl	800249a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f9bd 	bl	8002378 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2210      	movs	r2, #16
 800200a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40023800 	.word	0x40023800
 800201c:	40013800 	.word	0x40013800

08002020 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	4b51      	ldr	r3, [pc, #324]	@ (800217c <ETH_SetMACConfig+0x15c>)
 8002036:	4013      	ands	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	7c1b      	ldrb	r3, [r3, #16]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d102      	bne.n	8002048 <ETH_SetMACConfig+0x28>
 8002042:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002046:	e000      	b.n	800204a <ETH_SetMACConfig+0x2a>
 8002048:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	7c5b      	ldrb	r3, [r3, #17]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d102      	bne.n	8002058 <ETH_SetMACConfig+0x38>
 8002052:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002056:	e000      	b.n	800205a <ETH_SetMACConfig+0x3a>
 8002058:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800205a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002060:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	7fdb      	ldrb	r3, [r3, #31]
 8002066:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002068:	431a      	orrs	r2, r3
                        macconf->Speed |
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800206e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	7f92      	ldrb	r2, [r2, #30]
 8002074:	2a00      	cmp	r2, #0
 8002076:	d102      	bne.n	800207e <ETH_SetMACConfig+0x5e>
 8002078:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800207c:	e000      	b.n	8002080 <ETH_SetMACConfig+0x60>
 800207e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002080:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	7f1b      	ldrb	r3, [r3, #28]
 8002086:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002088:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800208e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	791b      	ldrb	r3, [r3, #4]
 8002094:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002096:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800209e:	2a00      	cmp	r2, #0
 80020a0:	d102      	bne.n	80020a8 <ETH_SetMACConfig+0x88>
 80020a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020a6:	e000      	b.n	80020aa <ETH_SetMACConfig+0x8a>
 80020a8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80020aa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	7bdb      	ldrb	r3, [r3, #15]
 80020b0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80020b2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80020b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80020c0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80020c2:	4313      	orrs	r3, r2
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020da:	2001      	movs	r0, #1
 80020dc:	f7ff fa42 	bl	8001564 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80020f6:	4013      	ands	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020fe:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002106:	2a00      	cmp	r2, #0
 8002108:	d101      	bne.n	800210e <ETH_SetMACConfig+0xee>
 800210a:	2280      	movs	r2, #128	@ 0x80
 800210c:	e000      	b.n	8002110 <ETH_SetMACConfig+0xf0>
 800210e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002110:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002116:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800211e:	2a01      	cmp	r2, #1
 8002120:	d101      	bne.n	8002126 <ETH_SetMACConfig+0x106>
 8002122:	2208      	movs	r2, #8
 8002124:	e000      	b.n	8002128 <ETH_SetMACConfig+0x108>
 8002126:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002128:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002130:	2a01      	cmp	r2, #1
 8002132:	d101      	bne.n	8002138 <ETH_SetMACConfig+0x118>
 8002134:	2204      	movs	r2, #4
 8002136:	e000      	b.n	800213a <ETH_SetMACConfig+0x11a>
 8002138:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800213a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002142:	2a01      	cmp	r2, #1
 8002144:	d101      	bne.n	800214a <ETH_SetMACConfig+0x12a>
 8002146:	2202      	movs	r2, #2
 8002148:	e000      	b.n	800214c <ETH_SetMACConfig+0x12c>
 800214a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800214c:	4313      	orrs	r3, r2
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	4313      	orrs	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002164:	2001      	movs	r0, #1
 8002166:	f7ff f9fd 	bl	8001564 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	619a      	str	r2, [r3, #24]
}
 8002172:	bf00      	nop
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	ff20810f 	.word	0xff20810f

08002180 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4b3d      	ldr	r3, [pc, #244]	@ (8002290 <ETH_SetDMAConfig+0x110>)
 800219a:	4013      	ands	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	7b1b      	ldrb	r3, [r3, #12]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d102      	bne.n	80021ac <ETH_SetDMAConfig+0x2c>
 80021a6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80021aa:	e000      	b.n	80021ae <ETH_SetDMAConfig+0x2e>
 80021ac:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	7b5b      	ldrb	r3, [r3, #13]
 80021b2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021b4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	7f52      	ldrb	r2, [r2, #29]
 80021ba:	2a00      	cmp	r2, #0
 80021bc:	d102      	bne.n	80021c4 <ETH_SetDMAConfig+0x44>
 80021be:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80021c2:	e000      	b.n	80021c6 <ETH_SetDMAConfig+0x46>
 80021c4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80021c6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	7b9b      	ldrb	r3, [r3, #14]
 80021cc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80021ce:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80021d4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	7f1b      	ldrb	r3, [r3, #28]
 80021da:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80021dc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	7f9b      	ldrb	r3, [r3, #30]
 80021e2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80021e4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80021ea:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021f2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021f4:	4313      	orrs	r3, r2
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002204:	461a      	mov	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002216:	2001      	movs	r0, #1
 8002218:	f7ff f9a4 	bl	8001564 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002224:	461a      	mov	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	791b      	ldrb	r3, [r3, #4]
 800222e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002234:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800223a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002240:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002248:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800224a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002250:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002252:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002258:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6812      	ldr	r2, [r2, #0]
 800225e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002262:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002266:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002274:	2001      	movs	r0, #1
 8002276:	f7ff f975 	bl	8001564 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002282:	461a      	mov	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6013      	str	r3, [r2, #0]
}
 8002288:	bf00      	nop
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	f8de3f23 	.word	0xf8de3f23

08002294 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b0a6      	sub	sp, #152	@ 0x98
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800229c:	2301      	movs	r3, #1
 800229e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80022a2:	2301      	movs	r3, #1
 80022a4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80022a8:	2300      	movs	r3, #0
 80022aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80022b2:	2301      	movs	r3, #1
 80022b4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80022be:	2301      	movs	r3, #1
 80022c0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80022ca:	2300      	movs	r3, #0
 80022cc:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80022d0:	2300      	movs	r3, #0
 80022d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80022d4:	2300      	movs	r3, #0
 80022d6:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80022da:	2300      	movs	r3, #0
 80022dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80022de:	2300      	movs	r3, #0
 80022e0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80022f0:	2300      	movs	r3, #0
 80022f2:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80022f6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80022fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80022fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002300:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002302:	2300      	movs	r3, #0
 8002304:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002308:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800230c:	4619      	mov	r1, r3
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff fe86 	bl	8002020 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002314:	2301      	movs	r3, #1
 8002316:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002318:	2301      	movs	r3, #1
 800231a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800231c:	2301      	movs	r3, #1
 800231e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002322:	2301      	movs	r3, #1
 8002324:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800232a:	2300      	movs	r3, #0
 800232c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002330:	2300      	movs	r3, #0
 8002332:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002336:	2300      	movs	r3, #0
 8002338:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800233a:	2301      	movs	r3, #1
 800233c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002340:	2301      	movs	r3, #1
 8002342:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002344:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002348:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800234a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800234e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002350:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002354:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002356:	2301      	movs	r3, #1
 8002358:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800235c:	2300      	movs	r3, #0
 800235e:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002360:	2300      	movs	r3, #0
 8002362:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002364:	f107 0308 	add.w	r3, r7, #8
 8002368:	4619      	mov	r1, r3
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff ff08 	bl	8002180 <ETH_SetDMAConfig>
}
 8002370:	bf00      	nop
 8002372:	3798      	adds	r7, #152	@ 0x98
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002378:	b480      	push	{r7}
 800237a:	b087      	sub	sp, #28
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3305      	adds	r3, #5
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	3204      	adds	r2, #4
 8002390:	7812      	ldrb	r2, [r2, #0]
 8002392:	4313      	orrs	r3, r2
 8002394:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	4b11      	ldr	r3, [pc, #68]	@ (80023e0 <ETH_MACAddressConfig+0x68>)
 800239a:	4413      	add	r3, r2
 800239c:	461a      	mov	r2, r3
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3303      	adds	r3, #3
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	061a      	lsls	r2, r3, #24
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	3302      	adds	r3, #2
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	041b      	lsls	r3, r3, #16
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3301      	adds	r3, #1
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	021b      	lsls	r3, r3, #8
 80023bc:	4313      	orrs	r3, r2
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	7812      	ldrb	r2, [r2, #0]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <ETH_MACAddressConfig+0x6c>)
 80023ca:	4413      	add	r3, r2
 80023cc:	461a      	mov	r2, r3
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	6013      	str	r3, [r2, #0]
}
 80023d2:	bf00      	nop
 80023d4:	371c      	adds	r7, #28
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40028040 	.word	0x40028040
 80023e4:	40028044 	.word	0x40028044

080023e8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	e03e      	b.n	8002474 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68d9      	ldr	r1, [r3, #12]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	440b      	add	r3, r1
 8002406:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2200      	movs	r2, #0
 8002412:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2200      	movs	r2, #0
 8002418:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2200      	movs	r2, #0
 800241e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002420:	68b9      	ldr	r1, [r7, #8]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	3206      	adds	r2, #6
 8002428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d80c      	bhi.n	8002458 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68d9      	ldr	r1, [r3, #12]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	440b      	add	r3, r1
 8002450:	461a      	mov	r2, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	e004      	b.n	8002462 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	461a      	mov	r2, r3
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	3301      	adds	r3, #1
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2b03      	cmp	r3, #3
 8002478:	d9bd      	bls.n	80023f6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800248c:	611a      	str	r2, [r3, #16]
}
 800248e:	bf00      	nop
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800249a:	b480      	push	{r7}
 800249c:	b085      	sub	sp, #20
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	e046      	b.n	8002536 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6919      	ldr	r1, [r3, #16]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	440b      	add	r3, r1
 80024b8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2200      	movs	r2, #0
 80024c4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2200      	movs	r2, #0
 80024d0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2200      	movs	r2, #0
 80024d6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2200      	movs	r2, #0
 80024dc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80024e4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 80024ec:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80024fa:	68b9      	ldr	r1, [r7, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	3212      	adds	r2, #18
 8002502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2b02      	cmp	r3, #2
 800250a:	d80c      	bhi.n	8002526 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6919      	ldr	r1, [r3, #16]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	4613      	mov	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	440b      	add	r3, r1
 800251e:	461a      	mov	r2, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	60da      	str	r2, [r3, #12]
 8002524:	e004      	b.n	8002530 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	461a      	mov	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	3301      	adds	r3, #1
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2b03      	cmp	r3, #3
 800253a:	d9b5      	bls.n	80024a8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691a      	ldr	r2, [r3, #16]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002566:	60da      	str	r2, [r3, #12]
}
 8002568:	bf00      	nop
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002574:	b480      	push	{r7}
 8002576:	b089      	sub	sp, #36	@ 0x24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002586:	2300      	movs	r3, #0
 8002588:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800258a:	2300      	movs	r3, #0
 800258c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]
 8002592:	e175      	b.n	8002880 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002594:	2201      	movs	r2, #1
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	f040 8164 	bne.w	800287a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d005      	beq.n	80025ca <HAL_GPIO_Init+0x56>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d130      	bne.n	800262c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	2203      	movs	r2, #3
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002600:	2201      	movs	r2, #1
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	f003 0201 	and.w	r2, r3, #1
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0303 	and.w	r3, r3, #3
 8002634:	2b03      	cmp	r3, #3
 8002636:	d017      	beq.n	8002668 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	2203      	movs	r2, #3
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4013      	ands	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d123      	bne.n	80026bc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	08da      	lsrs	r2, r3, #3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3208      	adds	r2, #8
 800267c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	220f      	movs	r2, #15
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	691a      	ldr	r2, [r3, #16]
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	08da      	lsrs	r2, r3, #3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3208      	adds	r2, #8
 80026b6:	69b9      	ldr	r1, [r7, #24]
 80026b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	2203      	movs	r2, #3
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0203 	and.w	r2, r3, #3
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 80be 	beq.w	800287a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026fe:	4b66      	ldr	r3, [pc, #408]	@ (8002898 <HAL_GPIO_Init+0x324>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002702:	4a65      	ldr	r2, [pc, #404]	@ (8002898 <HAL_GPIO_Init+0x324>)
 8002704:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002708:	6453      	str	r3, [r2, #68]	@ 0x44
 800270a:	4b63      	ldr	r3, [pc, #396]	@ (8002898 <HAL_GPIO_Init+0x324>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002716:	4a61      	ldr	r2, [pc, #388]	@ (800289c <HAL_GPIO_Init+0x328>)
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	089b      	lsrs	r3, r3, #2
 800271c:	3302      	adds	r3, #2
 800271e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002722:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	220f      	movs	r2, #15
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a58      	ldr	r2, [pc, #352]	@ (80028a0 <HAL_GPIO_Init+0x32c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d037      	beq.n	80027b2 <HAL_GPIO_Init+0x23e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a57      	ldr	r2, [pc, #348]	@ (80028a4 <HAL_GPIO_Init+0x330>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d031      	beq.n	80027ae <HAL_GPIO_Init+0x23a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a56      	ldr	r2, [pc, #344]	@ (80028a8 <HAL_GPIO_Init+0x334>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d02b      	beq.n	80027aa <HAL_GPIO_Init+0x236>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a55      	ldr	r2, [pc, #340]	@ (80028ac <HAL_GPIO_Init+0x338>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d025      	beq.n	80027a6 <HAL_GPIO_Init+0x232>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a54      	ldr	r2, [pc, #336]	@ (80028b0 <HAL_GPIO_Init+0x33c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d01f      	beq.n	80027a2 <HAL_GPIO_Init+0x22e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a53      	ldr	r2, [pc, #332]	@ (80028b4 <HAL_GPIO_Init+0x340>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d019      	beq.n	800279e <HAL_GPIO_Init+0x22a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a52      	ldr	r2, [pc, #328]	@ (80028b8 <HAL_GPIO_Init+0x344>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d013      	beq.n	800279a <HAL_GPIO_Init+0x226>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a51      	ldr	r2, [pc, #324]	@ (80028bc <HAL_GPIO_Init+0x348>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d00d      	beq.n	8002796 <HAL_GPIO_Init+0x222>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a50      	ldr	r2, [pc, #320]	@ (80028c0 <HAL_GPIO_Init+0x34c>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d007      	beq.n	8002792 <HAL_GPIO_Init+0x21e>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a4f      	ldr	r2, [pc, #316]	@ (80028c4 <HAL_GPIO_Init+0x350>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d101      	bne.n	800278e <HAL_GPIO_Init+0x21a>
 800278a:	2309      	movs	r3, #9
 800278c:	e012      	b.n	80027b4 <HAL_GPIO_Init+0x240>
 800278e:	230a      	movs	r3, #10
 8002790:	e010      	b.n	80027b4 <HAL_GPIO_Init+0x240>
 8002792:	2308      	movs	r3, #8
 8002794:	e00e      	b.n	80027b4 <HAL_GPIO_Init+0x240>
 8002796:	2307      	movs	r3, #7
 8002798:	e00c      	b.n	80027b4 <HAL_GPIO_Init+0x240>
 800279a:	2306      	movs	r3, #6
 800279c:	e00a      	b.n	80027b4 <HAL_GPIO_Init+0x240>
 800279e:	2305      	movs	r3, #5
 80027a0:	e008      	b.n	80027b4 <HAL_GPIO_Init+0x240>
 80027a2:	2304      	movs	r3, #4
 80027a4:	e006      	b.n	80027b4 <HAL_GPIO_Init+0x240>
 80027a6:	2303      	movs	r3, #3
 80027a8:	e004      	b.n	80027b4 <HAL_GPIO_Init+0x240>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e002      	b.n	80027b4 <HAL_GPIO_Init+0x240>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <HAL_GPIO_Init+0x240>
 80027b2:	2300      	movs	r3, #0
 80027b4:	69fa      	ldr	r2, [r7, #28]
 80027b6:	f002 0203 	and.w	r2, r2, #3
 80027ba:	0092      	lsls	r2, r2, #2
 80027bc:	4093      	lsls	r3, r2
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80027c4:	4935      	ldr	r1, [pc, #212]	@ (800289c <HAL_GPIO_Init+0x328>)
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	089b      	lsrs	r3, r3, #2
 80027ca:	3302      	adds	r3, #2
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027d2:	4b3d      	ldr	r3, [pc, #244]	@ (80028c8 <HAL_GPIO_Init+0x354>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027f6:	4a34      	ldr	r2, [pc, #208]	@ (80028c8 <HAL_GPIO_Init+0x354>)
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027fc:	4b32      	ldr	r3, [pc, #200]	@ (80028c8 <HAL_GPIO_Init+0x354>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002820:	4a29      	ldr	r2, [pc, #164]	@ (80028c8 <HAL_GPIO_Init+0x354>)
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002826:	4b28      	ldr	r3, [pc, #160]	@ (80028c8 <HAL_GPIO_Init+0x354>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	43db      	mvns	r3, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4013      	ands	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800284a:	4a1f      	ldr	r2, [pc, #124]	@ (80028c8 <HAL_GPIO_Init+0x354>)
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002850:	4b1d      	ldr	r3, [pc, #116]	@ (80028c8 <HAL_GPIO_Init+0x354>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002874:	4a14      	ldr	r2, [pc, #80]	@ (80028c8 <HAL_GPIO_Init+0x354>)
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3301      	adds	r3, #1
 800287e:	61fb      	str	r3, [r7, #28]
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	2b0f      	cmp	r3, #15
 8002884:	f67f ae86 	bls.w	8002594 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002888:	bf00      	nop
 800288a:	bf00      	nop
 800288c:	3724      	adds	r7, #36	@ 0x24
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40023800 	.word	0x40023800
 800289c:	40013800 	.word	0x40013800
 80028a0:	40020000 	.word	0x40020000
 80028a4:	40020400 	.word	0x40020400
 80028a8:	40020800 	.word	0x40020800
 80028ac:	40020c00 	.word	0x40020c00
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40021400 	.word	0x40021400
 80028b8:	40021800 	.word	0x40021800
 80028bc:	40021c00 	.word	0x40021c00
 80028c0:	40022000 	.word	0x40022000
 80028c4:	40022400 	.word	0x40022400
 80028c8:	40013c00 	.word	0x40013c00

080028cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	807b      	strh	r3, [r7, #2]
 80028d8:	4613      	mov	r3, r2
 80028da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028dc:	787b      	ldrb	r3, [r7, #1]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028e2:	887a      	ldrh	r2, [r7, #2]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80028e8:	e003      	b.n	80028f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80028ea:	887b      	ldrh	r3, [r7, #2]
 80028ec:	041a      	lsls	r2, r3, #16
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	619a      	str	r2, [r3, #24]
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e07f      	b.n	8002a12 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7fe fb76 	bl	8001018 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2224      	movs	r2, #36	@ 0x24
 8002930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0201 	bic.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002950:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002960:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d107      	bne.n	800297a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	e006      	b.n	8002988 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002986:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	2b02      	cmp	r3, #2
 800298e:	d104      	bne.n	800299a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002998:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6859      	ldr	r1, [r3, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a1c <HAL_I2C_Init+0x11c>)
 80029a6:	430b      	orrs	r3, r1
 80029a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691a      	ldr	r2, [r3, #16]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69d9      	ldr	r1, [r3, #28]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a1a      	ldr	r2, [r3, #32]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	02008000 	.word	0x02008000

08002a20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b20      	cmp	r3, #32
 8002a34:	d138      	bne.n	8002aa8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d101      	bne.n	8002a44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a40:	2302      	movs	r3, #2
 8002a42:	e032      	b.n	8002aaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2224      	movs	r2, #36	@ 0x24
 8002a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0201 	bic.w	r2, r2, #1
 8002a62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6819      	ldr	r1, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	e000      	b.n	8002aaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002aa8:	2302      	movs	r3, #2
  }
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b085      	sub	sp, #20
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b20      	cmp	r3, #32
 8002aca:	d139      	bne.n	8002b40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d101      	bne.n	8002ada <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e033      	b.n	8002b42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2224      	movs	r2, #36	@ 0x24
 8002ae6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 0201 	bic.w	r2, r2, #1
 8002af8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	021b      	lsls	r3, r3, #8
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0201 	orr.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	e000      	b.n	8002b42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b40:	2302      	movs	r3, #2
  }
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b50:	b08f      	sub	sp, #60	@ 0x3c
 8002b52:	af0a      	add	r7, sp, #40	@ 0x28
 8002b54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e116      	b.n	8002d8e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d106      	bne.n	8002b80 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7fe fba6 	bl	80012cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2203      	movs	r2, #3
 8002b84:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d102      	bne.n	8002b9a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f002 fdf6 	bl	8005790 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	603b      	str	r3, [r7, #0]
 8002baa:	687e      	ldr	r6, [r7, #4]
 8002bac:	466d      	mov	r5, sp
 8002bae:	f106 0410 	add.w	r4, r6, #16
 8002bb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bbe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bc2:	1d33      	adds	r3, r6, #4
 8002bc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bc6:	6838      	ldr	r0, [r7, #0]
 8002bc8:	f002 fd8a 	bl	80056e0 <USB_CoreInit>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d005      	beq.n	8002bde <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e0d7      	b.n	8002d8e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2100      	movs	r1, #0
 8002be4:	4618      	mov	r0, r3
 8002be6:	f002 fde4 	bl	80057b2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bea:	2300      	movs	r3, #0
 8002bec:	73fb      	strb	r3, [r7, #15]
 8002bee:	e04a      	b.n	8002c86 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bf0:	7bfa      	ldrb	r2, [r7, #15]
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	333d      	adds	r3, #61	@ 0x3d
 8002c00:	2201      	movs	r2, #1
 8002c02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	333c      	adds	r3, #60	@ 0x3c
 8002c14:	7bfa      	ldrb	r2, [r7, #15]
 8002c16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c18:	7bfa      	ldrb	r2, [r7, #15]
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	b298      	uxth	r0, r3
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	3344      	adds	r3, #68	@ 0x44
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c30:	7bfa      	ldrb	r2, [r7, #15]
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4413      	add	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	3340      	adds	r3, #64	@ 0x40
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c44:	7bfa      	ldrb	r2, [r7, #15]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	3348      	adds	r3, #72	@ 0x48
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c58:	7bfa      	ldrb	r2, [r7, #15]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	334c      	adds	r3, #76	@ 0x4c
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c6c:	7bfa      	ldrb	r2, [r7, #15]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	3354      	adds	r3, #84	@ 0x54
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
 8002c82:	3301      	adds	r3, #1
 8002c84:	73fb      	strb	r3, [r7, #15]
 8002c86:	7bfa      	ldrb	r2, [r7, #15]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d3af      	bcc.n	8002bf0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c90:	2300      	movs	r3, #0
 8002c92:	73fb      	strb	r3, [r7, #15]
 8002c94:	e044      	b.n	8002d20 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c96:	7bfa      	ldrb	r2, [r7, #15]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002cac:	7bfa      	ldrb	r2, [r7, #15]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8002cbe:	7bfa      	ldrb	r2, [r7, #15]
 8002cc0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cc2:	7bfa      	ldrb	r2, [r7, #15]
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	4413      	add	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	440b      	add	r3, r1
 8002cd0:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cd8:	7bfa      	ldrb	r2, [r7, #15]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cee:	7bfa      	ldrb	r2, [r7, #15]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d04:	7bfa      	ldrb	r2, [r7, #15]
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d1a:	7bfb      	ldrb	r3, [r7, #15]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
 8002d20:	7bfa      	ldrb	r2, [r7, #15]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d3b5      	bcc.n	8002c96 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	687e      	ldr	r6, [r7, #4]
 8002d32:	466d      	mov	r5, sp
 8002d34:	f106 0410 	add.w	r4, r6, #16
 8002d38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d44:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d48:	1d33      	adds	r3, r6, #4
 8002d4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d4c:	6838      	ldr	r0, [r7, #0]
 8002d4e:	f002 fd7d 	bl	800584c <USB_DevInit>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e014      	b.n	8002d8e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d102      	bne.n	8002d82 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f80b 	bl	8002d98 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f002 ff3b 	bl	8005c02 <USB_DevDisconnect>

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002d98 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002dc6:	4b05      	ldr	r3, [pc, #20]	@ (8002ddc <HAL_PCDEx_ActivateLPM+0x44>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	10000003 	.word	0x10000003

08002de0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002de4:	4b05      	ldr	r3, [pc, #20]	@ (8002dfc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a04      	ldr	r2, [pc, #16]	@ (8002dfc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002dea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dee:	6013      	str	r3, [r2, #0]
}
 8002df0:	bf00      	nop
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40007000 	.word	0x40007000

08002e00 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002e06:	2300      	movs	r3, #0
 8002e08:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e0a:	4b23      	ldr	r3, [pc, #140]	@ (8002e98 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0e:	4a22      	ldr	r2, [pc, #136]	@ (8002e98 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e14:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e16:	4b20      	ldr	r3, [pc, #128]	@ (8002e98 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e1e:	603b      	str	r3, [r7, #0]
 8002e20:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e22:	4b1e      	ldr	r3, [pc, #120]	@ (8002e9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a1d      	ldr	r2, [pc, #116]	@ (8002e9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e2c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e2e:	f7fe fb8d 	bl	800154c <HAL_GetTick>
 8002e32:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e34:	e009      	b.n	8002e4a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e36:	f7fe fb89 	bl	800154c <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e44:	d901      	bls.n	8002e4a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e022      	b.n	8002e90 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e4a:	4b14      	ldr	r3, [pc, #80]	@ (8002e9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e56:	d1ee      	bne.n	8002e36 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e58:	4b10      	ldr	r3, [pc, #64]	@ (8002e9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a0f      	ldr	r2, [pc, #60]	@ (8002e9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e62:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e64:	f7fe fb72 	bl	800154c <HAL_GetTick>
 8002e68:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e6a:	e009      	b.n	8002e80 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e6c:	f7fe fb6e 	bl	800154c <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e7a:	d901      	bls.n	8002e80 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e007      	b.n	8002e90 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e80:	4b06      	ldr	r3, [pc, #24]	@ (8002e9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e8c:	d1ee      	bne.n	8002e6c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	40007000 	.word	0x40007000

08002ea0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e29b      	b.n	80033ee <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 8087 	beq.w	8002fd2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ec4:	4b96      	ldr	r3, [pc, #600]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 030c 	and.w	r3, r3, #12
 8002ecc:	2b04      	cmp	r3, #4
 8002ece:	d00c      	beq.n	8002eea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ed0:	4b93      	ldr	r3, [pc, #588]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 030c 	and.w	r3, r3, #12
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d112      	bne.n	8002f02 <HAL_RCC_OscConfig+0x62>
 8002edc:	4b90      	ldr	r3, [pc, #576]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ee4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ee8:	d10b      	bne.n	8002f02 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eea:	4b8d      	ldr	r3, [pc, #564]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d06c      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x130>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d168      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e275      	b.n	80033ee <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f0a:	d106      	bne.n	8002f1a <HAL_RCC_OscConfig+0x7a>
 8002f0c:	4b84      	ldr	r3, [pc, #528]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a83      	ldr	r2, [pc, #524]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 8002f12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	e02e      	b.n	8002f78 <HAL_RCC_OscConfig+0xd8>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10c      	bne.n	8002f3c <HAL_RCC_OscConfig+0x9c>
 8002f22:	4b7f      	ldr	r3, [pc, #508]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a7e      	ldr	r2, [pc, #504]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 8002f28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	4b7c      	ldr	r3, [pc, #496]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a7b      	ldr	r2, [pc, #492]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 8002f34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	e01d      	b.n	8002f78 <HAL_RCC_OscConfig+0xd8>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f44:	d10c      	bne.n	8002f60 <HAL_RCC_OscConfig+0xc0>
 8002f46:	4b76      	ldr	r3, [pc, #472]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a75      	ldr	r2, [pc, #468]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 8002f4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	4b73      	ldr	r3, [pc, #460]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a72      	ldr	r2, [pc, #456]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 8002f58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	e00b      	b.n	8002f78 <HAL_RCC_OscConfig+0xd8>
 8002f60:	4b6f      	ldr	r3, [pc, #444]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a6e      	ldr	r2, [pc, #440]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 8002f66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f6a:	6013      	str	r3, [r2, #0]
 8002f6c:	4b6c      	ldr	r3, [pc, #432]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a6b      	ldr	r2, [pc, #428]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 8002f72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d013      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f80:	f7fe fae4 	bl	800154c <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f88:	f7fe fae0 	bl	800154c <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b64      	cmp	r3, #100	@ 0x64
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e229      	b.n	80033ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9a:	4b61      	ldr	r3, [pc, #388]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0xe8>
 8002fa6:	e014      	b.n	8002fd2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa8:	f7fe fad0 	bl	800154c <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb0:	f7fe facc 	bl	800154c <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b64      	cmp	r3, #100	@ 0x64
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e215      	b.n	80033ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc2:	4b57      	ldr	r3, [pc, #348]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f0      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x110>
 8002fce:	e000      	b.n	8002fd2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d069      	beq.n	80030b2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fde:	4b50      	ldr	r3, [pc, #320]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00b      	beq.n	8003002 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fea:	4b4d      	ldr	r3, [pc, #308]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 030c 	and.w	r3, r3, #12
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d11c      	bne.n	8003030 <HAL_RCC_OscConfig+0x190>
 8002ff6:	4b4a      	ldr	r3, [pc, #296]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d116      	bne.n	8003030 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003002:	4b47      	ldr	r3, [pc, #284]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d005      	beq.n	800301a <HAL_RCC_OscConfig+0x17a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d001      	beq.n	800301a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e1e9      	b.n	80033ee <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301a:	4b41      	ldr	r3, [pc, #260]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	493d      	ldr	r1, [pc, #244]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 800302a:	4313      	orrs	r3, r2
 800302c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800302e:	e040      	b.n	80030b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d023      	beq.n	8003080 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003038:	4b39      	ldr	r3, [pc, #228]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a38      	ldr	r2, [pc, #224]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 800303e:	f043 0301 	orr.w	r3, r3, #1
 8003042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003044:	f7fe fa82 	bl	800154c <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800304c:	f7fe fa7e 	bl	800154c <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e1c7      	b.n	80033ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305e:	4b30      	ldr	r3, [pc, #192]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800306a:	4b2d      	ldr	r3, [pc, #180]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4929      	ldr	r1, [pc, #164]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 800307a:	4313      	orrs	r3, r2
 800307c:	600b      	str	r3, [r1, #0]
 800307e:	e018      	b.n	80030b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003080:	4b27      	ldr	r3, [pc, #156]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a26      	ldr	r2, [pc, #152]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 8003086:	f023 0301 	bic.w	r3, r3, #1
 800308a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308c:	f7fe fa5e 	bl	800154c <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003094:	f7fe fa5a 	bl	800154c <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e1a3      	b.n	80033ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f0      	bne.n	8003094 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d038      	beq.n	8003130 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d019      	beq.n	80030fa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030c6:	4b16      	ldr	r3, [pc, #88]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 80030c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030ca:	4a15      	ldr	r2, [pc, #84]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d2:	f7fe fa3b 	bl	800154c <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030da:	f7fe fa37 	bl	800154c <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e180      	b.n	80033ee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 80030ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0f0      	beq.n	80030da <HAL_RCC_OscConfig+0x23a>
 80030f8:	e01a      	b.n	8003130 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030fa:	4b09      	ldr	r3, [pc, #36]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 80030fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030fe:	4a08      	ldr	r2, [pc, #32]	@ (8003120 <HAL_RCC_OscConfig+0x280>)
 8003100:	f023 0301 	bic.w	r3, r3, #1
 8003104:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003106:	f7fe fa21 	bl	800154c <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800310c:	e00a      	b.n	8003124 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800310e:	f7fe fa1d 	bl	800154c <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d903      	bls.n	8003124 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e166      	b.n	80033ee <HAL_RCC_OscConfig+0x54e>
 8003120:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003124:	4b92      	ldr	r3, [pc, #584]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 8003126:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1ee      	bne.n	800310e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 80a4 	beq.w	8003286 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800313e:	4b8c      	ldr	r3, [pc, #560]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10d      	bne.n	8003166 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800314a:	4b89      	ldr	r3, [pc, #548]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314e:	4a88      	ldr	r2, [pc, #544]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 8003150:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003154:	6413      	str	r3, [r2, #64]	@ 0x40
 8003156:	4b86      	ldr	r3, [pc, #536]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 8003158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800315e:	60bb      	str	r3, [r7, #8]
 8003160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003162:	2301      	movs	r3, #1
 8003164:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003166:	4b83      	ldr	r3, [pc, #524]	@ (8003374 <HAL_RCC_OscConfig+0x4d4>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800316e:	2b00      	cmp	r3, #0
 8003170:	d118      	bne.n	80031a4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003172:	4b80      	ldr	r3, [pc, #512]	@ (8003374 <HAL_RCC_OscConfig+0x4d4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a7f      	ldr	r2, [pc, #508]	@ (8003374 <HAL_RCC_OscConfig+0x4d4>)
 8003178:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800317c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800317e:	f7fe f9e5 	bl	800154c <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003186:	f7fe f9e1 	bl	800154c <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b64      	cmp	r3, #100	@ 0x64
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e12a      	b.n	80033ee <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003198:	4b76      	ldr	r3, [pc, #472]	@ (8003374 <HAL_RCC_OscConfig+0x4d4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d106      	bne.n	80031ba <HAL_RCC_OscConfig+0x31a>
 80031ac:	4b70      	ldr	r3, [pc, #448]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 80031ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b0:	4a6f      	ldr	r2, [pc, #444]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80031b8:	e02d      	b.n	8003216 <HAL_RCC_OscConfig+0x376>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10c      	bne.n	80031dc <HAL_RCC_OscConfig+0x33c>
 80031c2:	4b6b      	ldr	r3, [pc, #428]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 80031c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c6:	4a6a      	ldr	r2, [pc, #424]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 80031c8:	f023 0301 	bic.w	r3, r3, #1
 80031cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80031ce:	4b68      	ldr	r3, [pc, #416]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d2:	4a67      	ldr	r2, [pc, #412]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 80031d4:	f023 0304 	bic.w	r3, r3, #4
 80031d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80031da:	e01c      	b.n	8003216 <HAL_RCC_OscConfig+0x376>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	2b05      	cmp	r3, #5
 80031e2:	d10c      	bne.n	80031fe <HAL_RCC_OscConfig+0x35e>
 80031e4:	4b62      	ldr	r3, [pc, #392]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 80031e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e8:	4a61      	ldr	r2, [pc, #388]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 80031ea:	f043 0304 	orr.w	r3, r3, #4
 80031ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80031f0:	4b5f      	ldr	r3, [pc, #380]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 80031f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f4:	4a5e      	ldr	r2, [pc, #376]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80031fc:	e00b      	b.n	8003216 <HAL_RCC_OscConfig+0x376>
 80031fe:	4b5c      	ldr	r3, [pc, #368]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 8003200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003202:	4a5b      	ldr	r2, [pc, #364]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 8003204:	f023 0301 	bic.w	r3, r3, #1
 8003208:	6713      	str	r3, [r2, #112]	@ 0x70
 800320a:	4b59      	ldr	r3, [pc, #356]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 800320c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800320e:	4a58      	ldr	r2, [pc, #352]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 8003210:	f023 0304 	bic.w	r3, r3, #4
 8003214:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d015      	beq.n	800324a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321e:	f7fe f995 	bl	800154c <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003224:	e00a      	b.n	800323c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003226:	f7fe f991 	bl	800154c <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003234:	4293      	cmp	r3, r2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e0d8      	b.n	80033ee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323c:	4b4c      	ldr	r3, [pc, #304]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 800323e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0ee      	beq.n	8003226 <HAL_RCC_OscConfig+0x386>
 8003248:	e014      	b.n	8003274 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324a:	f7fe f97f 	bl	800154c <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003250:	e00a      	b.n	8003268 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003252:	f7fe f97b 	bl	800154c <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003260:	4293      	cmp	r3, r2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e0c2      	b.n	80033ee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003268:	4b41      	ldr	r3, [pc, #260]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 800326a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1ee      	bne.n	8003252 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003274:	7dfb      	ldrb	r3, [r7, #23]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d105      	bne.n	8003286 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800327a:	4b3d      	ldr	r3, [pc, #244]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327e:	4a3c      	ldr	r2, [pc, #240]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 8003280:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003284:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 80ae 	beq.w	80033ec <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003290:	4b37      	ldr	r3, [pc, #220]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 030c 	and.w	r3, r3, #12
 8003298:	2b08      	cmp	r3, #8
 800329a:	d06d      	beq.n	8003378 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d14b      	bne.n	800333c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a4:	4b32      	ldr	r3, [pc, #200]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a31      	ldr	r2, [pc, #196]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 80032aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b0:	f7fe f94c 	bl	800154c <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b8:	f7fe f948 	bl	800154c <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e091      	b.n	80033ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ca:	4b29      	ldr	r3, [pc, #164]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f0      	bne.n	80032b8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69da      	ldr	r2, [r3, #28]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e4:	019b      	lsls	r3, r3, #6
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ec:	085b      	lsrs	r3, r3, #1
 80032ee:	3b01      	subs	r3, #1
 80032f0:	041b      	lsls	r3, r3, #16
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f8:	061b      	lsls	r3, r3, #24
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003300:	071b      	lsls	r3, r3, #28
 8003302:	491b      	ldr	r1, [pc, #108]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 8003304:	4313      	orrs	r3, r2
 8003306:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003308:	4b19      	ldr	r3, [pc, #100]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a18      	ldr	r2, [pc, #96]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 800330e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003314:	f7fe f91a 	bl	800154c <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800331c:	f7fe f916 	bl	800154c <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e05f      	b.n	80033ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800332e:	4b10      	ldr	r3, [pc, #64]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0f0      	beq.n	800331c <HAL_RCC_OscConfig+0x47c>
 800333a:	e057      	b.n	80033ec <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333c:	4b0c      	ldr	r3, [pc, #48]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a0b      	ldr	r2, [pc, #44]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 8003342:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003348:	f7fe f900 	bl	800154c <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003350:	f7fe f8fc 	bl	800154c <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e045      	b.n	80033ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003362:	4b03      	ldr	r3, [pc, #12]	@ (8003370 <HAL_RCC_OscConfig+0x4d0>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f0      	bne.n	8003350 <HAL_RCC_OscConfig+0x4b0>
 800336e:	e03d      	b.n	80033ec <HAL_RCC_OscConfig+0x54c>
 8003370:	40023800 	.word	0x40023800
 8003374:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003378:	4b1f      	ldr	r3, [pc, #124]	@ (80033f8 <HAL_RCC_OscConfig+0x558>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d030      	beq.n	80033e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003390:	429a      	cmp	r2, r3
 8003392:	d129      	bne.n	80033e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800339e:	429a      	cmp	r2, r3
 80033a0:	d122      	bne.n	80033e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80033a8:	4013      	ands	r3, r2
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033ae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d119      	bne.n	80033e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033be:	085b      	lsrs	r3, r3, #1
 80033c0:	3b01      	subs	r3, #1
 80033c2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d10f      	bne.n	80033e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d107      	bne.n	80033e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d001      	beq.n	80033ec <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e000      	b.n	80033ee <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40023800 	.word	0x40023800

080033fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e0d0      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003414:	4b6a      	ldr	r3, [pc, #424]	@ (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 030f 	and.w	r3, r3, #15
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d910      	bls.n	8003444 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003422:	4b67      	ldr	r3, [pc, #412]	@ (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f023 020f 	bic.w	r2, r3, #15
 800342a:	4965      	ldr	r1, [pc, #404]	@ (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	4313      	orrs	r3, r2
 8003430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003432:	4b63      	ldr	r3, [pc, #396]	@ (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d001      	beq.n	8003444 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0b8      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d020      	beq.n	8003492 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800345c:	4b59      	ldr	r3, [pc, #356]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	4a58      	ldr	r2, [pc, #352]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 8003462:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003466:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0308 	and.w	r3, r3, #8
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003474:	4b53      	ldr	r3, [pc, #332]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	4a52      	ldr	r2, [pc, #328]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 800347a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800347e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003480:	4b50      	ldr	r3, [pc, #320]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	494d      	ldr	r1, [pc, #308]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 800348e:	4313      	orrs	r3, r2
 8003490:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d040      	beq.n	8003520 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d107      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a6:	4b47      	ldr	r3, [pc, #284]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d115      	bne.n	80034de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e07f      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d107      	bne.n	80034ce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034be:	4b41      	ldr	r3, [pc, #260]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d109      	bne.n	80034de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e073      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ce:	4b3d      	ldr	r3, [pc, #244]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e06b      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034de:	4b39      	ldr	r3, [pc, #228]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f023 0203 	bic.w	r2, r3, #3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	4936      	ldr	r1, [pc, #216]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034f0:	f7fe f82c 	bl	800154c <HAL_GetTick>
 80034f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f6:	e00a      	b.n	800350e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f8:	f7fe f828 	bl	800154c <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003506:	4293      	cmp	r3, r2
 8003508:	d901      	bls.n	800350e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e053      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350e:	4b2d      	ldr	r3, [pc, #180]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 020c 	and.w	r2, r3, #12
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	429a      	cmp	r2, r3
 800351e:	d1eb      	bne.n	80034f8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003520:	4b27      	ldr	r3, [pc, #156]	@ (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 030f 	and.w	r3, r3, #15
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	429a      	cmp	r2, r3
 800352c:	d210      	bcs.n	8003550 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352e:	4b24      	ldr	r3, [pc, #144]	@ (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f023 020f 	bic.w	r2, r3, #15
 8003536:	4922      	ldr	r1, [pc, #136]	@ (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	4313      	orrs	r3, r2
 800353c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800353e:	4b20      	ldr	r3, [pc, #128]	@ (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	429a      	cmp	r2, r3
 800354a:	d001      	beq.n	8003550 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e032      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800355c:	4b19      	ldr	r3, [pc, #100]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	4916      	ldr	r1, [pc, #88]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 800356a:	4313      	orrs	r3, r2
 800356c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d009      	beq.n	800358e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800357a:	4b12      	ldr	r3, [pc, #72]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	490e      	ldr	r1, [pc, #56]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 800358a:	4313      	orrs	r3, r2
 800358c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800358e:	f000 f821 	bl	80035d4 <HAL_RCC_GetSysClockFreq>
 8003592:	4602      	mov	r2, r0
 8003594:	4b0b      	ldr	r3, [pc, #44]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	091b      	lsrs	r3, r3, #4
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	490a      	ldr	r1, [pc, #40]	@ (80035c8 <HAL_RCC_ClockConfig+0x1cc>)
 80035a0:	5ccb      	ldrb	r3, [r1, r3]
 80035a2:	fa22 f303 	lsr.w	r3, r2, r3
 80035a6:	4a09      	ldr	r2, [pc, #36]	@ (80035cc <HAL_RCC_ClockConfig+0x1d0>)
 80035a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035aa:	4b09      	ldr	r3, [pc, #36]	@ (80035d0 <HAL_RCC_ClockConfig+0x1d4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fd ff88 	bl	80014c4 <HAL_InitTick>

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40023c00 	.word	0x40023c00
 80035c4:	40023800 	.word	0x40023800
 80035c8:	08005d48 	.word	0x08005d48
 80035cc:	20000000 	.word	0x20000000
 80035d0:	20000004 	.word	0x20000004

080035d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035d8:	b094      	sub	sp, #80	@ 0x50
 80035da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80035dc:	2300      	movs	r3, #0
 80035de:	647b      	str	r3, [r7, #68]	@ 0x44
 80035e0:	2300      	movs	r3, #0
 80035e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035e4:	2300      	movs	r3, #0
 80035e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80035e8:	2300      	movs	r3, #0
 80035ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035ec:	4b79      	ldr	r3, [pc, #484]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 030c 	and.w	r3, r3, #12
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d00d      	beq.n	8003614 <HAL_RCC_GetSysClockFreq+0x40>
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	f200 80e1 	bhi.w	80037c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <HAL_RCC_GetSysClockFreq+0x34>
 8003602:	2b04      	cmp	r3, #4
 8003604:	d003      	beq.n	800360e <HAL_RCC_GetSysClockFreq+0x3a>
 8003606:	e0db      	b.n	80037c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003608:	4b73      	ldr	r3, [pc, #460]	@ (80037d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800360a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800360c:	e0db      	b.n	80037c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800360e:	4b73      	ldr	r3, [pc, #460]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x208>)
 8003610:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003612:	e0d8      	b.n	80037c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003614:	4b6f      	ldr	r3, [pc, #444]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800361c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800361e:	4b6d      	ldr	r3, [pc, #436]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d063      	beq.n	80036f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800362a:	4b6a      	ldr	r3, [pc, #424]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	099b      	lsrs	r3, r3, #6
 8003630:	2200      	movs	r2, #0
 8003632:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003634:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800363c:	633b      	str	r3, [r7, #48]	@ 0x30
 800363e:	2300      	movs	r3, #0
 8003640:	637b      	str	r3, [r7, #52]	@ 0x34
 8003642:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003646:	4622      	mov	r2, r4
 8003648:	462b      	mov	r3, r5
 800364a:	f04f 0000 	mov.w	r0, #0
 800364e:	f04f 0100 	mov.w	r1, #0
 8003652:	0159      	lsls	r1, r3, #5
 8003654:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003658:	0150      	lsls	r0, r2, #5
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	4621      	mov	r1, r4
 8003660:	1a51      	subs	r1, r2, r1
 8003662:	6139      	str	r1, [r7, #16]
 8003664:	4629      	mov	r1, r5
 8003666:	eb63 0301 	sbc.w	r3, r3, r1
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003678:	4659      	mov	r1, fp
 800367a:	018b      	lsls	r3, r1, #6
 800367c:	4651      	mov	r1, sl
 800367e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003682:	4651      	mov	r1, sl
 8003684:	018a      	lsls	r2, r1, #6
 8003686:	4651      	mov	r1, sl
 8003688:	ebb2 0801 	subs.w	r8, r2, r1
 800368c:	4659      	mov	r1, fp
 800368e:	eb63 0901 	sbc.w	r9, r3, r1
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800369e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036a6:	4690      	mov	r8, r2
 80036a8:	4699      	mov	r9, r3
 80036aa:	4623      	mov	r3, r4
 80036ac:	eb18 0303 	adds.w	r3, r8, r3
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	462b      	mov	r3, r5
 80036b4:	eb49 0303 	adc.w	r3, r9, r3
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	f04f 0200 	mov.w	r2, #0
 80036be:	f04f 0300 	mov.w	r3, #0
 80036c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036c6:	4629      	mov	r1, r5
 80036c8:	024b      	lsls	r3, r1, #9
 80036ca:	4621      	mov	r1, r4
 80036cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036d0:	4621      	mov	r1, r4
 80036d2:	024a      	lsls	r2, r1, #9
 80036d4:	4610      	mov	r0, r2
 80036d6:	4619      	mov	r1, r3
 80036d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036da:	2200      	movs	r2, #0
 80036dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80036e4:	f7fc fda8 	bl	8000238 <__aeabi_uldivmod>
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	4613      	mov	r3, r2
 80036ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036f0:	e058      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036f2:	4b38      	ldr	r3, [pc, #224]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	099b      	lsrs	r3, r3, #6
 80036f8:	2200      	movs	r2, #0
 80036fa:	4618      	mov	r0, r3
 80036fc:	4611      	mov	r1, r2
 80036fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003702:	623b      	str	r3, [r7, #32]
 8003704:	2300      	movs	r3, #0
 8003706:	627b      	str	r3, [r7, #36]	@ 0x24
 8003708:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800370c:	4642      	mov	r2, r8
 800370e:	464b      	mov	r3, r9
 8003710:	f04f 0000 	mov.w	r0, #0
 8003714:	f04f 0100 	mov.w	r1, #0
 8003718:	0159      	lsls	r1, r3, #5
 800371a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800371e:	0150      	lsls	r0, r2, #5
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	4641      	mov	r1, r8
 8003726:	ebb2 0a01 	subs.w	sl, r2, r1
 800372a:	4649      	mov	r1, r9
 800372c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	f04f 0300 	mov.w	r3, #0
 8003738:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800373c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003740:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003744:	ebb2 040a 	subs.w	r4, r2, sl
 8003748:	eb63 050b 	sbc.w	r5, r3, fp
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	f04f 0300 	mov.w	r3, #0
 8003754:	00eb      	lsls	r3, r5, #3
 8003756:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800375a:	00e2      	lsls	r2, r4, #3
 800375c:	4614      	mov	r4, r2
 800375e:	461d      	mov	r5, r3
 8003760:	4643      	mov	r3, r8
 8003762:	18e3      	adds	r3, r4, r3
 8003764:	603b      	str	r3, [r7, #0]
 8003766:	464b      	mov	r3, r9
 8003768:	eb45 0303 	adc.w	r3, r5, r3
 800376c:	607b      	str	r3, [r7, #4]
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	e9d7 4500 	ldrd	r4, r5, [r7]
 800377a:	4629      	mov	r1, r5
 800377c:	028b      	lsls	r3, r1, #10
 800377e:	4621      	mov	r1, r4
 8003780:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003784:	4621      	mov	r1, r4
 8003786:	028a      	lsls	r2, r1, #10
 8003788:	4610      	mov	r0, r2
 800378a:	4619      	mov	r1, r3
 800378c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800378e:	2200      	movs	r2, #0
 8003790:	61bb      	str	r3, [r7, #24]
 8003792:	61fa      	str	r2, [r7, #28]
 8003794:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003798:	f7fc fd4e 	bl	8000238 <__aeabi_uldivmod>
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	4613      	mov	r3, r2
 80037a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80037a4:	4b0b      	ldr	r3, [pc, #44]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	0c1b      	lsrs	r3, r3, #16
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	3301      	adds	r3, #1
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80037b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037be:	e002      	b.n	80037c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037c0:	4b05      	ldr	r3, [pc, #20]	@ (80037d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80037c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3750      	adds	r7, #80	@ 0x50
 80037cc:	46bd      	mov	sp, r7
 80037ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037d2:	bf00      	nop
 80037d4:	40023800 	.word	0x40023800
 80037d8:	00f42400 	.word	0x00f42400
 80037dc:	007a1200 	.word	0x007a1200

080037e0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037e4:	4b03      	ldr	r3, [pc, #12]	@ (80037f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80037e6:	681b      	ldr	r3, [r3, #0]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	20000000 	.word	0x20000000

080037f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037fc:	f7ff fff0 	bl	80037e0 <HAL_RCC_GetHCLKFreq>
 8003800:	4602      	mov	r2, r0
 8003802:	4b05      	ldr	r3, [pc, #20]	@ (8003818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	0a9b      	lsrs	r3, r3, #10
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	4903      	ldr	r1, [pc, #12]	@ (800381c <HAL_RCC_GetPCLK1Freq+0x24>)
 800380e:	5ccb      	ldrb	r3, [r1, r3]
 8003810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003814:	4618      	mov	r0, r3
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40023800 	.word	0x40023800
 800381c:	08005d58 	.word	0x08005d58

08003820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003824:	f7ff ffdc 	bl	80037e0 <HAL_RCC_GetHCLKFreq>
 8003828:	4602      	mov	r2, r0
 800382a:	4b05      	ldr	r3, [pc, #20]	@ (8003840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	0b5b      	lsrs	r3, r3, #13
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	4903      	ldr	r1, [pc, #12]	@ (8003844 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003836:	5ccb      	ldrb	r3, [r1, r3]
 8003838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800383c:	4618      	mov	r0, r3
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40023800 	.word	0x40023800
 8003844:	08005d58 	.word	0x08005d58

08003848 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003850:	2300      	movs	r3, #0
 8003852:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003854:	2300      	movs	r3, #0
 8003856:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003858:	2300      	movs	r3, #0
 800385a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800385c:	2300      	movs	r3, #0
 800385e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003860:	2300      	movs	r3, #0
 8003862:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d012      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003870:	4b69      	ldr	r3, [pc, #420]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	4a68      	ldr	r2, [pc, #416]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003876:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800387a:	6093      	str	r3, [r2, #8]
 800387c:	4b66      	ldr	r3, [pc, #408]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003884:	4964      	ldr	r1, [pc, #400]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003886:	4313      	orrs	r3, r2
 8003888:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003892:	2301      	movs	r3, #1
 8003894:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d017      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038a2:	4b5d      	ldr	r3, [pc, #372]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038a8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b0:	4959      	ldr	r1, [pc, #356]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038c0:	d101      	bne.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80038c2:	2301      	movs	r3, #1
 80038c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80038ce:	2301      	movs	r3, #1
 80038d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d017      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038de:	4b4e      	ldr	r3, [pc, #312]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038e4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ec:	494a      	ldr	r1, [pc, #296]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038fc:	d101      	bne.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80038fe:	2301      	movs	r3, #1
 8003900:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800390a:	2301      	movs	r3, #1
 800390c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800391a:	2301      	movs	r3, #1
 800391c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0320 	and.w	r3, r3, #32
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 808b 	beq.w	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800392c:	4b3a      	ldr	r3, [pc, #232]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800392e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003930:	4a39      	ldr	r2, [pc, #228]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003932:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003936:	6413      	str	r3, [r2, #64]	@ 0x40
 8003938:	4b37      	ldr	r3, [pc, #220]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800393a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003940:	60bb      	str	r3, [r7, #8]
 8003942:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003944:	4b35      	ldr	r3, [pc, #212]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a34      	ldr	r2, [pc, #208]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800394a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800394e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003950:	f7fd fdfc 	bl	800154c <HAL_GetTick>
 8003954:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003956:	e008      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003958:	f7fd fdf8 	bl	800154c <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b64      	cmp	r3, #100	@ 0x64
 8003964:	d901      	bls.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e38f      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800396a:	4b2c      	ldr	r3, [pc, #176]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0f0      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003976:	4b28      	ldr	r3, [pc, #160]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800397a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800397e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d035      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	429a      	cmp	r2, r3
 8003992:	d02e      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003994:	4b20      	ldr	r3, [pc, #128]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003998:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800399c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800399e:	4b1e      	ldr	r3, [pc, #120]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039a8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039b4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80039b6:	4a18      	ldr	r2, [pc, #96]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039bc:	4b16      	ldr	r3, [pc, #88]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d114      	bne.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c8:	f7fd fdc0 	bl	800154c <HAL_GetTick>
 80039cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ce:	e00a      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039d0:	f7fd fdbc 	bl	800154c <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039de:	4293      	cmp	r3, r2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e351      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0ee      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039fe:	d111      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a00:	4b05      	ldr	r3, [pc, #20]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003a0c:	4b04      	ldr	r3, [pc, #16]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a0e:	400b      	ands	r3, r1
 8003a10:	4901      	ldr	r1, [pc, #4]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	608b      	str	r3, [r1, #8]
 8003a16:	e00b      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	40007000 	.word	0x40007000
 8003a20:	0ffffcff 	.word	0x0ffffcff
 8003a24:	4bac      	ldr	r3, [pc, #688]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	4aab      	ldr	r2, [pc, #684]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a2a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003a2e:	6093      	str	r3, [r2, #8]
 8003a30:	4ba9      	ldr	r3, [pc, #676]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a32:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a3c:	49a6      	ldr	r1, [pc, #664]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0310 	and.w	r3, r3, #16
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d010      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a4e:	4ba2      	ldr	r3, [pc, #648]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a54:	4aa0      	ldr	r2, [pc, #640]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a5a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003a5e:	4b9e      	ldr	r3, [pc, #632]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a60:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a68:	499b      	ldr	r1, [pc, #620]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00a      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a7c:	4b96      	ldr	r3, [pc, #600]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a82:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a8a:	4993      	ldr	r1, [pc, #588]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a9e:	4b8e      	ldr	r3, [pc, #568]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aa4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003aac:	498a      	ldr	r1, [pc, #552]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00a      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ac0:	4b85      	ldr	r3, [pc, #532]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ac6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ace:	4982      	ldr	r1, [pc, #520]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ae2:	4b7d      	ldr	r3, [pc, #500]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af0:	4979      	ldr	r1, [pc, #484]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00a      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b04:	4b74      	ldr	r3, [pc, #464]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b0a:	f023 0203 	bic.w	r2, r3, #3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b12:	4971      	ldr	r1, [pc, #452]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b26:	4b6c      	ldr	r3, [pc, #432]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b2c:	f023 020c 	bic.w	r2, r3, #12
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b34:	4968      	ldr	r1, [pc, #416]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00a      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b48:	4b63      	ldr	r3, [pc, #396]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b4e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b56:	4960      	ldr	r1, [pc, #384]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00a      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b6a:	4b5b      	ldr	r3, [pc, #364]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b70:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b78:	4957      	ldr	r1, [pc, #348]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00a      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b8c:	4b52      	ldr	r3, [pc, #328]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b92:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b9a:	494f      	ldr	r1, [pc, #316]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003bae:	4b4a      	ldr	r3, [pc, #296]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bb4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bbc:	4946      	ldr	r1, [pc, #280]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00a      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003bd0:	4b41      	ldr	r3, [pc, #260]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bd6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bde:	493e      	ldr	r1, [pc, #248]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003bf2:	4b39      	ldr	r3, [pc, #228]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bf8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c00:	4935      	ldr	r1, [pc, #212]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00a      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c14:	4b30      	ldr	r3, [pc, #192]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c1a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c22:	492d      	ldr	r1, [pc, #180]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d011      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c36:	4b28      	ldr	r3, [pc, #160]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c3c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c44:	4924      	ldr	r1, [pc, #144]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c54:	d101      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c56:	2301      	movs	r3, #1
 8003c58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c66:	2301      	movs	r3, #1
 8003c68:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c76:	4b18      	ldr	r3, [pc, #96]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c7c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c84:	4914      	ldr	r1, [pc, #80]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00b      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c98:	4b0f      	ldr	r3, [pc, #60]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c9e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ca8:	490b      	ldr	r1, [pc, #44]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00f      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003cbc:	4b06      	ldr	r3, [pc, #24]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cc2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ccc:	4902      	ldr	r1, [pc, #8]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003cd4:	e002      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003cd6:	bf00      	nop
 8003cd8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00b      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ce8:	4b8a      	ldr	r3, [pc, #552]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cf8:	4986      	ldr	r1, [pc, #536]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00b      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003d0c:	4b81      	ldr	r3, [pc, #516]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d12:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d1c:	497d      	ldr	r1, [pc, #500]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d006      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 80d6 	beq.w	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d38:	4b76      	ldr	r3, [pc, #472]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a75      	ldr	r2, [pc, #468]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d3e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d44:	f7fd fc02 	bl	800154c <HAL_GetTick>
 8003d48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d4c:	f7fd fbfe 	bl	800154c <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b64      	cmp	r3, #100	@ 0x64
 8003d58:	d901      	bls.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e195      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d5e:	4b6d      	ldr	r3, [pc, #436]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1f0      	bne.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d021      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d11d      	bne.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d7e:	4b65      	ldr	r3, [pc, #404]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d84:	0c1b      	lsrs	r3, r3, #16
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d8c:	4b61      	ldr	r3, [pc, #388]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d92:	0e1b      	lsrs	r3, r3, #24
 8003d94:	f003 030f 	and.w	r3, r3, #15
 8003d98:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	019a      	lsls	r2, r3, #6
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	041b      	lsls	r3, r3, #16
 8003da4:	431a      	orrs	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	061b      	lsls	r3, r3, #24
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	071b      	lsls	r3, r3, #28
 8003db2:	4958      	ldr	r1, [pc, #352]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d004      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dce:	d00a      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d02e      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003de4:	d129      	bne.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003de6:	4b4b      	ldr	r3, [pc, #300]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dec:	0c1b      	lsrs	r3, r3, #16
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003df4:	4b47      	ldr	r3, [pc, #284]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dfa:	0f1b      	lsrs	r3, r3, #28
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	019a      	lsls	r2, r3, #6
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	041b      	lsls	r3, r3, #16
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	061b      	lsls	r3, r3, #24
 8003e14:	431a      	orrs	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	071b      	lsls	r3, r3, #28
 8003e1a:	493e      	ldr	r1, [pc, #248]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e22:	4b3c      	ldr	r3, [pc, #240]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e28:	f023 021f 	bic.w	r2, r3, #31
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e30:	3b01      	subs	r3, #1
 8003e32:	4938      	ldr	r1, [pc, #224]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d01d      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e46:	4b33      	ldr	r3, [pc, #204]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e4c:	0e1b      	lsrs	r3, r3, #24
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e54:	4b2f      	ldr	r3, [pc, #188]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e5a:	0f1b      	lsrs	r3, r3, #28
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	019a      	lsls	r2, r3, #6
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	041b      	lsls	r3, r3, #16
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	061b      	lsls	r3, r3, #24
 8003e74:	431a      	orrs	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	071b      	lsls	r3, r3, #28
 8003e7a:	4926      	ldr	r1, [pc, #152]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d011      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	019a      	lsls	r2, r3, #6
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	041b      	lsls	r3, r3, #16
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	061b      	lsls	r3, r3, #24
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	071b      	lsls	r3, r3, #28
 8003eaa:	491a      	ldr	r1, [pc, #104]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003eb2:	4b18      	ldr	r3, [pc, #96]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a17      	ldr	r2, [pc, #92]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eb8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ebc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ebe:	f7fd fb45 	bl	800154c <HAL_GetTick>
 8003ec2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ec4:	e008      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ec6:	f7fd fb41 	bl	800154c <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b64      	cmp	r3, #100	@ 0x64
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e0d8      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0f0      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	f040 80ce 	bne.w	8004088 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003eec:	4b09      	ldr	r3, [pc, #36]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a08      	ldr	r2, [pc, #32]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ef2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ef6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ef8:	f7fd fb28 	bl	800154c <HAL_GetTick>
 8003efc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003efe:	e00b      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f00:	f7fd fb24 	bl	800154c <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b64      	cmp	r3, #100	@ 0x64
 8003f0c:	d904      	bls.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e0bb      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003f12:	bf00      	nop
 8003f14:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f18:	4b5e      	ldr	r3, [pc, #376]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f24:	d0ec      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d009      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d02e      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d12a      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f4e:	4b51      	ldr	r3, [pc, #324]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f54:	0c1b      	lsrs	r3, r3, #16
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f5c:	4b4d      	ldr	r3, [pc, #308]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f62:	0f1b      	lsrs	r3, r3, #28
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	019a      	lsls	r2, r3, #6
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	041b      	lsls	r3, r3, #16
 8003f74:	431a      	orrs	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	061b      	lsls	r3, r3, #24
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	071b      	lsls	r3, r3, #28
 8003f82:	4944      	ldr	r1, [pc, #272]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f8a:	4b42      	ldr	r3, [pc, #264]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f90:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	021b      	lsls	r3, r3, #8
 8003f9c:	493d      	ldr	r1, [pc, #244]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d022      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fb8:	d11d      	bne.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fba:	4b36      	ldr	r3, [pc, #216]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc0:	0e1b      	lsrs	r3, r3, #24
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fc8:	4b32      	ldr	r3, [pc, #200]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fce:	0f1b      	lsrs	r3, r3, #28
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	019a      	lsls	r2, r3, #6
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	041b      	lsls	r3, r3, #16
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	061b      	lsls	r3, r3, #24
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	071b      	lsls	r3, r3, #28
 8003fee:	4929      	ldr	r1, [pc, #164]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d028      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004002:	4b24      	ldr	r3, [pc, #144]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004008:	0e1b      	lsrs	r3, r3, #24
 800400a:	f003 030f 	and.w	r3, r3, #15
 800400e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004010:	4b20      	ldr	r3, [pc, #128]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004016:	0c1b      	lsrs	r3, r3, #16
 8004018:	f003 0303 	and.w	r3, r3, #3
 800401c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	019a      	lsls	r2, r3, #6
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	041b      	lsls	r3, r3, #16
 8004028:	431a      	orrs	r2, r3
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	061b      	lsls	r3, r3, #24
 800402e:	431a      	orrs	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	69db      	ldr	r3, [r3, #28]
 8004034:	071b      	lsls	r3, r3, #28
 8004036:	4917      	ldr	r1, [pc, #92]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800403e:	4b15      	ldr	r3, [pc, #84]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004040:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004044:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404c:	4911      	ldr	r1, [pc, #68]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004054:	4b0f      	ldr	r3, [pc, #60]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a0e      	ldr	r2, [pc, #56]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800405a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800405e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004060:	f7fd fa74 	bl	800154c <HAL_GetTick>
 8004064:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004066:	e008      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004068:	f7fd fa70 	bl	800154c <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b64      	cmp	r3, #100	@ 0x64
 8004074:	d901      	bls.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e007      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800407a:	4b06      	ldr	r3, [pc, #24]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004082:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004086:	d1ef      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3720      	adds	r7, #32
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	40023800 	.word	0x40023800

08004098 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e049      	b.n	800413e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d106      	bne.n	80040c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7fd f80a 	bl	80010d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3304      	adds	r3, #4
 80040d4:	4619      	mov	r1, r3
 80040d6:	4610      	mov	r0, r2
 80040d8:	f000 fa74 	bl	80045c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b082      	sub	sp, #8
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e049      	b.n	80041ec <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	d106      	bne.n	8004172 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 f841 	bl	80041f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2202      	movs	r2, #2
 8004176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3304      	adds	r3, #4
 8004182:	4619      	mov	r1, r3
 8004184:	4610      	mov	r0, r2
 8004186:	f000 fa1d 	bl	80045c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004214:	2300      	movs	r3, #0
 8004216:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800421e:	2b01      	cmp	r3, #1
 8004220:	d101      	bne.n	8004226 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004222:	2302      	movs	r3, #2
 8004224:	e0ff      	b.n	8004426 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b14      	cmp	r3, #20
 8004232:	f200 80f0 	bhi.w	8004416 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004236:	a201      	add	r2, pc, #4	@ (adr r2, 800423c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423c:	08004291 	.word	0x08004291
 8004240:	08004417 	.word	0x08004417
 8004244:	08004417 	.word	0x08004417
 8004248:	08004417 	.word	0x08004417
 800424c:	080042d1 	.word	0x080042d1
 8004250:	08004417 	.word	0x08004417
 8004254:	08004417 	.word	0x08004417
 8004258:	08004417 	.word	0x08004417
 800425c:	08004313 	.word	0x08004313
 8004260:	08004417 	.word	0x08004417
 8004264:	08004417 	.word	0x08004417
 8004268:	08004417 	.word	0x08004417
 800426c:	08004353 	.word	0x08004353
 8004270:	08004417 	.word	0x08004417
 8004274:	08004417 	.word	0x08004417
 8004278:	08004417 	.word	0x08004417
 800427c:	08004395 	.word	0x08004395
 8004280:	08004417 	.word	0x08004417
 8004284:	08004417 	.word	0x08004417
 8004288:	08004417 	.word	0x08004417
 800428c:	080043d5 	.word	0x080043d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68b9      	ldr	r1, [r7, #8]
 8004296:	4618      	mov	r0, r3
 8004298:	f000 fa34 	bl	8004704 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699a      	ldr	r2, [r3, #24]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0208 	orr.w	r2, r2, #8
 80042aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	699a      	ldr	r2, [r3, #24]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0204 	bic.w	r2, r2, #4
 80042ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6999      	ldr	r1, [r3, #24]
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	691a      	ldr	r2, [r3, #16]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	619a      	str	r2, [r3, #24]
      break;
 80042ce:	e0a5      	b.n	800441c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68b9      	ldr	r1, [r7, #8]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 fa86 	bl	80047e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	699a      	ldr	r2, [r3, #24]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699a      	ldr	r2, [r3, #24]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6999      	ldr	r1, [r3, #24]
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	021a      	lsls	r2, r3, #8
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	430a      	orrs	r2, r1
 800430e:	619a      	str	r2, [r3, #24]
      break;
 8004310:	e084      	b.n	800441c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68b9      	ldr	r1, [r7, #8]
 8004318:	4618      	mov	r0, r3
 800431a:	f000 fadd 	bl	80048d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	69da      	ldr	r2, [r3, #28]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f042 0208 	orr.w	r2, r2, #8
 800432c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	69da      	ldr	r2, [r3, #28]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0204 	bic.w	r2, r2, #4
 800433c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	69d9      	ldr	r1, [r3, #28]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	691a      	ldr	r2, [r3, #16]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	61da      	str	r2, [r3, #28]
      break;
 8004350:	e064      	b.n	800441c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68b9      	ldr	r1, [r7, #8]
 8004358:	4618      	mov	r0, r3
 800435a:	f000 fb33 	bl	80049c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	69da      	ldr	r2, [r3, #28]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800436c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	69da      	ldr	r2, [r3, #28]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800437c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	69d9      	ldr	r1, [r3, #28]
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	021a      	lsls	r2, r3, #8
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	61da      	str	r2, [r3, #28]
      break;
 8004392:	e043      	b.n	800441c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68b9      	ldr	r1, [r7, #8]
 800439a:	4618      	mov	r0, r3
 800439c:	f000 fb6a 	bl	8004a74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0208 	orr.w	r2, r2, #8
 80043ae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 0204 	bic.w	r2, r2, #4
 80043be:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	691a      	ldr	r2, [r3, #16]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80043d2:	e023      	b.n	800441c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68b9      	ldr	r1, [r7, #8]
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 fb9c 	bl	8004b18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043ee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043fe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	021a      	lsls	r2, r3, #8
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004414:	e002      	b.n	800441c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	75fb      	strb	r3, [r7, #23]
      break;
 800441a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004424:	7dfb      	ldrb	r3, [r7, #23]
}
 8004426:	4618      	mov	r0, r3
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop

08004430 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004444:	2b01      	cmp	r3, #1
 8004446:	d101      	bne.n	800444c <HAL_TIM_ConfigClockSource+0x1c>
 8004448:	2302      	movs	r3, #2
 800444a:	e0b4      	b.n	80045b6 <HAL_TIM_ConfigClockSource+0x186>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	4b56      	ldr	r3, [pc, #344]	@ (80045c0 <HAL_TIM_ConfigClockSource+0x190>)
 8004468:	4013      	ands	r3, r2
 800446a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004472:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004484:	d03e      	beq.n	8004504 <HAL_TIM_ConfigClockSource+0xd4>
 8004486:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800448a:	f200 8087 	bhi.w	800459c <HAL_TIM_ConfigClockSource+0x16c>
 800448e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004492:	f000 8086 	beq.w	80045a2 <HAL_TIM_ConfigClockSource+0x172>
 8004496:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800449a:	d87f      	bhi.n	800459c <HAL_TIM_ConfigClockSource+0x16c>
 800449c:	2b70      	cmp	r3, #112	@ 0x70
 800449e:	d01a      	beq.n	80044d6 <HAL_TIM_ConfigClockSource+0xa6>
 80044a0:	2b70      	cmp	r3, #112	@ 0x70
 80044a2:	d87b      	bhi.n	800459c <HAL_TIM_ConfigClockSource+0x16c>
 80044a4:	2b60      	cmp	r3, #96	@ 0x60
 80044a6:	d050      	beq.n	800454a <HAL_TIM_ConfigClockSource+0x11a>
 80044a8:	2b60      	cmp	r3, #96	@ 0x60
 80044aa:	d877      	bhi.n	800459c <HAL_TIM_ConfigClockSource+0x16c>
 80044ac:	2b50      	cmp	r3, #80	@ 0x50
 80044ae:	d03c      	beq.n	800452a <HAL_TIM_ConfigClockSource+0xfa>
 80044b0:	2b50      	cmp	r3, #80	@ 0x50
 80044b2:	d873      	bhi.n	800459c <HAL_TIM_ConfigClockSource+0x16c>
 80044b4:	2b40      	cmp	r3, #64	@ 0x40
 80044b6:	d058      	beq.n	800456a <HAL_TIM_ConfigClockSource+0x13a>
 80044b8:	2b40      	cmp	r3, #64	@ 0x40
 80044ba:	d86f      	bhi.n	800459c <HAL_TIM_ConfigClockSource+0x16c>
 80044bc:	2b30      	cmp	r3, #48	@ 0x30
 80044be:	d064      	beq.n	800458a <HAL_TIM_ConfigClockSource+0x15a>
 80044c0:	2b30      	cmp	r3, #48	@ 0x30
 80044c2:	d86b      	bhi.n	800459c <HAL_TIM_ConfigClockSource+0x16c>
 80044c4:	2b20      	cmp	r3, #32
 80044c6:	d060      	beq.n	800458a <HAL_TIM_ConfigClockSource+0x15a>
 80044c8:	2b20      	cmp	r3, #32
 80044ca:	d867      	bhi.n	800459c <HAL_TIM_ConfigClockSource+0x16c>
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d05c      	beq.n	800458a <HAL_TIM_ConfigClockSource+0x15a>
 80044d0:	2b10      	cmp	r3, #16
 80044d2:	d05a      	beq.n	800458a <HAL_TIM_ConfigClockSource+0x15a>
 80044d4:	e062      	b.n	800459c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044e6:	f000 fbe5 	bl	8004cb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80044f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	609a      	str	r2, [r3, #8]
      break;
 8004502:	e04f      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004514:	f000 fbce 	bl	8004cb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004526:	609a      	str	r2, [r3, #8]
      break;
 8004528:	e03c      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004536:	461a      	mov	r2, r3
 8004538:	f000 fb42 	bl	8004bc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2150      	movs	r1, #80	@ 0x50
 8004542:	4618      	mov	r0, r3
 8004544:	f000 fb9b 	bl	8004c7e <TIM_ITRx_SetConfig>
      break;
 8004548:	e02c      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004556:	461a      	mov	r2, r3
 8004558:	f000 fb61 	bl	8004c1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2160      	movs	r1, #96	@ 0x60
 8004562:	4618      	mov	r0, r3
 8004564:	f000 fb8b 	bl	8004c7e <TIM_ITRx_SetConfig>
      break;
 8004568:	e01c      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004576:	461a      	mov	r2, r3
 8004578:	f000 fb22 	bl	8004bc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2140      	movs	r1, #64	@ 0x40
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fb7b 	bl	8004c7e <TIM_ITRx_SetConfig>
      break;
 8004588:	e00c      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4619      	mov	r1, r3
 8004594:	4610      	mov	r0, r2
 8004596:	f000 fb72 	bl	8004c7e <TIM_ITRx_SetConfig>
      break;
 800459a:	e003      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	73fb      	strb	r3, [r7, #15]
      break;
 80045a0:	e000      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80045a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	fffeff88 	.word	0xfffeff88

080045c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a40      	ldr	r2, [pc, #256]	@ (80046d8 <TIM_Base_SetConfig+0x114>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d013      	beq.n	8004604 <TIM_Base_SetConfig+0x40>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045e2:	d00f      	beq.n	8004604 <TIM_Base_SetConfig+0x40>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a3d      	ldr	r2, [pc, #244]	@ (80046dc <TIM_Base_SetConfig+0x118>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d00b      	beq.n	8004604 <TIM_Base_SetConfig+0x40>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a3c      	ldr	r2, [pc, #240]	@ (80046e0 <TIM_Base_SetConfig+0x11c>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d007      	beq.n	8004604 <TIM_Base_SetConfig+0x40>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a3b      	ldr	r2, [pc, #236]	@ (80046e4 <TIM_Base_SetConfig+0x120>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d003      	beq.n	8004604 <TIM_Base_SetConfig+0x40>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a3a      	ldr	r2, [pc, #232]	@ (80046e8 <TIM_Base_SetConfig+0x124>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d108      	bne.n	8004616 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800460a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a2f      	ldr	r2, [pc, #188]	@ (80046d8 <TIM_Base_SetConfig+0x114>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d02b      	beq.n	8004676 <TIM_Base_SetConfig+0xb2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004624:	d027      	beq.n	8004676 <TIM_Base_SetConfig+0xb2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a2c      	ldr	r2, [pc, #176]	@ (80046dc <TIM_Base_SetConfig+0x118>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d023      	beq.n	8004676 <TIM_Base_SetConfig+0xb2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a2b      	ldr	r2, [pc, #172]	@ (80046e0 <TIM_Base_SetConfig+0x11c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d01f      	beq.n	8004676 <TIM_Base_SetConfig+0xb2>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a2a      	ldr	r2, [pc, #168]	@ (80046e4 <TIM_Base_SetConfig+0x120>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d01b      	beq.n	8004676 <TIM_Base_SetConfig+0xb2>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a29      	ldr	r2, [pc, #164]	@ (80046e8 <TIM_Base_SetConfig+0x124>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d017      	beq.n	8004676 <TIM_Base_SetConfig+0xb2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a28      	ldr	r2, [pc, #160]	@ (80046ec <TIM_Base_SetConfig+0x128>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d013      	beq.n	8004676 <TIM_Base_SetConfig+0xb2>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a27      	ldr	r2, [pc, #156]	@ (80046f0 <TIM_Base_SetConfig+0x12c>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d00f      	beq.n	8004676 <TIM_Base_SetConfig+0xb2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a26      	ldr	r2, [pc, #152]	@ (80046f4 <TIM_Base_SetConfig+0x130>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d00b      	beq.n	8004676 <TIM_Base_SetConfig+0xb2>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a25      	ldr	r2, [pc, #148]	@ (80046f8 <TIM_Base_SetConfig+0x134>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d007      	beq.n	8004676 <TIM_Base_SetConfig+0xb2>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a24      	ldr	r2, [pc, #144]	@ (80046fc <TIM_Base_SetConfig+0x138>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d003      	beq.n	8004676 <TIM_Base_SetConfig+0xb2>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a23      	ldr	r2, [pc, #140]	@ (8004700 <TIM_Base_SetConfig+0x13c>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d108      	bne.n	8004688 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800467c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	4313      	orrs	r3, r2
 8004686:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	4313      	orrs	r3, r2
 8004694:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a0a      	ldr	r2, [pc, #40]	@ (80046d8 <TIM_Base_SetConfig+0x114>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d003      	beq.n	80046bc <TIM_Base_SetConfig+0xf8>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a0c      	ldr	r2, [pc, #48]	@ (80046e8 <TIM_Base_SetConfig+0x124>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d103      	bne.n	80046c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	691a      	ldr	r2, [r3, #16]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	615a      	str	r2, [r3, #20]
}
 80046ca:	bf00      	nop
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	40010000 	.word	0x40010000
 80046dc:	40000400 	.word	0x40000400
 80046e0:	40000800 	.word	0x40000800
 80046e4:	40000c00 	.word	0x40000c00
 80046e8:	40010400 	.word	0x40010400
 80046ec:	40014000 	.word	0x40014000
 80046f0:	40014400 	.word	0x40014400
 80046f4:	40014800 	.word	0x40014800
 80046f8:	40001800 	.word	0x40001800
 80046fc:	40001c00 	.word	0x40001c00
 8004700:	40002000 	.word	0x40002000

08004704 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004704:	b480      	push	{r7}
 8004706:	b087      	sub	sp, #28
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	f023 0201 	bic.w	r2, r3, #1
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	4b2b      	ldr	r3, [pc, #172]	@ (80047dc <TIM_OC1_SetConfig+0xd8>)
 8004730:	4013      	ands	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0303 	bic.w	r3, r3, #3
 800473a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f023 0302 	bic.w	r3, r3, #2
 800474c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	4313      	orrs	r3, r2
 8004756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a21      	ldr	r2, [pc, #132]	@ (80047e0 <TIM_OC1_SetConfig+0xdc>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d003      	beq.n	8004768 <TIM_OC1_SetConfig+0x64>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a20      	ldr	r2, [pc, #128]	@ (80047e4 <TIM_OC1_SetConfig+0xe0>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d10c      	bne.n	8004782 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f023 0308 	bic.w	r3, r3, #8
 800476e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	4313      	orrs	r3, r2
 8004778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f023 0304 	bic.w	r3, r3, #4
 8004780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a16      	ldr	r2, [pc, #88]	@ (80047e0 <TIM_OC1_SetConfig+0xdc>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d003      	beq.n	8004792 <TIM_OC1_SetConfig+0x8e>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a15      	ldr	r2, [pc, #84]	@ (80047e4 <TIM_OC1_SetConfig+0xe0>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d111      	bne.n	80047b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80047a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	621a      	str	r2, [r3, #32]
}
 80047d0:	bf00      	nop
 80047d2:	371c      	adds	r7, #28
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	fffeff8f 	.word	0xfffeff8f
 80047e0:	40010000 	.word	0x40010000
 80047e4:	40010400 	.word	0x40010400

080047e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	f023 0210 	bic.w	r2, r3, #16
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	4b2e      	ldr	r3, [pc, #184]	@ (80048cc <TIM_OC2_SetConfig+0xe4>)
 8004814:	4013      	ands	r3, r2
 8004816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800481e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	021b      	lsls	r3, r3, #8
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	4313      	orrs	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f023 0320 	bic.w	r3, r3, #32
 8004832:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	011b      	lsls	r3, r3, #4
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	4313      	orrs	r3, r2
 800483e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a23      	ldr	r2, [pc, #140]	@ (80048d0 <TIM_OC2_SetConfig+0xe8>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d003      	beq.n	8004850 <TIM_OC2_SetConfig+0x68>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a22      	ldr	r2, [pc, #136]	@ (80048d4 <TIM_OC2_SetConfig+0xec>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d10d      	bne.n	800486c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004856:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	4313      	orrs	r3, r2
 8004862:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800486a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a18      	ldr	r2, [pc, #96]	@ (80048d0 <TIM_OC2_SetConfig+0xe8>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d003      	beq.n	800487c <TIM_OC2_SetConfig+0x94>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a17      	ldr	r2, [pc, #92]	@ (80048d4 <TIM_OC2_SetConfig+0xec>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d113      	bne.n	80048a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004882:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800488a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	4313      	orrs	r3, r2
 8004896:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	621a      	str	r2, [r3, #32]
}
 80048be:	bf00      	nop
 80048c0:	371c      	adds	r7, #28
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	feff8fff 	.word	0xfeff8fff
 80048d0:	40010000 	.word	0x40010000
 80048d4:	40010400 	.word	0x40010400

080048d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	4b2d      	ldr	r3, [pc, #180]	@ (80049b8 <TIM_OC3_SetConfig+0xe0>)
 8004904:	4013      	ands	r3, r2
 8004906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f023 0303 	bic.w	r3, r3, #3
 800490e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	4313      	orrs	r3, r2
 8004918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	021b      	lsls	r3, r3, #8
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	4313      	orrs	r3, r2
 800492c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a22      	ldr	r2, [pc, #136]	@ (80049bc <TIM_OC3_SetConfig+0xe4>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d003      	beq.n	800493e <TIM_OC3_SetConfig+0x66>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a21      	ldr	r2, [pc, #132]	@ (80049c0 <TIM_OC3_SetConfig+0xe8>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d10d      	bne.n	800495a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004944:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	021b      	lsls	r3, r3, #8
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	4313      	orrs	r3, r2
 8004950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a17      	ldr	r2, [pc, #92]	@ (80049bc <TIM_OC3_SetConfig+0xe4>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d003      	beq.n	800496a <TIM_OC3_SetConfig+0x92>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a16      	ldr	r2, [pc, #88]	@ (80049c0 <TIM_OC3_SetConfig+0xe8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d113      	bne.n	8004992 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	011b      	lsls	r3, r3, #4
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	621a      	str	r2, [r3, #32]
}
 80049ac:	bf00      	nop
 80049ae:	371c      	adds	r7, #28
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	fffeff8f 	.word	0xfffeff8f
 80049bc:	40010000 	.word	0x40010000
 80049c0:	40010400 	.word	0x40010400

080049c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b087      	sub	sp, #28
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	4b1e      	ldr	r3, [pc, #120]	@ (8004a68 <TIM_OC4_SetConfig+0xa4>)
 80049f0:	4013      	ands	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	021b      	lsls	r3, r3, #8
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	031b      	lsls	r3, r3, #12
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a13      	ldr	r2, [pc, #76]	@ (8004a6c <TIM_OC4_SetConfig+0xa8>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d003      	beq.n	8004a2c <TIM_OC4_SetConfig+0x68>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a12      	ldr	r2, [pc, #72]	@ (8004a70 <TIM_OC4_SetConfig+0xac>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d109      	bne.n	8004a40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	019b      	lsls	r3, r3, #6
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	621a      	str	r2, [r3, #32]
}
 8004a5a:	bf00      	nop
 8004a5c:	371c      	adds	r7, #28
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	feff8fff 	.word	0xfeff8fff
 8004a6c:	40010000 	.word	0x40010000
 8004a70:	40010400 	.word	0x40010400

08004a74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8004b0c <TIM_OC5_SetConfig+0x98>)
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004ab4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	041b      	lsls	r3, r3, #16
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a12      	ldr	r2, [pc, #72]	@ (8004b10 <TIM_OC5_SetConfig+0x9c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d003      	beq.n	8004ad2 <TIM_OC5_SetConfig+0x5e>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a11      	ldr	r2, [pc, #68]	@ (8004b14 <TIM_OC5_SetConfig+0xa0>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d109      	bne.n	8004ae6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	021b      	lsls	r3, r3, #8
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	621a      	str	r2, [r3, #32]
}
 8004b00:	bf00      	nop
 8004b02:	371c      	adds	r7, #28
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	fffeff8f 	.word	0xfffeff8f
 8004b10:	40010000 	.word	0x40010000
 8004b14:	40010400 	.word	0x40010400

08004b18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	4b1c      	ldr	r3, [pc, #112]	@ (8004bb4 <TIM_OC6_SetConfig+0x9c>)
 8004b44:	4013      	ands	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	021b      	lsls	r3, r3, #8
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004b5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	051b      	lsls	r3, r3, #20
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a13      	ldr	r2, [pc, #76]	@ (8004bb8 <TIM_OC6_SetConfig+0xa0>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d003      	beq.n	8004b78 <TIM_OC6_SetConfig+0x60>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a12      	ldr	r2, [pc, #72]	@ (8004bbc <TIM_OC6_SetConfig+0xa4>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d109      	bne.n	8004b8c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	029b      	lsls	r3, r3, #10
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	621a      	str	r2, [r3, #32]
}
 8004ba6:	bf00      	nop
 8004ba8:	371c      	adds	r7, #28
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	feff8fff 	.word	0xfeff8fff
 8004bb8:	40010000 	.word	0x40010000
 8004bbc:	40010400 	.word	0x40010400

08004bc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b087      	sub	sp, #28
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	f023 0201 	bic.w	r2, r3, #1
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	011b      	lsls	r3, r3, #4
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f023 030a 	bic.w	r3, r3, #10
 8004bfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	621a      	str	r2, [r3, #32]
}
 8004c12:	bf00      	nop
 8004c14:	371c      	adds	r7, #28
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b087      	sub	sp, #28
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	60f8      	str	r0, [r7, #12]
 8004c26:	60b9      	str	r1, [r7, #8]
 8004c28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	f023 0210 	bic.w	r2, r3, #16
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	031b      	lsls	r3, r3, #12
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	621a      	str	r2, [r3, #32]
}
 8004c72:	bf00      	nop
 8004c74:	371c      	adds	r7, #28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b085      	sub	sp, #20
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f043 0307 	orr.w	r3, r3, #7
 8004ca0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	609a      	str	r2, [r3, #8]
}
 8004ca8:	bf00      	nop
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
 8004cc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	021a      	lsls	r2, r3, #8
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	609a      	str	r2, [r3, #8]
}
 8004ce8:	bf00      	nop
 8004cea:	371c      	adds	r7, #28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d101      	bne.n	8004d0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d08:	2302      	movs	r3, #2
 8004d0a:	e06d      	b.n	8004de8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a30      	ldr	r2, [pc, #192]	@ (8004df4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d004      	beq.n	8004d40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a2f      	ldr	r2, [pc, #188]	@ (8004df8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d108      	bne.n	8004d52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004d46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a20      	ldr	r2, [pc, #128]	@ (8004df4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d022      	beq.n	8004dbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d7e:	d01d      	beq.n	8004dbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a1d      	ldr	r2, [pc, #116]	@ (8004dfc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d018      	beq.n	8004dbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a1c      	ldr	r2, [pc, #112]	@ (8004e00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d013      	beq.n	8004dbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a1a      	ldr	r2, [pc, #104]	@ (8004e04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d00e      	beq.n	8004dbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a15      	ldr	r2, [pc, #84]	@ (8004df8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d009      	beq.n	8004dbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a16      	ldr	r2, [pc, #88]	@ (8004e08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d004      	beq.n	8004dbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a15      	ldr	r2, [pc, #84]	@ (8004e0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d10c      	bne.n	8004dd6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dc2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3714      	adds	r7, #20
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr
 8004df4:	40010000 	.word	0x40010000
 8004df8:	40010400 	.word	0x40010400
 8004dfc:	40000400 	.word	0x40000400
 8004e00:	40000800 	.word	0x40000800
 8004e04:	40000c00 	.word	0x40000c00
 8004e08:	40014000 	.word	0x40014000
 8004e0c:	40001800 	.word	0x40001800

08004e10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e040      	b.n	8004ea4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d106      	bne.n	8004e38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7fc f9a4 	bl	8001180 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2224      	movs	r2, #36	@ 0x24
 8004e3c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0201 	bic.w	r2, r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f82c 	bl	8004eac <UART_SetConfig>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d101      	bne.n	8004e5e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e022      	b.n	8004ea4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d002      	beq.n	8004e6c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fa84 	bl	8005374 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689a      	ldr	r2, [r3, #8]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0201 	orr.w	r2, r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 fb0b 	bl	80054b8 <UART_CheckIdleState>
 8004ea2:	4603      	mov	r3, r0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b088      	sub	sp, #32
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	431a      	orrs	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	69db      	ldr	r3, [r3, #28]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	4ba6      	ldr	r3, [pc, #664]	@ (8005170 <UART_SetConfig+0x2c4>)
 8004ed8:	4013      	ands	r3, r2
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	6812      	ldr	r2, [r2, #0]
 8004ede:	6979      	ldr	r1, [r7, #20]
 8004ee0:	430b      	orrs	r3, r1
 8004ee2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68da      	ldr	r2, [r3, #12]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a94      	ldr	r2, [pc, #592]	@ (8005174 <UART_SetConfig+0x2c8>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d120      	bne.n	8004f6a <UART_SetConfig+0xbe>
 8004f28:	4b93      	ldr	r3, [pc, #588]	@ (8005178 <UART_SetConfig+0x2cc>)
 8004f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	2b03      	cmp	r3, #3
 8004f34:	d816      	bhi.n	8004f64 <UART_SetConfig+0xb8>
 8004f36:	a201      	add	r2, pc, #4	@ (adr r2, 8004f3c <UART_SetConfig+0x90>)
 8004f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3c:	08004f4d 	.word	0x08004f4d
 8004f40:	08004f59 	.word	0x08004f59
 8004f44:	08004f53 	.word	0x08004f53
 8004f48:	08004f5f 	.word	0x08004f5f
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	77fb      	strb	r3, [r7, #31]
 8004f50:	e150      	b.n	80051f4 <UART_SetConfig+0x348>
 8004f52:	2302      	movs	r3, #2
 8004f54:	77fb      	strb	r3, [r7, #31]
 8004f56:	e14d      	b.n	80051f4 <UART_SetConfig+0x348>
 8004f58:	2304      	movs	r3, #4
 8004f5a:	77fb      	strb	r3, [r7, #31]
 8004f5c:	e14a      	b.n	80051f4 <UART_SetConfig+0x348>
 8004f5e:	2308      	movs	r3, #8
 8004f60:	77fb      	strb	r3, [r7, #31]
 8004f62:	e147      	b.n	80051f4 <UART_SetConfig+0x348>
 8004f64:	2310      	movs	r3, #16
 8004f66:	77fb      	strb	r3, [r7, #31]
 8004f68:	e144      	b.n	80051f4 <UART_SetConfig+0x348>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a83      	ldr	r2, [pc, #524]	@ (800517c <UART_SetConfig+0x2d0>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d132      	bne.n	8004fda <UART_SetConfig+0x12e>
 8004f74:	4b80      	ldr	r3, [pc, #512]	@ (8005178 <UART_SetConfig+0x2cc>)
 8004f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f7a:	f003 030c 	and.w	r3, r3, #12
 8004f7e:	2b0c      	cmp	r3, #12
 8004f80:	d828      	bhi.n	8004fd4 <UART_SetConfig+0x128>
 8004f82:	a201      	add	r2, pc, #4	@ (adr r2, 8004f88 <UART_SetConfig+0xdc>)
 8004f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f88:	08004fbd 	.word	0x08004fbd
 8004f8c:	08004fd5 	.word	0x08004fd5
 8004f90:	08004fd5 	.word	0x08004fd5
 8004f94:	08004fd5 	.word	0x08004fd5
 8004f98:	08004fc9 	.word	0x08004fc9
 8004f9c:	08004fd5 	.word	0x08004fd5
 8004fa0:	08004fd5 	.word	0x08004fd5
 8004fa4:	08004fd5 	.word	0x08004fd5
 8004fa8:	08004fc3 	.word	0x08004fc3
 8004fac:	08004fd5 	.word	0x08004fd5
 8004fb0:	08004fd5 	.word	0x08004fd5
 8004fb4:	08004fd5 	.word	0x08004fd5
 8004fb8:	08004fcf 	.word	0x08004fcf
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	77fb      	strb	r3, [r7, #31]
 8004fc0:	e118      	b.n	80051f4 <UART_SetConfig+0x348>
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	77fb      	strb	r3, [r7, #31]
 8004fc6:	e115      	b.n	80051f4 <UART_SetConfig+0x348>
 8004fc8:	2304      	movs	r3, #4
 8004fca:	77fb      	strb	r3, [r7, #31]
 8004fcc:	e112      	b.n	80051f4 <UART_SetConfig+0x348>
 8004fce:	2308      	movs	r3, #8
 8004fd0:	77fb      	strb	r3, [r7, #31]
 8004fd2:	e10f      	b.n	80051f4 <UART_SetConfig+0x348>
 8004fd4:	2310      	movs	r3, #16
 8004fd6:	77fb      	strb	r3, [r7, #31]
 8004fd8:	e10c      	b.n	80051f4 <UART_SetConfig+0x348>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a68      	ldr	r2, [pc, #416]	@ (8005180 <UART_SetConfig+0x2d4>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d120      	bne.n	8005026 <UART_SetConfig+0x17a>
 8004fe4:	4b64      	ldr	r3, [pc, #400]	@ (8005178 <UART_SetConfig+0x2cc>)
 8004fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fea:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004fee:	2b30      	cmp	r3, #48	@ 0x30
 8004ff0:	d013      	beq.n	800501a <UART_SetConfig+0x16e>
 8004ff2:	2b30      	cmp	r3, #48	@ 0x30
 8004ff4:	d814      	bhi.n	8005020 <UART_SetConfig+0x174>
 8004ff6:	2b20      	cmp	r3, #32
 8004ff8:	d009      	beq.n	800500e <UART_SetConfig+0x162>
 8004ffa:	2b20      	cmp	r3, #32
 8004ffc:	d810      	bhi.n	8005020 <UART_SetConfig+0x174>
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d002      	beq.n	8005008 <UART_SetConfig+0x15c>
 8005002:	2b10      	cmp	r3, #16
 8005004:	d006      	beq.n	8005014 <UART_SetConfig+0x168>
 8005006:	e00b      	b.n	8005020 <UART_SetConfig+0x174>
 8005008:	2300      	movs	r3, #0
 800500a:	77fb      	strb	r3, [r7, #31]
 800500c:	e0f2      	b.n	80051f4 <UART_SetConfig+0x348>
 800500e:	2302      	movs	r3, #2
 8005010:	77fb      	strb	r3, [r7, #31]
 8005012:	e0ef      	b.n	80051f4 <UART_SetConfig+0x348>
 8005014:	2304      	movs	r3, #4
 8005016:	77fb      	strb	r3, [r7, #31]
 8005018:	e0ec      	b.n	80051f4 <UART_SetConfig+0x348>
 800501a:	2308      	movs	r3, #8
 800501c:	77fb      	strb	r3, [r7, #31]
 800501e:	e0e9      	b.n	80051f4 <UART_SetConfig+0x348>
 8005020:	2310      	movs	r3, #16
 8005022:	77fb      	strb	r3, [r7, #31]
 8005024:	e0e6      	b.n	80051f4 <UART_SetConfig+0x348>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a56      	ldr	r2, [pc, #344]	@ (8005184 <UART_SetConfig+0x2d8>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d120      	bne.n	8005072 <UART_SetConfig+0x1c6>
 8005030:	4b51      	ldr	r3, [pc, #324]	@ (8005178 <UART_SetConfig+0x2cc>)
 8005032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005036:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800503a:	2bc0      	cmp	r3, #192	@ 0xc0
 800503c:	d013      	beq.n	8005066 <UART_SetConfig+0x1ba>
 800503e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005040:	d814      	bhi.n	800506c <UART_SetConfig+0x1c0>
 8005042:	2b80      	cmp	r3, #128	@ 0x80
 8005044:	d009      	beq.n	800505a <UART_SetConfig+0x1ae>
 8005046:	2b80      	cmp	r3, #128	@ 0x80
 8005048:	d810      	bhi.n	800506c <UART_SetConfig+0x1c0>
 800504a:	2b00      	cmp	r3, #0
 800504c:	d002      	beq.n	8005054 <UART_SetConfig+0x1a8>
 800504e:	2b40      	cmp	r3, #64	@ 0x40
 8005050:	d006      	beq.n	8005060 <UART_SetConfig+0x1b4>
 8005052:	e00b      	b.n	800506c <UART_SetConfig+0x1c0>
 8005054:	2300      	movs	r3, #0
 8005056:	77fb      	strb	r3, [r7, #31]
 8005058:	e0cc      	b.n	80051f4 <UART_SetConfig+0x348>
 800505a:	2302      	movs	r3, #2
 800505c:	77fb      	strb	r3, [r7, #31]
 800505e:	e0c9      	b.n	80051f4 <UART_SetConfig+0x348>
 8005060:	2304      	movs	r3, #4
 8005062:	77fb      	strb	r3, [r7, #31]
 8005064:	e0c6      	b.n	80051f4 <UART_SetConfig+0x348>
 8005066:	2308      	movs	r3, #8
 8005068:	77fb      	strb	r3, [r7, #31]
 800506a:	e0c3      	b.n	80051f4 <UART_SetConfig+0x348>
 800506c:	2310      	movs	r3, #16
 800506e:	77fb      	strb	r3, [r7, #31]
 8005070:	e0c0      	b.n	80051f4 <UART_SetConfig+0x348>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a44      	ldr	r2, [pc, #272]	@ (8005188 <UART_SetConfig+0x2dc>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d125      	bne.n	80050c8 <UART_SetConfig+0x21c>
 800507c:	4b3e      	ldr	r3, [pc, #248]	@ (8005178 <UART_SetConfig+0x2cc>)
 800507e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005082:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005086:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800508a:	d017      	beq.n	80050bc <UART_SetConfig+0x210>
 800508c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005090:	d817      	bhi.n	80050c2 <UART_SetConfig+0x216>
 8005092:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005096:	d00b      	beq.n	80050b0 <UART_SetConfig+0x204>
 8005098:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800509c:	d811      	bhi.n	80050c2 <UART_SetConfig+0x216>
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d003      	beq.n	80050aa <UART_SetConfig+0x1fe>
 80050a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050a6:	d006      	beq.n	80050b6 <UART_SetConfig+0x20a>
 80050a8:	e00b      	b.n	80050c2 <UART_SetConfig+0x216>
 80050aa:	2300      	movs	r3, #0
 80050ac:	77fb      	strb	r3, [r7, #31]
 80050ae:	e0a1      	b.n	80051f4 <UART_SetConfig+0x348>
 80050b0:	2302      	movs	r3, #2
 80050b2:	77fb      	strb	r3, [r7, #31]
 80050b4:	e09e      	b.n	80051f4 <UART_SetConfig+0x348>
 80050b6:	2304      	movs	r3, #4
 80050b8:	77fb      	strb	r3, [r7, #31]
 80050ba:	e09b      	b.n	80051f4 <UART_SetConfig+0x348>
 80050bc:	2308      	movs	r3, #8
 80050be:	77fb      	strb	r3, [r7, #31]
 80050c0:	e098      	b.n	80051f4 <UART_SetConfig+0x348>
 80050c2:	2310      	movs	r3, #16
 80050c4:	77fb      	strb	r3, [r7, #31]
 80050c6:	e095      	b.n	80051f4 <UART_SetConfig+0x348>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a2f      	ldr	r2, [pc, #188]	@ (800518c <UART_SetConfig+0x2e0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d125      	bne.n	800511e <UART_SetConfig+0x272>
 80050d2:	4b29      	ldr	r3, [pc, #164]	@ (8005178 <UART_SetConfig+0x2cc>)
 80050d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80050dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050e0:	d017      	beq.n	8005112 <UART_SetConfig+0x266>
 80050e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050e6:	d817      	bhi.n	8005118 <UART_SetConfig+0x26c>
 80050e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050ec:	d00b      	beq.n	8005106 <UART_SetConfig+0x25a>
 80050ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050f2:	d811      	bhi.n	8005118 <UART_SetConfig+0x26c>
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d003      	beq.n	8005100 <UART_SetConfig+0x254>
 80050f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050fc:	d006      	beq.n	800510c <UART_SetConfig+0x260>
 80050fe:	e00b      	b.n	8005118 <UART_SetConfig+0x26c>
 8005100:	2301      	movs	r3, #1
 8005102:	77fb      	strb	r3, [r7, #31]
 8005104:	e076      	b.n	80051f4 <UART_SetConfig+0x348>
 8005106:	2302      	movs	r3, #2
 8005108:	77fb      	strb	r3, [r7, #31]
 800510a:	e073      	b.n	80051f4 <UART_SetConfig+0x348>
 800510c:	2304      	movs	r3, #4
 800510e:	77fb      	strb	r3, [r7, #31]
 8005110:	e070      	b.n	80051f4 <UART_SetConfig+0x348>
 8005112:	2308      	movs	r3, #8
 8005114:	77fb      	strb	r3, [r7, #31]
 8005116:	e06d      	b.n	80051f4 <UART_SetConfig+0x348>
 8005118:	2310      	movs	r3, #16
 800511a:	77fb      	strb	r3, [r7, #31]
 800511c:	e06a      	b.n	80051f4 <UART_SetConfig+0x348>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a1b      	ldr	r2, [pc, #108]	@ (8005190 <UART_SetConfig+0x2e4>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d138      	bne.n	800519a <UART_SetConfig+0x2ee>
 8005128:	4b13      	ldr	r3, [pc, #76]	@ (8005178 <UART_SetConfig+0x2cc>)
 800512a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800512e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005132:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005136:	d017      	beq.n	8005168 <UART_SetConfig+0x2bc>
 8005138:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800513c:	d82a      	bhi.n	8005194 <UART_SetConfig+0x2e8>
 800513e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005142:	d00b      	beq.n	800515c <UART_SetConfig+0x2b0>
 8005144:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005148:	d824      	bhi.n	8005194 <UART_SetConfig+0x2e8>
 800514a:	2b00      	cmp	r3, #0
 800514c:	d003      	beq.n	8005156 <UART_SetConfig+0x2aa>
 800514e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005152:	d006      	beq.n	8005162 <UART_SetConfig+0x2b6>
 8005154:	e01e      	b.n	8005194 <UART_SetConfig+0x2e8>
 8005156:	2300      	movs	r3, #0
 8005158:	77fb      	strb	r3, [r7, #31]
 800515a:	e04b      	b.n	80051f4 <UART_SetConfig+0x348>
 800515c:	2302      	movs	r3, #2
 800515e:	77fb      	strb	r3, [r7, #31]
 8005160:	e048      	b.n	80051f4 <UART_SetConfig+0x348>
 8005162:	2304      	movs	r3, #4
 8005164:	77fb      	strb	r3, [r7, #31]
 8005166:	e045      	b.n	80051f4 <UART_SetConfig+0x348>
 8005168:	2308      	movs	r3, #8
 800516a:	77fb      	strb	r3, [r7, #31]
 800516c:	e042      	b.n	80051f4 <UART_SetConfig+0x348>
 800516e:	bf00      	nop
 8005170:	efff69f3 	.word	0xefff69f3
 8005174:	40011000 	.word	0x40011000
 8005178:	40023800 	.word	0x40023800
 800517c:	40004400 	.word	0x40004400
 8005180:	40004800 	.word	0x40004800
 8005184:	40004c00 	.word	0x40004c00
 8005188:	40005000 	.word	0x40005000
 800518c:	40011400 	.word	0x40011400
 8005190:	40007800 	.word	0x40007800
 8005194:	2310      	movs	r3, #16
 8005196:	77fb      	strb	r3, [r7, #31]
 8005198:	e02c      	b.n	80051f4 <UART_SetConfig+0x348>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a72      	ldr	r2, [pc, #456]	@ (8005368 <UART_SetConfig+0x4bc>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d125      	bne.n	80051f0 <UART_SetConfig+0x344>
 80051a4:	4b71      	ldr	r3, [pc, #452]	@ (800536c <UART_SetConfig+0x4c0>)
 80051a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051aa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80051ae:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80051b2:	d017      	beq.n	80051e4 <UART_SetConfig+0x338>
 80051b4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80051b8:	d817      	bhi.n	80051ea <UART_SetConfig+0x33e>
 80051ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051be:	d00b      	beq.n	80051d8 <UART_SetConfig+0x32c>
 80051c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051c4:	d811      	bhi.n	80051ea <UART_SetConfig+0x33e>
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <UART_SetConfig+0x326>
 80051ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051ce:	d006      	beq.n	80051de <UART_SetConfig+0x332>
 80051d0:	e00b      	b.n	80051ea <UART_SetConfig+0x33e>
 80051d2:	2300      	movs	r3, #0
 80051d4:	77fb      	strb	r3, [r7, #31]
 80051d6:	e00d      	b.n	80051f4 <UART_SetConfig+0x348>
 80051d8:	2302      	movs	r3, #2
 80051da:	77fb      	strb	r3, [r7, #31]
 80051dc:	e00a      	b.n	80051f4 <UART_SetConfig+0x348>
 80051de:	2304      	movs	r3, #4
 80051e0:	77fb      	strb	r3, [r7, #31]
 80051e2:	e007      	b.n	80051f4 <UART_SetConfig+0x348>
 80051e4:	2308      	movs	r3, #8
 80051e6:	77fb      	strb	r3, [r7, #31]
 80051e8:	e004      	b.n	80051f4 <UART_SetConfig+0x348>
 80051ea:	2310      	movs	r3, #16
 80051ec:	77fb      	strb	r3, [r7, #31]
 80051ee:	e001      	b.n	80051f4 <UART_SetConfig+0x348>
 80051f0:	2310      	movs	r3, #16
 80051f2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051fc:	d15b      	bne.n	80052b6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80051fe:	7ffb      	ldrb	r3, [r7, #31]
 8005200:	2b08      	cmp	r3, #8
 8005202:	d828      	bhi.n	8005256 <UART_SetConfig+0x3aa>
 8005204:	a201      	add	r2, pc, #4	@ (adr r2, 800520c <UART_SetConfig+0x360>)
 8005206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520a:	bf00      	nop
 800520c:	08005231 	.word	0x08005231
 8005210:	08005239 	.word	0x08005239
 8005214:	08005241 	.word	0x08005241
 8005218:	08005257 	.word	0x08005257
 800521c:	08005247 	.word	0x08005247
 8005220:	08005257 	.word	0x08005257
 8005224:	08005257 	.word	0x08005257
 8005228:	08005257 	.word	0x08005257
 800522c:	0800524f 	.word	0x0800524f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005230:	f7fe fae2 	bl	80037f8 <HAL_RCC_GetPCLK1Freq>
 8005234:	61b8      	str	r0, [r7, #24]
        break;
 8005236:	e013      	b.n	8005260 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005238:	f7fe faf2 	bl	8003820 <HAL_RCC_GetPCLK2Freq>
 800523c:	61b8      	str	r0, [r7, #24]
        break;
 800523e:	e00f      	b.n	8005260 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005240:	4b4b      	ldr	r3, [pc, #300]	@ (8005370 <UART_SetConfig+0x4c4>)
 8005242:	61bb      	str	r3, [r7, #24]
        break;
 8005244:	e00c      	b.n	8005260 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005246:	f7fe f9c5 	bl	80035d4 <HAL_RCC_GetSysClockFreq>
 800524a:	61b8      	str	r0, [r7, #24]
        break;
 800524c:	e008      	b.n	8005260 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800524e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005252:	61bb      	str	r3, [r7, #24]
        break;
 8005254:	e004      	b.n	8005260 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005256:	2300      	movs	r3, #0
 8005258:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	77bb      	strb	r3, [r7, #30]
        break;
 800525e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d074      	beq.n	8005350 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	005a      	lsls	r2, r3, #1
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	085b      	lsrs	r3, r3, #1
 8005270:	441a      	add	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	fbb2 f3f3 	udiv	r3, r2, r3
 800527a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	2b0f      	cmp	r3, #15
 8005280:	d916      	bls.n	80052b0 <UART_SetConfig+0x404>
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005288:	d212      	bcs.n	80052b0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	b29b      	uxth	r3, r3
 800528e:	f023 030f 	bic.w	r3, r3, #15
 8005292:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	085b      	lsrs	r3, r3, #1
 8005298:	b29b      	uxth	r3, r3
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	b29a      	uxth	r2, r3
 80052a0:	89fb      	ldrh	r3, [r7, #14]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	89fa      	ldrh	r2, [r7, #14]
 80052ac:	60da      	str	r2, [r3, #12]
 80052ae:	e04f      	b.n	8005350 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	77bb      	strb	r3, [r7, #30]
 80052b4:	e04c      	b.n	8005350 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052b6:	7ffb      	ldrb	r3, [r7, #31]
 80052b8:	2b08      	cmp	r3, #8
 80052ba:	d828      	bhi.n	800530e <UART_SetConfig+0x462>
 80052bc:	a201      	add	r2, pc, #4	@ (adr r2, 80052c4 <UART_SetConfig+0x418>)
 80052be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c2:	bf00      	nop
 80052c4:	080052e9 	.word	0x080052e9
 80052c8:	080052f1 	.word	0x080052f1
 80052cc:	080052f9 	.word	0x080052f9
 80052d0:	0800530f 	.word	0x0800530f
 80052d4:	080052ff 	.word	0x080052ff
 80052d8:	0800530f 	.word	0x0800530f
 80052dc:	0800530f 	.word	0x0800530f
 80052e0:	0800530f 	.word	0x0800530f
 80052e4:	08005307 	.word	0x08005307
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052e8:	f7fe fa86 	bl	80037f8 <HAL_RCC_GetPCLK1Freq>
 80052ec:	61b8      	str	r0, [r7, #24]
        break;
 80052ee:	e013      	b.n	8005318 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052f0:	f7fe fa96 	bl	8003820 <HAL_RCC_GetPCLK2Freq>
 80052f4:	61b8      	str	r0, [r7, #24]
        break;
 80052f6:	e00f      	b.n	8005318 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005370 <UART_SetConfig+0x4c4>)
 80052fa:	61bb      	str	r3, [r7, #24]
        break;
 80052fc:	e00c      	b.n	8005318 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052fe:	f7fe f969 	bl	80035d4 <HAL_RCC_GetSysClockFreq>
 8005302:	61b8      	str	r0, [r7, #24]
        break;
 8005304:	e008      	b.n	8005318 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005306:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800530a:	61bb      	str	r3, [r7, #24]
        break;
 800530c:	e004      	b.n	8005318 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	77bb      	strb	r3, [r7, #30]
        break;
 8005316:	bf00      	nop
    }

    if (pclk != 0U)
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d018      	beq.n	8005350 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	085a      	lsrs	r2, r3, #1
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	441a      	add	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005330:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	2b0f      	cmp	r3, #15
 8005336:	d909      	bls.n	800534c <UART_SetConfig+0x4a0>
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800533e:	d205      	bcs.n	800534c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	b29a      	uxth	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	60da      	str	r2, [r3, #12]
 800534a:	e001      	b.n	8005350 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800535c:	7fbb      	ldrb	r3, [r7, #30]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3720      	adds	r7, #32
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	40007c00 	.word	0x40007c00
 800536c:	40023800 	.word	0x40023800
 8005370:	00f42400 	.word	0x00f42400

08005374 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00a      	beq.n	800539e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00a      	beq.n	80053e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e6:	f003 0308 	and.w	r3, r3, #8
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005408:	f003 0310 	and.w	r3, r3, #16
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00a      	beq.n	8005426 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542a:	f003 0320 	and.w	r3, r3, #32
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00a      	beq.n	8005448 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800544c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005450:	2b00      	cmp	r3, #0
 8005452:	d01a      	beq.n	800548a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800546e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005472:	d10a      	bne.n	800548a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800548e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	605a      	str	r2, [r3, #4]
  }
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af02      	add	r7, sp, #8
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054c8:	f7fc f840 	bl	800154c <HAL_GetTick>
 80054cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0308 	and.w	r3, r3, #8
 80054d8:	2b08      	cmp	r3, #8
 80054da:	d10e      	bne.n	80054fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054e0:	9300      	str	r3, [sp, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f831 	bl	8005552 <UART_WaitOnFlagUntilTimeout>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d001      	beq.n	80054fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e027      	b.n	800554a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	2b04      	cmp	r3, #4
 8005506:	d10e      	bne.n	8005526 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005508:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f81b 	bl	8005552 <UART_WaitOnFlagUntilTimeout>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e011      	b.n	800554a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2220      	movs	r2, #32
 800552a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2220      	movs	r2, #32
 8005530:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b09c      	sub	sp, #112	@ 0x70
 8005556:	af00      	add	r7, sp, #0
 8005558:	60f8      	str	r0, [r7, #12]
 800555a:	60b9      	str	r1, [r7, #8]
 800555c:	603b      	str	r3, [r7, #0]
 800555e:	4613      	mov	r3, r2
 8005560:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005562:	e0a7      	b.n	80056b4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005564:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556a:	f000 80a3 	beq.w	80056b4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800556e:	f7fb ffed 	bl	800154c <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800557a:	429a      	cmp	r2, r3
 800557c:	d302      	bcc.n	8005584 <UART_WaitOnFlagUntilTimeout+0x32>
 800557e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005580:	2b00      	cmp	r3, #0
 8005582:	d13f      	bne.n	8005604 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800558c:	e853 3f00 	ldrex	r3, [r3]
 8005590:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005592:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005594:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005598:	667b      	str	r3, [r7, #100]	@ 0x64
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	461a      	mov	r2, r3
 80055a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80055a8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80055aa:	e841 2300 	strex	r3, r2, [r1]
 80055ae:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80055b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1e6      	bne.n	8005584 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	3308      	adds	r3, #8
 80055bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055c0:	e853 3f00 	ldrex	r3, [r3]
 80055c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055c8:	f023 0301 	bic.w	r3, r3, #1
 80055cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	3308      	adds	r3, #8
 80055d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80055d6:	64ba      	str	r2, [r7, #72]	@ 0x48
 80055d8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80055dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055de:	e841 2300 	strex	r3, r2, [r1]
 80055e2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80055e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1e5      	bne.n	80055b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2220      	movs	r2, #32
 80055ee:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2220      	movs	r2, #32
 80055f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e068      	b.n	80056d6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0304 	and.w	r3, r3, #4
 800560e:	2b00      	cmp	r3, #0
 8005610:	d050      	beq.n	80056b4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800561c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005620:	d148      	bne.n	80056b4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800562a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005634:	e853 3f00 	ldrex	r3, [r3]
 8005638:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800563a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005640:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	461a      	mov	r2, r3
 8005648:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800564a:	637b      	str	r3, [r7, #52]	@ 0x34
 800564c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005650:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005652:	e841 2300 	strex	r3, r2, [r1]
 8005656:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1e6      	bne.n	800562c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	3308      	adds	r3, #8
 8005664:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	e853 3f00 	ldrex	r3, [r3]
 800566c:	613b      	str	r3, [r7, #16]
   return(result);
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	f023 0301 	bic.w	r3, r3, #1
 8005674:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3308      	adds	r3, #8
 800567c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800567e:	623a      	str	r2, [r7, #32]
 8005680:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005682:	69f9      	ldr	r1, [r7, #28]
 8005684:	6a3a      	ldr	r2, [r7, #32]
 8005686:	e841 2300 	strex	r3, r2, [r1]
 800568a:	61bb      	str	r3, [r7, #24]
   return(result);
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1e5      	bne.n	800565e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2220      	movs	r2, #32
 8005696:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2220      	movs	r2, #32
 800569c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2220      	movs	r2, #32
 80056a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e010      	b.n	80056d6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	69da      	ldr	r2, [r3, #28]
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	4013      	ands	r3, r2
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	bf0c      	ite	eq
 80056c4:	2301      	moveq	r3, #1
 80056c6:	2300      	movne	r3, #0
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	461a      	mov	r2, r3
 80056cc:	79fb      	ldrb	r3, [r7, #7]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	f43f af48 	beq.w	8005564 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3770      	adds	r7, #112	@ 0x70
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
	...

080056e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056e0:	b084      	sub	sp, #16
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b084      	sub	sp, #16
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	f107 001c 	add.w	r0, r7, #28
 80056ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d120      	bne.n	800573a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68da      	ldr	r2, [r3, #12]
 8005708:	4b20      	ldr	r3, [pc, #128]	@ (800578c <USB_CoreInit+0xac>)
 800570a:	4013      	ands	r3, r2
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800571c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800571e:	2b01      	cmp	r3, #1
 8005720:	d105      	bne.n	800572e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 fa96 	bl	8005c60 <USB_CoreReset>
 8005734:	4603      	mov	r3, r0
 8005736:	73fb      	strb	r3, [r7, #15]
 8005738:	e010      	b.n	800575c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 fa8a 	bl	8005c60 <USB_CoreReset>
 800574c:	4603      	mov	r3, r0
 800574e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005754:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800575c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800575e:	2b01      	cmp	r3, #1
 8005760:	d10b      	bne.n	800577a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f043 0206 	orr.w	r2, r3, #6
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f043 0220 	orr.w	r2, r3, #32
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800577a:	7bfb      	ldrb	r3, [r7, #15]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005786:	b004      	add	sp, #16
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	ffbdffbf 	.word	0xffbdffbf

08005790 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f023 0201 	bic.w	r2, r3, #1
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b084      	sub	sp, #16
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
 80057ba:	460b      	mov	r3, r1
 80057bc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80057ce:	78fb      	ldrb	r3, [r7, #3]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d115      	bne.n	8005800 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057e0:	2001      	movs	r0, #1
 80057e2:	f7fb febf 	bl	8001564 <HAL_Delay>
      ms++;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	3301      	adds	r3, #1
 80057ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 fa29 	bl	8005c44 <USB_GetMode>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d01e      	beq.n	8005836 <USB_SetCurrentMode+0x84>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2b31      	cmp	r3, #49	@ 0x31
 80057fc:	d9f0      	bls.n	80057e0 <USB_SetCurrentMode+0x2e>
 80057fe:	e01a      	b.n	8005836 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005800:	78fb      	ldrb	r3, [r7, #3]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d115      	bne.n	8005832 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005812:	2001      	movs	r0, #1
 8005814:	f7fb fea6 	bl	8001564 <HAL_Delay>
      ms++;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	3301      	adds	r3, #1
 800581c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 fa10 	bl	8005c44 <USB_GetMode>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d005      	beq.n	8005836 <USB_SetCurrentMode+0x84>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2b31      	cmp	r3, #49	@ 0x31
 800582e:	d9f0      	bls.n	8005812 <USB_SetCurrentMode+0x60>
 8005830:	e001      	b.n	8005836 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e005      	b.n	8005842 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2b32      	cmp	r3, #50	@ 0x32
 800583a:	d101      	bne.n	8005840 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e000      	b.n	8005842 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
	...

0800584c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800584c:	b084      	sub	sp, #16
 800584e:	b580      	push	{r7, lr}
 8005850:	b086      	sub	sp, #24
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
 8005856:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800585a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800585e:	2300      	movs	r3, #0
 8005860:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005866:	2300      	movs	r3, #0
 8005868:	613b      	str	r3, [r7, #16]
 800586a:	e009      	b.n	8005880 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	3340      	adds	r3, #64	@ 0x40
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	2200      	movs	r2, #0
 8005878:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	3301      	adds	r3, #1
 800587e:	613b      	str	r3, [r7, #16]
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	2b0e      	cmp	r3, #14
 8005884:	d9f2      	bls.n	800586c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005886:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005888:	2b00      	cmp	r3, #0
 800588a:	d11c      	bne.n	80058c6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800589a:	f043 0302 	orr.w	r3, r3, #2
 800589e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	e005      	b.n	80058d2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80058d8:	461a      	mov	r2, r3
 80058da:	2300      	movs	r3, #0
 80058dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058e4:	4619      	mov	r1, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058ec:	461a      	mov	r2, r3
 80058ee:	680b      	ldr	r3, [r1, #0]
 80058f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d10c      	bne.n	8005912 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80058f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d104      	bne.n	8005908 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80058fe:	2100      	movs	r1, #0
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f965 	bl	8005bd0 <USB_SetDevSpeed>
 8005906:	e008      	b.n	800591a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005908:	2101      	movs	r1, #1
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f960 	bl	8005bd0 <USB_SetDevSpeed>
 8005910:	e003      	b.n	800591a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005912:	2103      	movs	r1, #3
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f95b 	bl	8005bd0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800591a:	2110      	movs	r1, #16
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 f8f3 	bl	8005b08 <USB_FlushTxFifo>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f91f 	bl	8005b70 <USB_FlushRxFifo>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d001      	beq.n	800593c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005942:	461a      	mov	r2, r3
 8005944:	2300      	movs	r3, #0
 8005946:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800594e:	461a      	mov	r2, r3
 8005950:	2300      	movs	r3, #0
 8005952:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800595a:	461a      	mov	r2, r3
 800595c:	2300      	movs	r3, #0
 800595e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005960:	2300      	movs	r3, #0
 8005962:	613b      	str	r3, [r7, #16]
 8005964:	e043      	b.n	80059ee <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	015a      	lsls	r2, r3, #5
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	4413      	add	r3, r2
 800596e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005978:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800597c:	d118      	bne.n	80059b0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10a      	bne.n	800599a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	4413      	add	r3, r2
 800598c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005990:	461a      	mov	r2, r3
 8005992:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005996:	6013      	str	r3, [r2, #0]
 8005998:	e013      	b.n	80059c2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	015a      	lsls	r2, r3, #5
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	4413      	add	r3, r2
 80059a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059a6:	461a      	mov	r2, r3
 80059a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80059ac:	6013      	str	r3, [r2, #0]
 80059ae:	e008      	b.n	80059c2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	015a      	lsls	r2, r3, #5
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059bc:	461a      	mov	r2, r3
 80059be:	2300      	movs	r3, #0
 80059c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059ce:	461a      	mov	r2, r3
 80059d0:	2300      	movs	r3, #0
 80059d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059e0:	461a      	mov	r2, r3
 80059e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80059e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	3301      	adds	r3, #1
 80059ec:	613b      	str	r3, [r7, #16]
 80059ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d3b7      	bcc.n	8005966 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059f6:	2300      	movs	r3, #0
 80059f8:	613b      	str	r3, [r7, #16]
 80059fa:	e043      	b.n	8005a84 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a12:	d118      	bne.n	8005a46 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10a      	bne.n	8005a30 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a26:	461a      	mov	r2, r3
 8005a28:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005a2c:	6013      	str	r3, [r2, #0]
 8005a2e:	e013      	b.n	8005a58 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005a42:	6013      	str	r3, [r2, #0]
 8005a44:	e008      	b.n	8005a58 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	015a      	lsls	r2, r3, #5
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a52:	461a      	mov	r2, r3
 8005a54:	2300      	movs	r3, #0
 8005a56:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a64:	461a      	mov	r2, r3
 8005a66:	2300      	movs	r3, #0
 8005a68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a76:	461a      	mov	r2, r3
 8005a78:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005a7c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	3301      	adds	r3, #1
 8005a82:	613b      	str	r3, [r7, #16]
 8005a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d3b7      	bcc.n	80059fc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a9e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005aac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d105      	bne.n	8005ac0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	f043 0210 	orr.w	r2, r3, #16
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	699a      	ldr	r2, [r3, #24]
 8005ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8005b00 <USB_DevInit+0x2b4>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005acc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d005      	beq.n	8005ade <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	f043 0208 	orr.w	r2, r3, #8
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005ade:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d105      	bne.n	8005af0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	699a      	ldr	r2, [r3, #24]
 8005ae8:	4b06      	ldr	r3, [pc, #24]	@ (8005b04 <USB_DevInit+0x2b8>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3718      	adds	r7, #24
 8005af6:	46bd      	mov	sp, r7
 8005af8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005afc:	b004      	add	sp, #16
 8005afe:	4770      	bx	lr
 8005b00:	803c3800 	.word	0x803c3800
 8005b04:	40000004 	.word	0x40000004

08005b08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b12:	2300      	movs	r3, #0
 8005b14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4a13      	ldr	r2, [pc, #76]	@ (8005b6c <USB_FlushTxFifo+0x64>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d901      	bls.n	8005b28 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e01b      	b.n	8005b60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	daf2      	bge.n	8005b16 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b30:	2300      	movs	r3, #0
 8005b32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	019b      	lsls	r3, r3, #6
 8005b38:	f043 0220 	orr.w	r2, r3, #32
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	3301      	adds	r3, #1
 8005b44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4a08      	ldr	r2, [pc, #32]	@ (8005b6c <USB_FlushTxFifo+0x64>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d901      	bls.n	8005b52 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e006      	b.n	8005b60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	f003 0320 	and.w	r3, r3, #32
 8005b5a:	2b20      	cmp	r3, #32
 8005b5c:	d0f0      	beq.n	8005b40 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr
 8005b6c:	00030d40 	.word	0x00030d40

08005b70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	4a11      	ldr	r2, [pc, #68]	@ (8005bcc <USB_FlushRxFifo+0x5c>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d901      	bls.n	8005b8e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e018      	b.n	8005bc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	daf2      	bge.n	8005b7c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b96:	2300      	movs	r3, #0
 8005b98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2210      	movs	r2, #16
 8005b9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4a08      	ldr	r2, [pc, #32]	@ (8005bcc <USB_FlushRxFifo+0x5c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d901      	bls.n	8005bb2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e006      	b.n	8005bc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	f003 0310 	and.w	r3, r3, #16
 8005bba:	2b10      	cmp	r3, #16
 8005bbc:	d0f0      	beq.n	8005ba0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3714      	adds	r7, #20
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	00030d40 	.word	0x00030d40

08005bd0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	460b      	mov	r3, r1
 8005bda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	78fb      	ldrb	r3, [r7, #3]
 8005bea:	68f9      	ldr	r1, [r7, #12]
 8005bec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b085      	sub	sp, #20
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005c1c:	f023 0303 	bic.w	r3, r3, #3
 8005c20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c30:	f043 0302 	orr.w	r3, r3, #2
 8005c34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	f003 0301 	and.w	r3, r3, #1
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	4a13      	ldr	r2, [pc, #76]	@ (8005cc4 <USB_CoreReset+0x64>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d901      	bls.n	8005c7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e01b      	b.n	8005cb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	daf2      	bge.n	8005c6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c86:	2300      	movs	r3, #0
 8005c88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	f043 0201 	orr.w	r2, r3, #1
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	4a09      	ldr	r2, [pc, #36]	@ (8005cc4 <USB_CoreReset+0x64>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d901      	bls.n	8005ca8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e006      	b.n	8005cb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d0f0      	beq.n	8005c96 <USB_CoreReset+0x36>

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3714      	adds	r7, #20
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	00030d40 	.word	0x00030d40

08005cc8 <memset>:
 8005cc8:	4402      	add	r2, r0
 8005cca:	4603      	mov	r3, r0
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d100      	bne.n	8005cd2 <memset+0xa>
 8005cd0:	4770      	bx	lr
 8005cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8005cd6:	e7f9      	b.n	8005ccc <memset+0x4>

08005cd8 <__libc_init_array>:
 8005cd8:	b570      	push	{r4, r5, r6, lr}
 8005cda:	4d0d      	ldr	r5, [pc, #52]	@ (8005d10 <__libc_init_array+0x38>)
 8005cdc:	4c0d      	ldr	r4, [pc, #52]	@ (8005d14 <__libc_init_array+0x3c>)
 8005cde:	1b64      	subs	r4, r4, r5
 8005ce0:	10a4      	asrs	r4, r4, #2
 8005ce2:	2600      	movs	r6, #0
 8005ce4:	42a6      	cmp	r6, r4
 8005ce6:	d109      	bne.n	8005cfc <__libc_init_array+0x24>
 8005ce8:	4d0b      	ldr	r5, [pc, #44]	@ (8005d18 <__libc_init_array+0x40>)
 8005cea:	4c0c      	ldr	r4, [pc, #48]	@ (8005d1c <__libc_init_array+0x44>)
 8005cec:	f000 f818 	bl	8005d20 <_init>
 8005cf0:	1b64      	subs	r4, r4, r5
 8005cf2:	10a4      	asrs	r4, r4, #2
 8005cf4:	2600      	movs	r6, #0
 8005cf6:	42a6      	cmp	r6, r4
 8005cf8:	d105      	bne.n	8005d06 <__libc_init_array+0x2e>
 8005cfa:	bd70      	pop	{r4, r5, r6, pc}
 8005cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d00:	4798      	blx	r3
 8005d02:	3601      	adds	r6, #1
 8005d04:	e7ee      	b.n	8005ce4 <__libc_init_array+0xc>
 8005d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d0a:	4798      	blx	r3
 8005d0c:	3601      	adds	r6, #1
 8005d0e:	e7f2      	b.n	8005cf6 <__libc_init_array+0x1e>
 8005d10:	08005d70 	.word	0x08005d70
 8005d14:	08005d70 	.word	0x08005d70
 8005d18:	08005d70 	.word	0x08005d70
 8005d1c:	08005d74 	.word	0x08005d74

08005d20 <_init>:
 8005d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d22:	bf00      	nop
 8005d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d26:	bc08      	pop	{r3}
 8005d28:	469e      	mov	lr, r3
 8005d2a:	4770      	bx	lr

08005d2c <_fini>:
 8005d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d2e:	bf00      	nop
 8005d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d32:	bc08      	pop	{r3}
 8005d34:	469e      	mov	lr, r3
 8005d36:	4770      	bx	lr
