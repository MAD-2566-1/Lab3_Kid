
cepptestprogrammer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006884  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08006a84  08006a84  00016a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006af0  08006af0  0002019c  2**0
                  CONTENTS
  4 .ARM          00000008  08006af0  08006af0  00016af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006af8  08006af8  0002019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006af8  08006af8  00016af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006afc  08006afc  00016afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006b00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000005c  08006b5c  0002005c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000fc  08006bfc  000200fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000988  2000019c  08006c9c  0002019c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000b24  08006c9c  00020b24  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201ca  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001b047  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003330  00000000  00000000  0003b254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001720  00000000  00000000  0003e588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001221  00000000  00000000  0003fca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002a5dd  00000000  00000000  00040ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001c658  00000000  00000000  0006b4a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00106ace  00000000  00000000  00087afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000068b8  00000000  00000000  0018e5cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006d  00000000  00000000  00194e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000019c 	.word	0x2000019c
 800021c:	00000000 	.word	0x00000000
 8000220:	08006a6c 	.word	0x08006a6c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a0 	.word	0x200001a0
 800023c:	08006a6c 	.word	0x08006a6c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b095      	sub	sp, #84	; 0x54
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t DAC_OUT[4] = {0, 1241, 2482, 3723};
 80005f2:	4b42      	ldr	r3, [pc, #264]	; (80006fc <main+0x110>)
 80005f4:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80005f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	uint8_t i = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t pwm1;
	float dutyCycle = 0.5;
 8000604:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8000608:	64bb      	str	r3, [r7, #72]	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060a:	f000 ff58 	bl	80014be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060e:	f000 f887 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000612:	f000 fad1 	bl	8000bb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000616:	f000 fab1 	bl	8000b7c <MX_DMA_Init>
  MX_USART3_UART_Init();
 800061a:	f000 fa21 	bl	8000a60 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800061e:	f000 fa7f 	bl	8000b20 <MX_USB_OTG_FS_PCD_Init>
  MX_DAC_Init();
 8000622:	f000 f8ed 	bl	8000800 <MX_DAC_Init>
  MX_I2C1_Init();
 8000626:	f000 f963 	bl	80008f0 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 800062a:	f000 fa49 	bl	8000ac0 <MX_USART6_UART_Init>
  MX_ETH_Init();
 800062e:	f000 f911 	bl	8000854 <MX_ETH_Init>
  MX_TIM2_Init();
 8000632:	f000 f99d 	bl	8000970 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 8000636:	2100      	movs	r1, #0
 8000638:	4831      	ldr	r0, [pc, #196]	; (8000700 <main+0x114>)
 800063a:	f001 f8f4 	bl	8001826 <HAL_DAC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  DAC1->DHR12R1 = DAC_OUT[i++];
 800063e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000642:	1c5a      	adds	r2, r3, #1
 8000644:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
 8000648:	4a2e      	ldr	r2, [pc, #184]	; (8000704 <main+0x118>)
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	3350      	adds	r3, #80	; 0x50
 800064e:	443b      	add	r3, r7
 8000650:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000654:	6093      	str	r3, [r2, #8]
		  if(i == 4) {
 8000656:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800065a:	2b04      	cmp	r3, #4
 800065c:	d102      	bne.n	8000664 <main+0x78>
		     i = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  }

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	2101      	movs	r1, #1
 8000668:	4827      	ldr	r0, [pc, #156]	; (8000708 <main+0x11c>)
 800066a:	f002 f939 	bl	80028e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	2108      	movs	r1, #8
 8000672:	4825      	ldr	r0, [pc, #148]	; (8000708 <main+0x11c>)
 8000674:	f002 f934 	bl	80028e0 <HAL_GPIO_WritePin>
		  HAL_Delay(50);
 8000678:	2032      	movs	r0, #50	; 0x32
 800067a:	f000 ff7d 	bl	8001578 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	2101      	movs	r1, #1
 8000682:	4821      	ldr	r0, [pc, #132]	; (8000708 <main+0x11c>)
 8000684:	f002 f92c 	bl	80028e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	2108      	movs	r1, #8
 800068c:	481e      	ldr	r0, [pc, #120]	; (8000708 <main+0x11c>)
 800068e:	f002 f927 	bl	80028e0 <HAL_GPIO_WritePin>
		  HAL_Delay(50);
 8000692:	2032      	movs	r0, #50	; 0x32
 8000694:	f000 ff70 	bl	8001578 <HAL_Delay>

		  htim2.Instance -> CCR3 = (10000-1) * dutyCycle;
 8000698:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800069c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800070c <main+0x120>
 80006a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006a4:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <main+0x124>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006ac:	ee17 2a90 	vmov	r2, s15
 80006b0:	63da      	str	r2, [r3, #60]	; 0x3c
	      HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80006b2:	2100      	movs	r1, #0
 80006b4:	4816      	ldr	r0, [pc, #88]	; (8000710 <main+0x124>)
 80006b6:	f003 fdb1 	bl	800421c <HAL_TIM_PWM_Start>
	      HAL_Delay(100);
 80006ba:	2064      	movs	r0, #100	; 0x64
 80006bc:	f000 ff5c 	bl	8001578 <HAL_Delay>
	      HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80006c0:	2100      	movs	r1, #0
 80006c2:	4813      	ldr	r0, [pc, #76]	; (8000710 <main+0x124>)
 80006c4:	f003 fea4 	bl	8004410 <HAL_TIM_PWM_Stop>
	      pwm1 = (GPIOA->IDR & GPIO_PIN_0) >> 0;
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <main+0x128>)
 80006ca:	691b      	ldr	r3, [r3, #16]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	      char uart_data[50];
	      sprintf(uart_data, "palm");
 80006d6:	463b      	mov	r3, r7
 80006d8:	490f      	ldr	r1, [pc, #60]	; (8000718 <main+0x12c>)
 80006da:	4618      	mov	r0, r3
 80006dc:	f005 fd22 	bl	8006124 <siprintf>
	      HAL_UART_Transmit(&huart6, (uint8_t*)uart_data, strlen(uart_data), 500);
 80006e0:	463b      	mov	r3, r7
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff fdac 	bl	8000240 <strlen>
 80006e8:	4603      	mov	r3, r0
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	4639      	mov	r1, r7
 80006ee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006f2:	480a      	ldr	r0, [pc, #40]	; (800071c <main+0x130>)
 80006f4:	f004 fd84 	bl	8005200 <HAL_UART_Transmit>
  {
 80006f8:	e7a1      	b.n	800063e <main+0x52>
 80006fa:	bf00      	nop
 80006fc:	08006a8c 	.word	0x08006a8c
 8000700:	200001f0 	.word	0x200001f0
 8000704:	40007400 	.word	0x40007400
 8000708:	40020800 	.word	0x40020800
 800070c:	461c3c00 	.word	0x461c3c00
 8000710:	20000368 	.word	0x20000368
 8000714:	40020000 	.word	0x40020000
 8000718:	08006a84 	.word	0x08006a84
 800071c:	2000043c 	.word	0x2000043c

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b094      	sub	sp, #80	; 0x50
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	2234      	movs	r2, #52	; 0x34
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f005 fd18 	bl	8006164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	f107 0308 	add.w	r3, r7, #8
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000744:	f002 fb56 	bl	8002df4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000748:	4b2b      	ldr	r3, [pc, #172]	; (80007f8 <SystemClock_Config+0xd8>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	4a2a      	ldr	r2, [pc, #168]	; (80007f8 <SystemClock_Config+0xd8>)
 800074e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000752:	6413      	str	r3, [r2, #64]	; 0x40
 8000754:	4b28      	ldr	r3, [pc, #160]	; (80007f8 <SystemClock_Config+0xd8>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000760:	4b26      	ldr	r3, [pc, #152]	; (80007fc <SystemClock_Config+0xdc>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a25      	ldr	r2, [pc, #148]	; (80007fc <SystemClock_Config+0xdc>)
 8000766:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	4b23      	ldr	r3, [pc, #140]	; (80007fc <SystemClock_Config+0xdc>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000778:	2301      	movs	r3, #1
 800077a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800077c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000780:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000782:	2302      	movs	r3, #2
 8000784:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000786:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800078a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800078c:	2304      	movs	r3, #4
 800078e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000790:	23d8      	movs	r3, #216	; 0xd8
 8000792:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000794:	2302      	movs	r3, #2
 8000796:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000798:	2309      	movs	r3, #9
 800079a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800079c:	2302      	movs	r3, #2
 800079e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4618      	mov	r0, r3
 80007a6:	f002 fb85 	bl	8002eb4 <HAL_RCC_OscConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007b0:	f000 fab6 	bl	8000d20 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007b4:	f002 fb2e 	bl	8002e14 <HAL_PWREx_EnableOverDrive>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80007be:	f000 faaf 	bl	8000d20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c2:	230f      	movs	r3, #15
 80007c4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c6:	2302      	movs	r3, #2
 80007c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007da:	f107 0308 	add.w	r3, r7, #8
 80007de:	2107      	movs	r1, #7
 80007e0:	4618      	mov	r0, r3
 80007e2:	f002 fe15 	bl	8003410 <HAL_RCC_ClockConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80007ec:	f000 fa98 	bl	8000d20 <Error_Handler>
  }
}
 80007f0:	bf00      	nop
 80007f2:	3750      	adds	r7, #80	; 0x50
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40007000 	.word	0x40007000

08000800 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000806:	463b      	mov	r3, r7
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_DAC_Init+0x4c>)
 8000810:	4a0f      	ldr	r2, [pc, #60]	; (8000850 <MX_DAC_Init+0x50>)
 8000812:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000814:	480d      	ldr	r0, [pc, #52]	; (800084c <MX_DAC_Init+0x4c>)
 8000816:	f000 ffe4 	bl	80017e2 <HAL_DAC_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000820:	f000 fa7e 	bl	8000d20 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000824:	2300      	movs	r3, #0
 8000826:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000828:	2300      	movs	r3, #0
 800082a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800082c:	463b      	mov	r3, r7
 800082e:	2200      	movs	r2, #0
 8000830:	4619      	mov	r1, r3
 8000832:	4806      	ldr	r0, [pc, #24]	; (800084c <MX_DAC_Init+0x4c>)
 8000834:	f001 f849 	bl	80018ca <HAL_DAC_ConfigChannel>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800083e:	f000 fa6f 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200001f0 	.word	0x200001f0
 8000850:	40007400 	.word	0x40007400

08000854 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000858:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <MX_ETH_Init+0x84>)
 800085a:	4a20      	ldr	r2, [pc, #128]	; (80008dc <MX_ETH_Init+0x88>)
 800085c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800085e:	4b20      	ldr	r3, [pc, #128]	; (80008e0 <MX_ETH_Init+0x8c>)
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000864:	4b1e      	ldr	r3, [pc, #120]	; (80008e0 <MX_ETH_Init+0x8c>)
 8000866:	2280      	movs	r2, #128	; 0x80
 8000868:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800086a:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <MX_ETH_Init+0x8c>)
 800086c:	22e1      	movs	r2, #225	; 0xe1
 800086e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000870:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <MX_ETH_Init+0x8c>)
 8000872:	2200      	movs	r2, #0
 8000874:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000876:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <MX_ETH_Init+0x8c>)
 8000878:	2200      	movs	r2, #0
 800087a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800087c:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <MX_ETH_Init+0x8c>)
 800087e:	2200      	movs	r2, #0
 8000880:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <MX_ETH_Init+0x84>)
 8000884:	4a16      	ldr	r2, [pc, #88]	; (80008e0 <MX_ETH_Init+0x8c>)
 8000886:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000888:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <MX_ETH_Init+0x84>)
 800088a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800088e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_ETH_Init+0x84>)
 8000892:	4a14      	ldr	r2, [pc, #80]	; (80008e4 <MX_ETH_Init+0x90>)
 8000894:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <MX_ETH_Init+0x84>)
 8000898:	4a13      	ldr	r2, [pc, #76]	; (80008e8 <MX_ETH_Init+0x94>)
 800089a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800089c:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_ETH_Init+0x84>)
 800089e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008a2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008a4:	480c      	ldr	r0, [pc, #48]	; (80008d8 <MX_ETH_Init+0x84>)
 80008a6:	f001 fb49 	bl	8001f3c <HAL_ETH_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80008b0:	f000 fa36 	bl	8000d20 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008b4:	2238      	movs	r2, #56	; 0x38
 80008b6:	2100      	movs	r1, #0
 80008b8:	480c      	ldr	r0, [pc, #48]	; (80008ec <MX_ETH_Init+0x98>)
 80008ba:	f005 fc53 	bl	8006164 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <MX_ETH_Init+0x98>)
 80008c0:	2221      	movs	r2, #33	; 0x21
 80008c2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_ETH_Init+0x98>)
 80008c6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80008ca:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008cc:	4b07      	ldr	r3, [pc, #28]	; (80008ec <MX_ETH_Init+0x98>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000264 	.word	0x20000264
 80008dc:	40028000 	.word	0x40028000
 80008e0:	200009cc 	.word	0x200009cc
 80008e4:	200000fc 	.word	0x200000fc
 80008e8:	2000005c 	.word	0x2000005c
 80008ec:	200001b8 	.word	0x200001b8

080008f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008f4:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <MX_I2C1_Init+0x74>)
 80008f6:	4a1c      	ldr	r2, [pc, #112]	; (8000968 <MX_I2C1_Init+0x78>)
 80008f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <MX_I2C1_Init+0x74>)
 80008fc:	4a1b      	ldr	r2, [pc, #108]	; (800096c <MX_I2C1_Init+0x7c>)
 80008fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000900:	4b18      	ldr	r3, [pc, #96]	; (8000964 <MX_I2C1_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000906:	4b17      	ldr	r3, [pc, #92]	; (8000964 <MX_I2C1_Init+0x74>)
 8000908:	2201      	movs	r2, #1
 800090a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800090c:	4b15      	ldr	r3, [pc, #84]	; (8000964 <MX_I2C1_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_I2C1_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_I2C1_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_I2C1_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_I2C1_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800092a:	480e      	ldr	r0, [pc, #56]	; (8000964 <MX_I2C1_Init+0x74>)
 800092c:	f001 fff2 	bl	8002914 <HAL_I2C_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000936:	f000 f9f3 	bl	8000d20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800093a:	2100      	movs	r1, #0
 800093c:	4809      	ldr	r0, [pc, #36]	; (8000964 <MX_I2C1_Init+0x74>)
 800093e:	f002 f879 	bl	8002a34 <HAL_I2CEx_ConfigAnalogFilter>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000948:	f000 f9ea 	bl	8000d20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800094c:	2100      	movs	r1, #0
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_I2C1_Init+0x74>)
 8000950:	f002 f8bb 	bl	8002aca <HAL_I2CEx_ConfigDigitalFilter>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800095a:	f000 f9e1 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000314 	.word	0x20000314
 8000968:	40005400 	.word	0x40005400
 800096c:	20404768 	.word	0x20404768

08000970 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08e      	sub	sp, #56	; 0x38
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000976:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000990:	463b      	mov	r3, r7
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]
 800099e:	615a      	str	r2, [r3, #20]
 80009a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009a2:	4b2e      	ldr	r3, [pc, #184]	; (8000a5c <MX_TIM2_Init+0xec>)
 80009a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1080-1;
 80009aa:	4b2c      	ldr	r3, [pc, #176]	; (8000a5c <MX_TIM2_Init+0xec>)
 80009ac:	f240 4237 	movw	r2, #1079	; 0x437
 80009b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b2:	4b2a      	ldr	r3, [pc, #168]	; (8000a5c <MX_TIM2_Init+0xec>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80009b8:	4b28      	ldr	r3, [pc, #160]	; (8000a5c <MX_TIM2_Init+0xec>)
 80009ba:	f242 720f 	movw	r2, #9999	; 0x270f
 80009be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c0:	4b26      	ldr	r3, [pc, #152]	; (8000a5c <MX_TIM2_Init+0xec>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c6:	4b25      	ldr	r3, [pc, #148]	; (8000a5c <MX_TIM2_Init+0xec>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009cc:	4823      	ldr	r0, [pc, #140]	; (8000a5c <MX_TIM2_Init+0xec>)
 80009ce:	f003 fb6d 	bl	80040ac <HAL_TIM_Base_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80009d8:	f000 f9a2 	bl	8000d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009e6:	4619      	mov	r1, r3
 80009e8:	481c      	ldr	r0, [pc, #112]	; (8000a5c <MX_TIM2_Init+0xec>)
 80009ea:	f003 fea5 	bl	8004738 <HAL_TIM_ConfigClockSource>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80009f4:	f000 f994 	bl	8000d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009f8:	4818      	ldr	r0, [pc, #96]	; (8000a5c <MX_TIM2_Init+0xec>)
 80009fa:	f003 fbae 	bl	800415a <HAL_TIM_PWM_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000a04:	f000 f98c 	bl	8000d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	4811      	ldr	r0, [pc, #68]	; (8000a5c <MX_TIM2_Init+0xec>)
 8000a18:	f004 fb16 	bl	8005048 <HAL_TIMEx_MasterConfigSynchronization>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000a22:	f000 f97d 	bl	8000d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a26:	2360      	movs	r3, #96	; 0x60
 8000a28:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10000/4-1;
 8000a2a:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8000a2e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a38:	463b      	mov	r3, r7
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4807      	ldr	r0, [pc, #28]	; (8000a5c <MX_TIM2_Init+0xec>)
 8000a40:	f003 fd66 	bl	8004510 <HAL_TIM_PWM_ConfigChannel>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 8000a4a:	f000 f969 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a4e:	4803      	ldr	r0, [pc, #12]	; (8000a5c <MX_TIM2_Init+0xec>)
 8000a50:	f000 fb3a 	bl	80010c8 <HAL_TIM_MspPostInit>

}
 8000a54:	bf00      	nop
 8000a56:	3738      	adds	r7, #56	; 0x38
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000368 	.word	0x20000368

08000a60 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a66:	4a15      	ldr	r2, [pc, #84]	; (8000abc <MX_USART3_UART_Init+0x5c>)
 8000a68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000aa4:	f004 fb5e 	bl	8005164 <HAL_UART_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000aae:	f000 f937 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200003b4 	.word	0x200003b4
 8000abc:	40004800 	.word	0x40004800

08000ac0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <MX_USART6_UART_Init+0x58>)
 8000ac6:	4a15      	ldr	r2, [pc, #84]	; (8000b1c <MX_USART6_UART_Init+0x5c>)
 8000ac8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <MX_USART6_UART_Init+0x58>)
 8000acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <MX_USART6_UART_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <MX_USART6_UART_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <MX_USART6_UART_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <MX_USART6_UART_Init+0x58>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <MX_USART6_UART_Init+0x58>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_USART6_UART_Init+0x58>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <MX_USART6_UART_Init+0x58>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <MX_USART6_UART_Init+0x58>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_USART6_UART_Init+0x58>)
 8000b04:	f004 fb2e 	bl	8005164 <HAL_UART_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000b0e:	f000 f907 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	2000043c 	.word	0x2000043c
 8000b1c:	40011400 	.word	0x40011400

08000b20 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b26:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b2a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b2e:	2206      	movs	r2, #6
 8000b30:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b34:	2202      	movs	r2, #2
 8000b36:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b40:	2202      	movs	r2, #2
 8000b42:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b64:	f001 fffd 	bl	8002b62 <HAL_PCD_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b6e:	f000 f8d7 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200004c4 	.word	0x200004c4

08000b7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <MX_DMA_Init+0x38>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a0b      	ldr	r2, [pc, #44]	; (8000bb4 <MX_DMA_Init+0x38>)
 8000b88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <MX_DMA_Init+0x38>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	2010      	movs	r0, #16
 8000ba0:	f000 fde9 	bl	8001776 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ba4:	2010      	movs	r0, #16
 8000ba6:	f000 fe02 	bl	80017ae <HAL_NVIC_EnableIRQ>

}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800

08000bb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08c      	sub	sp, #48	; 0x30
 8000bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
 8000bcc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bce:	4b50      	ldr	r3, [pc, #320]	; (8000d10 <MX_GPIO_Init+0x158>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a4f      	ldr	r2, [pc, #316]	; (8000d10 <MX_GPIO_Init+0x158>)
 8000bd4:	f043 0304 	orr.w	r3, r3, #4
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b4d      	ldr	r3, [pc, #308]	; (8000d10 <MX_GPIO_Init+0x158>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0304 	and.w	r3, r3, #4
 8000be2:	61bb      	str	r3, [r7, #24]
 8000be4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be6:	4b4a      	ldr	r3, [pc, #296]	; (8000d10 <MX_GPIO_Init+0x158>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a49      	ldr	r2, [pc, #292]	; (8000d10 <MX_GPIO_Init+0x158>)
 8000bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b47      	ldr	r3, [pc, #284]	; (8000d10 <MX_GPIO_Init+0x158>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	4b44      	ldr	r3, [pc, #272]	; (8000d10 <MX_GPIO_Init+0x158>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a43      	ldr	r2, [pc, #268]	; (8000d10 <MX_GPIO_Init+0x158>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b41      	ldr	r3, [pc, #260]	; (8000d10 <MX_GPIO_Init+0x158>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	4b3e      	ldr	r3, [pc, #248]	; (8000d10 <MX_GPIO_Init+0x158>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a3d      	ldr	r2, [pc, #244]	; (8000d10 <MX_GPIO_Init+0x158>)
 8000c1c:	f043 0302 	orr.w	r3, r3, #2
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b3b      	ldr	r3, [pc, #236]	; (8000d10 <MX_GPIO_Init+0x158>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2e:	4b38      	ldr	r3, [pc, #224]	; (8000d10 <MX_GPIO_Init+0x158>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a37      	ldr	r2, [pc, #220]	; (8000d10 <MX_GPIO_Init+0x158>)
 8000c34:	f043 0308 	orr.w	r3, r3, #8
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b35      	ldr	r3, [pc, #212]	; (8000d10 <MX_GPIO_Init+0x158>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0308 	and.w	r3, r3, #8
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c46:	4b32      	ldr	r3, [pc, #200]	; (8000d10 <MX_GPIO_Init+0x158>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a31      	ldr	r2, [pc, #196]	; (8000d10 <MX_GPIO_Init+0x158>)
 8000c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b2f      	ldr	r3, [pc, #188]	; (8000d10 <MX_GPIO_Init+0x158>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2109      	movs	r1, #9
 8000c62:	482c      	ldr	r0, [pc, #176]	; (8000d14 <MX_GPIO_Init+0x15c>)
 8000c64:	f001 fe3c 	bl	80028e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c6e:	482a      	ldr	r0, [pc, #168]	; (8000d18 <MX_GPIO_Init+0x160>)
 8000c70:	f001 fe36 	bl	80028e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2140      	movs	r1, #64	; 0x40
 8000c78:	4828      	ldr	r0, [pc, #160]	; (8000d1c <MX_GPIO_Init+0x164>)
 8000c7a:	f001 fe31 	bl	80028e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c84:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	f107 031c 	add.w	r3, r7, #28
 8000c92:	4619      	mov	r1, r3
 8000c94:	481f      	ldr	r0, [pc, #124]	; (8000d14 <MX_GPIO_Init+0x15c>)
 8000c96:	f001 fc77 	bl	8002588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000c9a:	2309      	movs	r3, #9
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4818      	ldr	r0, [pc, #96]	; (8000d14 <MX_GPIO_Init+0x15c>)
 8000cb2:	f001 fc69 	bl	8002588 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000cb6:	f244 0381 	movw	r3, #16513	; 0x4081
 8000cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4812      	ldr	r0, [pc, #72]	; (8000d18 <MX_GPIO_Init+0x160>)
 8000cd0:	f001 fc5a 	bl	8002588 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cd4:	2340      	movs	r3, #64	; 0x40
 8000cd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	f107 031c 	add.w	r3, r7, #28
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480c      	ldr	r0, [pc, #48]	; (8000d1c <MX_GPIO_Init+0x164>)
 8000cec:	f001 fc4c 	bl	8002588 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000cf0:	2380      	movs	r3, #128	; 0x80
 8000cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cfc:	f107 031c 	add.w	r3, r7, #28
 8000d00:	4619      	mov	r1, r3
 8000d02:	4806      	ldr	r0, [pc, #24]	; (8000d1c <MX_GPIO_Init+0x164>)
 8000d04:	f001 fc40 	bl	8002588 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d08:	bf00      	nop
 8000d0a:	3730      	adds	r7, #48	; 0x30
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020800 	.word	0x40020800
 8000d18:	40020400 	.word	0x40020400
 8000d1c:	40021800 	.word	0x40021800

08000d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d24:	b672      	cpsid	i
}
 8000d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <Error_Handler+0x8>
	...

08000d2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <HAL_MspInit+0x44>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <HAL_MspInit+0x44>)
 8000d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <HAL_MspInit+0x44>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <HAL_MspInit+0x44>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	4a08      	ldr	r2, [pc, #32]	; (8000d70 <HAL_MspInit+0x44>)
 8000d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d54:	6453      	str	r3, [r2, #68]	; 0x44
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_MspInit+0x44>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d5e:	603b      	str	r3, [r7, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	40023800 	.word	0x40023800

08000d74 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a2d      	ldr	r2, [pc, #180]	; (8000e48 <HAL_DAC_MspInit+0xd4>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d153      	bne.n	8000e3e <HAL_DAC_MspInit+0xca>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000d96:	4b2d      	ldr	r3, [pc, #180]	; (8000e4c <HAL_DAC_MspInit+0xd8>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	4a2c      	ldr	r2, [pc, #176]	; (8000e4c <HAL_DAC_MspInit+0xd8>)
 8000d9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000da0:	6413      	str	r3, [r2, #64]	; 0x40
 8000da2:	4b2a      	ldr	r3, [pc, #168]	; (8000e4c <HAL_DAC_MspInit+0xd8>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	4b27      	ldr	r3, [pc, #156]	; (8000e4c <HAL_DAC_MspInit+0xd8>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a26      	ldr	r2, [pc, #152]	; (8000e4c <HAL_DAC_MspInit+0xd8>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b24      	ldr	r3, [pc, #144]	; (8000e4c <HAL_DAC_MspInit+0xd8>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000dc6:	2310      	movs	r3, #16
 8000dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	481d      	ldr	r0, [pc, #116]	; (8000e50 <HAL_DAC_MspInit+0xdc>)
 8000dda:	f001 fbd5 	bl	8002588 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8000dde:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <HAL_DAC_MspInit+0xe0>)
 8000de0:	4a1d      	ldr	r2, [pc, #116]	; (8000e58 <HAL_DAC_MspInit+0xe4>)
 8000de2:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8000de4:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <HAL_DAC_MspInit+0xe0>)
 8000de6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000dea:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dec:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <HAL_DAC_MspInit+0xe0>)
 8000dee:	2240      	movs	r2, #64	; 0x40
 8000df0:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000df2:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <HAL_DAC_MspInit+0xe0>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8000df8:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <HAL_DAC_MspInit+0xe0>)
 8000dfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dfe:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e00:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <HAL_DAC_MspInit+0xe0>)
 8000e02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e06:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_DAC_MspInit+0xe0>)
 8000e0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e0e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 8000e10:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <HAL_DAC_MspInit+0xe0>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8000e16:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <HAL_DAC_MspInit+0xe0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e1c:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <HAL_DAC_MspInit+0xe0>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8000e22:	480c      	ldr	r0, [pc, #48]	; (8000e54 <HAL_DAC_MspInit+0xe0>)
 8000e24:	f000 fda0 	bl	8001968 <HAL_DMA_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_DAC_MspInit+0xbe>
    {
      Error_Handler();
 8000e2e:	f7ff ff77 	bl	8000d20 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <HAL_DAC_MspInit+0xe0>)
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	4a06      	ldr	r2, [pc, #24]	; (8000e54 <HAL_DAC_MspInit+0xe0>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	; 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40007400 	.word	0x40007400
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020000 	.word	0x40020000
 8000e54:	20000204 	.word	0x20000204
 8000e58:	40026088 	.word	0x40026088

08000e5c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08e      	sub	sp, #56	; 0x38
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a4e      	ldr	r2, [pc, #312]	; (8000fb4 <HAL_ETH_MspInit+0x158>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	f040 8096 	bne.w	8000fac <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000e80:	4b4d      	ldr	r3, [pc, #308]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	4a4c      	ldr	r2, [pc, #304]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000e86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8c:	4b4a      	ldr	r3, [pc, #296]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e94:	623b      	str	r3, [r7, #32]
 8000e96:	6a3b      	ldr	r3, [r7, #32]
 8000e98:	4b47      	ldr	r3, [pc, #284]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9c:	4a46      	ldr	r2, [pc, #280]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000e9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea4:	4b44      	ldr	r3, [pc, #272]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000eac:	61fb      	str	r3, [r7, #28]
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	4b41      	ldr	r3, [pc, #260]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb4:	4a40      	ldr	r2, [pc, #256]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000eb6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000eba:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebc:	4b3e      	ldr	r3, [pc, #248]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ec4:	61bb      	str	r3, [r7, #24]
 8000ec6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec8:	4b3b      	ldr	r3, [pc, #236]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ecc:	4a3a      	ldr	r2, [pc, #232]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000ece:	f043 0304 	orr.w	r3, r3, #4
 8000ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed4:	4b38      	ldr	r3, [pc, #224]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed8:	f003 0304 	and.w	r3, r3, #4
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee0:	4b35      	ldr	r3, [pc, #212]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee4:	4a34      	ldr	r2, [pc, #208]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	6313      	str	r3, [r2, #48]	; 0x30
 8000eec:	4b32      	ldr	r3, [pc, #200]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef8:	4b2f      	ldr	r3, [pc, #188]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efc:	4a2e      	ldr	r2, [pc, #184]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000efe:	f043 0302 	orr.w	r3, r3, #2
 8000f02:	6313      	str	r3, [r2, #48]	; 0x30
 8000f04:	4b2c      	ldr	r3, [pc, #176]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f10:	4b29      	ldr	r3, [pc, #164]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f14:	4a28      	ldr	r2, [pc, #160]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1c:	4b26      	ldr	r3, [pc, #152]	; (8000fb8 <HAL_ETH_MspInit+0x15c>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f28:	2332      	movs	r3, #50	; 0x32
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f34:	2303      	movs	r3, #3
 8000f36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f38:	230b      	movs	r3, #11
 8000f3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f40:	4619      	mov	r1, r3
 8000f42:	481e      	ldr	r0, [pc, #120]	; (8000fbc <HAL_ETH_MspInit+0x160>)
 8000f44:	f001 fb20 	bl	8002588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f48:	2386      	movs	r3, #134	; 0x86
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f54:	2303      	movs	r3, #3
 8000f56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f58:	230b      	movs	r3, #11
 8000f5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f60:	4619      	mov	r1, r3
 8000f62:	4817      	ldr	r0, [pc, #92]	; (8000fc0 <HAL_ETH_MspInit+0x164>)
 8000f64:	f001 fb10 	bl	8002588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f76:	2303      	movs	r3, #3
 8000f78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f7a:	230b      	movs	r3, #11
 8000f7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f82:	4619      	mov	r1, r3
 8000f84:	480f      	ldr	r0, [pc, #60]	; (8000fc4 <HAL_ETH_MspInit+0x168>)
 8000f86:	f001 faff 	bl	8002588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f8a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f9c:	230b      	movs	r3, #11
 8000f9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4808      	ldr	r0, [pc, #32]	; (8000fc8 <HAL_ETH_MspInit+0x16c>)
 8000fa8:	f001 faee 	bl	8002588 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000fac:	bf00      	nop
 8000fae:	3738      	adds	r7, #56	; 0x38
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40028000 	.word	0x40028000
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020800 	.word	0x40020800
 8000fc0:	40020000 	.word	0x40020000
 8000fc4:	40020400 	.word	0x40020400
 8000fc8:	40021800 	.word	0x40021800

08000fcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b0ae      	sub	sp, #184	; 0xb8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	2290      	movs	r2, #144	; 0x90
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f005 f8b9 	bl	8006164 <memset>
  if(hi2c->Instance==I2C1)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a22      	ldr	r2, [pc, #136]	; (8001080 <HAL_I2C_MspInit+0xb4>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d13c      	bne.n	8001076 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ffc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001000:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001002:	2300      	movs	r3, #0
 8001004:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4618      	mov	r0, r3
 800100c:	f002 fc26 	bl	800385c <HAL_RCCEx_PeriphCLKConfig>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001016:	f7ff fe83 	bl	8000d20 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <HAL_I2C_MspInit+0xb8>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a19      	ldr	r2, [pc, #100]	; (8001084 <HAL_I2C_MspInit+0xb8>)
 8001020:	f043 0302 	orr.w	r3, r3, #2
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <HAL_I2C_MspInit+0xb8>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001032:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001036:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800103a:	2312      	movs	r3, #18
 800103c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001046:	2303      	movs	r3, #3
 8001048:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800104c:	2304      	movs	r3, #4
 800104e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001052:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001056:	4619      	mov	r1, r3
 8001058:	480b      	ldr	r0, [pc, #44]	; (8001088 <HAL_I2C_MspInit+0xbc>)
 800105a:	f001 fa95 	bl	8002588 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <HAL_I2C_MspInit+0xb8>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	4a08      	ldr	r2, [pc, #32]	; (8001084 <HAL_I2C_MspInit+0xb8>)
 8001064:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001068:	6413      	str	r3, [r2, #64]	; 0x40
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_I2C_MspInit+0xb8>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001076:	bf00      	nop
 8001078:	37b8      	adds	r7, #184	; 0xb8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40005400 	.word	0x40005400
 8001084:	40023800 	.word	0x40023800
 8001088:	40020400 	.word	0x40020400

0800108c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800109c:	d10b      	bne.n	80010b6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <HAL_TIM_Base_MspInit+0x38>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	4a08      	ldr	r2, [pc, #32]	; (80010c4 <HAL_TIM_Base_MspInit+0x38>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6413      	str	r3, [r2, #64]	; 0x40
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_TIM_Base_MspInit+0x38>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010b6:	bf00      	nop
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800

080010c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010e8:	d11b      	bne.n	8001122 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <HAL_TIM_MspPostInit+0x64>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a0f      	ldr	r2, [pc, #60]	; (800112c <HAL_TIM_MspPostInit+0x64>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b0d      	ldr	r3, [pc, #52]	; (800112c <HAL_TIM_MspPostInit+0x64>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001102:	2301      	movs	r3, #1
 8001104:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110e:	2303      	movs	r3, #3
 8001110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001112:	2301      	movs	r3, #1
 8001114:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 030c 	add.w	r3, r7, #12
 800111a:	4619      	mov	r1, r3
 800111c:	4804      	ldr	r0, [pc, #16]	; (8001130 <HAL_TIM_MspPostInit+0x68>)
 800111e:	f001 fa33 	bl	8002588 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001122:	bf00      	nop
 8001124:	3720      	adds	r7, #32
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800
 8001130:	40020000 	.word	0x40020000

08001134 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b0b0      	sub	sp, #192	; 0xc0
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800114c:	f107 031c 	add.w	r3, r7, #28
 8001150:	2290      	movs	r2, #144	; 0x90
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f005 f805 	bl	8006164 <memset>
  if(huart->Instance==USART3)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a43      	ldr	r2, [pc, #268]	; (800126c <HAL_UART_MspInit+0x138>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d13d      	bne.n	80011e0 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001164:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001168:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800116a:	2300      	movs	r3, #0
 800116c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	4618      	mov	r0, r3
 8001174:	f002 fb72 	bl	800385c <HAL_RCCEx_PeriphCLKConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800117e:	f7ff fdcf 	bl	8000d20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001182:	4b3b      	ldr	r3, [pc, #236]	; (8001270 <HAL_UART_MspInit+0x13c>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	4a3a      	ldr	r2, [pc, #232]	; (8001270 <HAL_UART_MspInit+0x13c>)
 8001188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800118c:	6413      	str	r3, [r2, #64]	; 0x40
 800118e:	4b38      	ldr	r3, [pc, #224]	; (8001270 <HAL_UART_MspInit+0x13c>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001196:	61bb      	str	r3, [r7, #24]
 8001198:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800119a:	4b35      	ldr	r3, [pc, #212]	; (8001270 <HAL_UART_MspInit+0x13c>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a34      	ldr	r2, [pc, #208]	; (8001270 <HAL_UART_MspInit+0x13c>)
 80011a0:	f043 0308 	orr.w	r3, r3, #8
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b32      	ldr	r3, [pc, #200]	; (8001270 <HAL_UART_MspInit+0x13c>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011cc:	2307      	movs	r3, #7
 80011ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011d6:	4619      	mov	r1, r3
 80011d8:	4826      	ldr	r0, [pc, #152]	; (8001274 <HAL_UART_MspInit+0x140>)
 80011da:	f001 f9d5 	bl	8002588 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80011de:	e040      	b.n	8001262 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART6)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a24      	ldr	r2, [pc, #144]	; (8001278 <HAL_UART_MspInit+0x144>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d13b      	bne.n	8001262 <HAL_UART_MspInit+0x12e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80011ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011ee:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80011f0:	2300      	movs	r3, #0
 80011f2:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011f4:	f107 031c 	add.w	r3, r7, #28
 80011f8:	4618      	mov	r0, r3
 80011fa:	f002 fb2f 	bl	800385c <HAL_RCCEx_PeriphCLKConfig>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001204:	f7ff fd8c 	bl	8000d20 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001208:	4b19      	ldr	r3, [pc, #100]	; (8001270 <HAL_UART_MspInit+0x13c>)
 800120a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120c:	4a18      	ldr	r2, [pc, #96]	; (8001270 <HAL_UART_MspInit+0x13c>)
 800120e:	f043 0320 	orr.w	r3, r3, #32
 8001212:	6453      	str	r3, [r2, #68]	; 0x44
 8001214:	4b16      	ldr	r3, [pc, #88]	; (8001270 <HAL_UART_MspInit+0x13c>)
 8001216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001218:	f003 0320 	and.w	r3, r3, #32
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001220:	4b13      	ldr	r3, [pc, #76]	; (8001270 <HAL_UART_MspInit+0x13c>)
 8001222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001224:	4a12      	ldr	r2, [pc, #72]	; (8001270 <HAL_UART_MspInit+0x13c>)
 8001226:	f043 0304 	orr.w	r3, r3, #4
 800122a:	6313      	str	r3, [r2, #48]	; 0x30
 800122c:	4b10      	ldr	r3, [pc, #64]	; (8001270 <HAL_UART_MspInit+0x13c>)
 800122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001230:	f003 0304 	and.w	r3, r3, #4
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001238:	23c0      	movs	r3, #192	; 0xc0
 800123a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124a:	2303      	movs	r3, #3
 800124c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001250:	2308      	movs	r3, #8
 8001252:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001256:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800125a:	4619      	mov	r1, r3
 800125c:	4807      	ldr	r0, [pc, #28]	; (800127c <HAL_UART_MspInit+0x148>)
 800125e:	f001 f993 	bl	8002588 <HAL_GPIO_Init>
}
 8001262:	bf00      	nop
 8001264:	37c0      	adds	r7, #192	; 0xc0
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40004800 	.word	0x40004800
 8001270:	40023800 	.word	0x40023800
 8001274:	40020c00 	.word	0x40020c00
 8001278:	40011400 	.word	0x40011400
 800127c:	40020800 	.word	0x40020800

08001280 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b0ae      	sub	sp, #184	; 0xb8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	2290      	movs	r2, #144	; 0x90
 800129e:	2100      	movs	r1, #0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f004 ff5f 	bl	8006164 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012ae:	d159      	bne.n	8001364 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80012b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012b4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4618      	mov	r0, r3
 80012c2:	f002 facb 	bl	800385c <HAL_RCCEx_PeriphCLKConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80012cc:	f7ff fd28 	bl	8000d20 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d0:	4b26      	ldr	r3, [pc, #152]	; (800136c <HAL_PCD_MspInit+0xec>)
 80012d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d4:	4a25      	ldr	r2, [pc, #148]	; (800136c <HAL_PCD_MspInit+0xec>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	6313      	str	r3, [r2, #48]	; 0x30
 80012dc:	4b23      	ldr	r3, [pc, #140]	; (800136c <HAL_PCD_MspInit+0xec>)
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80012e8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80012ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	2302      	movs	r3, #2
 80012f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001302:	230a      	movs	r3, #10
 8001304:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001308:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800130c:	4619      	mov	r1, r3
 800130e:	4818      	ldr	r0, [pc, #96]	; (8001370 <HAL_PCD_MspInit+0xf0>)
 8001310:	f001 f93a 	bl	8002588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001314:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001318:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001328:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800132c:	4619      	mov	r1, r3
 800132e:	4810      	ldr	r0, [pc, #64]	; (8001370 <HAL_PCD_MspInit+0xf0>)
 8001330:	f001 f92a 	bl	8002588 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001334:	4b0d      	ldr	r3, [pc, #52]	; (800136c <HAL_PCD_MspInit+0xec>)
 8001336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001338:	4a0c      	ldr	r2, [pc, #48]	; (800136c <HAL_PCD_MspInit+0xec>)
 800133a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800133e:	6353      	str	r3, [r2, #52]	; 0x34
 8001340:	4b0a      	ldr	r3, [pc, #40]	; (800136c <HAL_PCD_MspInit+0xec>)
 8001342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4b07      	ldr	r3, [pc, #28]	; (800136c <HAL_PCD_MspInit+0xec>)
 800134e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001350:	4a06      	ldr	r2, [pc, #24]	; (800136c <HAL_PCD_MspInit+0xec>)
 8001352:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001356:	6453      	str	r3, [r2, #68]	; 0x44
 8001358:	4b04      	ldr	r3, [pc, #16]	; (800136c <HAL_PCD_MspInit+0xec>)
 800135a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001364:	bf00      	nop
 8001366:	37b8      	adds	r7, #184	; 0xb8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40023800 	.word	0x40023800
 8001370:	40020000 	.word	0x40020000

08001374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <NMI_Handler+0x4>

0800137a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137e:	e7fe      	b.n	800137e <HardFault_Handler+0x4>

08001380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <MemManage_Handler+0x4>

08001386 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138a:	e7fe      	b.n	800138a <BusFault_Handler+0x4>

0800138c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <UsageFault_Handler+0x4>

08001392 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c0:	f000 f8ba 	bl	8001538 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <DMA1_Stream5_IRQHandler+0x10>)
 80013ce:	f000 fb79 	bl	8001ac4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000204 	.word	0x20000204

080013dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e4:	4a14      	ldr	r2, [pc, #80]	; (8001438 <_sbrk+0x5c>)
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <_sbrk+0x60>)
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f0:	4b13      	ldr	r3, [pc, #76]	; (8001440 <_sbrk+0x64>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d102      	bne.n	80013fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <_sbrk+0x64>)
 80013fa:	4a12      	ldr	r2, [pc, #72]	; (8001444 <_sbrk+0x68>)
 80013fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <_sbrk+0x64>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	429a      	cmp	r2, r3
 800140a:	d207      	bcs.n	800141c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800140c:	f004 feb2 	bl	8006174 <__errno>
 8001410:	4603      	mov	r3, r0
 8001412:	220c      	movs	r2, #12
 8001414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
 800141a:	e009      	b.n	8001430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <_sbrk+0x64>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001422:	4b07      	ldr	r3, [pc, #28]	; (8001440 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	4a05      	ldr	r2, [pc, #20]	; (8001440 <_sbrk+0x64>)
 800142c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142e:	68fb      	ldr	r3, [r7, #12]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20080000 	.word	0x20080000
 800143c:	00000400 	.word	0x00000400
 8001440:	200009d4 	.word	0x200009d4
 8001444:	20000b28 	.word	0x20000b28

08001448 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <SystemInit+0x20>)
 800144e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001452:	4a05      	ldr	r2, [pc, #20]	; (8001468 <SystemInit+0x20>)
 8001454:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800146c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001470:	480d      	ldr	r0, [pc, #52]	; (80014a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001472:	490e      	ldr	r1, [pc, #56]	; (80014ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001474:	4a0e      	ldr	r2, [pc, #56]	; (80014b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001478:	e002      	b.n	8001480 <LoopCopyDataInit>

0800147a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800147c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147e:	3304      	adds	r3, #4

08001480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001484:	d3f9      	bcc.n	800147a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001486:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001488:	4c0b      	ldr	r4, [pc, #44]	; (80014b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800148c:	e001      	b.n	8001492 <LoopFillZerobss>

0800148e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001490:	3204      	adds	r2, #4

08001492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001494:	d3fb      	bcc.n	800148e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001496:	f7ff ffd7 	bl	8001448 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800149a:	f004 fe71 	bl	8006180 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800149e:	f7ff f8a5 	bl	80005ec <main>
  bx  lr    
 80014a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014a4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80014a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014ac:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80014b0:	08006b00 	.word	0x08006b00
  ldr r2, =_sbss
 80014b4:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 80014b8:	20000b24 	.word	0x20000b24

080014bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014bc:	e7fe      	b.n	80014bc <ADC_IRQHandler>

080014be <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c2:	2003      	movs	r0, #3
 80014c4:	f000 f94c 	bl	8001760 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014c8:	2000      	movs	r0, #0
 80014ca:	f000 f805 	bl	80014d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014ce:	f7ff fc2d 	bl	8000d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <HAL_InitTick+0x54>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b12      	ldr	r3, [pc, #72]	; (8001530 <HAL_InitTick+0x58>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	4619      	mov	r1, r3
 80014ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80014f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 f967 	bl	80017ca <HAL_SYSTICK_Config>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e00e      	b.n	8001524 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b0f      	cmp	r3, #15
 800150a:	d80a      	bhi.n	8001522 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800150c:	2200      	movs	r2, #0
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	f04f 30ff 	mov.w	r0, #4294967295
 8001514:	f000 f92f 	bl	8001776 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001518:	4a06      	ldr	r2, [pc, #24]	; (8001534 <HAL_InitTick+0x5c>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800151e:	2300      	movs	r3, #0
 8001520:	e000      	b.n	8001524 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000000 	.word	0x20000000
 8001530:	20000008 	.word	0x20000008
 8001534:	20000004 	.word	0x20000004

08001538 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_IncTick+0x20>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	461a      	mov	r2, r3
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_IncTick+0x24>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4413      	add	r3, r2
 8001548:	4a04      	ldr	r2, [pc, #16]	; (800155c <HAL_IncTick+0x24>)
 800154a:	6013      	str	r3, [r2, #0]
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20000008 	.word	0x20000008
 800155c:	200009d8 	.word	0x200009d8

08001560 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return uwTick;
 8001564:	4b03      	ldr	r3, [pc, #12]	; (8001574 <HAL_GetTick+0x14>)
 8001566:	681b      	ldr	r3, [r3, #0]
}
 8001568:	4618      	mov	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	200009d8 	.word	0x200009d8

08001578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001580:	f7ff ffee 	bl	8001560 <HAL_GetTick>
 8001584:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001590:	d005      	beq.n	800159e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <HAL_Delay+0x44>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4413      	add	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800159e:	bf00      	nop
 80015a0:	f7ff ffde 	bl	8001560 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d8f7      	bhi.n	80015a0 <HAL_Delay+0x28>
  {
  }
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000008 	.word	0x20000008

080015c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <__NVIC_SetPriorityGrouping+0x40>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015dc:	4013      	ands	r3, r2
 80015de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ee:	4a04      	ldr	r2, [pc, #16]	; (8001600 <__NVIC_SetPriorityGrouping+0x40>)
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	60d3      	str	r3, [r2, #12]
}
 80015f4:	bf00      	nop
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000ed00 	.word	0xe000ed00
 8001604:	05fa0000 	.word	0x05fa0000

08001608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800160c:	4b04      	ldr	r3, [pc, #16]	; (8001620 <__NVIC_GetPriorityGrouping+0x18>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	0a1b      	lsrs	r3, r3, #8
 8001612:	f003 0307 	and.w	r3, r3, #7
}
 8001616:	4618      	mov	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	2b00      	cmp	r3, #0
 8001634:	db0b      	blt.n	800164e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	f003 021f 	and.w	r2, r3, #31
 800163c:	4907      	ldr	r1, [pc, #28]	; (800165c <__NVIC_EnableIRQ+0x38>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	095b      	lsrs	r3, r3, #5
 8001644:	2001      	movs	r0, #1
 8001646:	fa00 f202 	lsl.w	r2, r0, r2
 800164a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000e100 	.word	0xe000e100

08001660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	6039      	str	r1, [r7, #0]
 800166a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	2b00      	cmp	r3, #0
 8001672:	db0a      	blt.n	800168a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	b2da      	uxtb	r2, r3
 8001678:	490c      	ldr	r1, [pc, #48]	; (80016ac <__NVIC_SetPriority+0x4c>)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	0112      	lsls	r2, r2, #4
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	440b      	add	r3, r1
 8001684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001688:	e00a      	b.n	80016a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4908      	ldr	r1, [pc, #32]	; (80016b0 <__NVIC_SetPriority+0x50>)
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	3b04      	subs	r3, #4
 8001698:	0112      	lsls	r2, r2, #4
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	440b      	add	r3, r1
 800169e:	761a      	strb	r2, [r3, #24]
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000e100 	.word	0xe000e100
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b089      	sub	sp, #36	; 0x24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f1c3 0307 	rsb	r3, r3, #7
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	bf28      	it	cs
 80016d2:	2304      	movcs	r3, #4
 80016d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3304      	adds	r3, #4
 80016da:	2b06      	cmp	r3, #6
 80016dc:	d902      	bls.n	80016e4 <NVIC_EncodePriority+0x30>
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3b03      	subs	r3, #3
 80016e2:	e000      	b.n	80016e6 <NVIC_EncodePriority+0x32>
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e8:	f04f 32ff 	mov.w	r2, #4294967295
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43da      	mvns	r2, r3
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	401a      	ands	r2, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	fa01 f303 	lsl.w	r3, r1, r3
 8001706:	43d9      	mvns	r1, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	4313      	orrs	r3, r2
         );
}
 800170e:	4618      	mov	r0, r3
 8001710:	3724      	adds	r7, #36	; 0x24
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3b01      	subs	r3, #1
 8001728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800172c:	d301      	bcc.n	8001732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800172e:	2301      	movs	r3, #1
 8001730:	e00f      	b.n	8001752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001732:	4a0a      	ldr	r2, [pc, #40]	; (800175c <SysTick_Config+0x40>)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3b01      	subs	r3, #1
 8001738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800173a:	210f      	movs	r1, #15
 800173c:	f04f 30ff 	mov.w	r0, #4294967295
 8001740:	f7ff ff8e 	bl	8001660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <SysTick_Config+0x40>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174a:	4b04      	ldr	r3, [pc, #16]	; (800175c <SysTick_Config+0x40>)
 800174c:	2207      	movs	r2, #7
 800174e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	e000e010 	.word	0xe000e010

08001760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff ff29 	bl	80015c0 <__NVIC_SetPriorityGrouping>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001776:	b580      	push	{r7, lr}
 8001778:	b086      	sub	sp, #24
 800177a:	af00      	add	r7, sp, #0
 800177c:	4603      	mov	r3, r0
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	607a      	str	r2, [r7, #4]
 8001782:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001788:	f7ff ff3e 	bl	8001608 <__NVIC_GetPriorityGrouping>
 800178c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	68b9      	ldr	r1, [r7, #8]
 8001792:	6978      	ldr	r0, [r7, #20]
 8001794:	f7ff ff8e 	bl	80016b4 <NVIC_EncodePriority>
 8001798:	4602      	mov	r2, r0
 800179a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800179e:	4611      	mov	r1, r2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff5d 	bl	8001660 <__NVIC_SetPriority>
}
 80017a6:	bf00      	nop
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	4603      	mov	r3, r0
 80017b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff31 	bl	8001624 <__NVIC_EnableIRQ>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff ffa2 	bl	800171c <SysTick_Config>
 80017d8:	4603      	mov	r3, r0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e014      	b.n	800181e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	791b      	ldrb	r3, [r3, #4]
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d105      	bne.n	800180a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff fab5 	bl	8000d74 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2202      	movs	r2, #2
 800180e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	795b      	ldrb	r3, [r3, #5]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d101      	bne.n	800183c <HAL_DAC_Start+0x16>
 8001838:	2302      	movs	r3, #2
 800183a:	e040      	b.n	80018be <HAL_DAC_Start+0x98>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2202      	movs	r2, #2
 8001846:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6819      	ldr	r1, [r3, #0]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	f003 0310 	and.w	r3, r3, #16
 8001854:	2201      	movs	r2, #1
 8001856:	409a      	lsls	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	430a      	orrs	r2, r1
 800185e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10f      	bne.n	8001886 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001870:	2b3c      	cmp	r3, #60	; 0x3c
 8001872:	d11d      	bne.n	80018b0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 0201 	orr.w	r2, r2, #1
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	e014      	b.n	80018b0 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	f003 0310 	and.w	r3, r3, #16
 8001896:	213c      	movs	r1, #60	; 0x3c
 8001898:	fa01 f303 	lsl.w	r3, r1, r3
 800189c:	429a      	cmp	r2, r3
 800189e:	d107      	bne.n	80018b0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f042 0202 	orr.w	r2, r2, #2
 80018ae:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b087      	sub	sp, #28
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	795b      	ldrb	r3, [r3, #5]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d101      	bne.n	80018e2 <HAL_DAC_ConfigChannel+0x18>
 80018de:	2302      	movs	r3, #2
 80018e0:	e03c      	b.n	800195c <HAL_DAC_ConfigChannel+0x92>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2201      	movs	r2, #1
 80018e6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2202      	movs	r2, #2
 80018ec:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f003 0310 	and.w	r3, r3, #16
 80018fc:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	4013      	ands	r3, r2
 800190a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f003 0310 	and.w	r3, r3, #16
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	4313      	orrs	r3, r2
 8001928:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6819      	ldr	r1, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f003 0310 	and.w	r3, r3, #16
 800193e:	22c0      	movs	r2, #192	; 0xc0
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43da      	mvns	r2, r3
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	400a      	ands	r2, r1
 800194c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2201      	movs	r2, #1
 8001952:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	371c      	adds	r7, #28
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001974:	f7ff fdf4 	bl	8001560 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e099      	b.n	8001ab8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2202      	movs	r2, #2
 8001988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 0201 	bic.w	r2, r2, #1
 80019a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019a4:	e00f      	b.n	80019c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019a6:	f7ff fddb 	bl	8001560 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b05      	cmp	r3, #5
 80019b2:	d908      	bls.n	80019c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2220      	movs	r2, #32
 80019b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2203      	movs	r2, #3
 80019be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e078      	b.n	8001ab8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1e8      	bne.n	80019a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	4b38      	ldr	r3, [pc, #224]	; (8001ac0 <HAL_DMA_Init+0x158>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d107      	bne.n	8001a30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	f023 0307 	bic.w	r3, r3, #7
 8001a46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d117      	bne.n	8001a8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d00e      	beq.n	8001a8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 f9e9 	bl	8001e44 <DMA_CheckFifoParam>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d008      	beq.n	8001a8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2240      	movs	r2, #64	; 0x40
 8001a7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a86:	2301      	movs	r3, #1
 8001a88:	e016      	b.n	8001ab8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f9a0 	bl	8001dd8 <DMA_CalcBaseAndBitshift>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa0:	223f      	movs	r2, #63	; 0x3f
 8001aa2:	409a      	lsls	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	e010803f 	.word	0xe010803f

08001ac4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001ad0:	4b8e      	ldr	r3, [pc, #568]	; (8001d0c <HAL_DMA_IRQHandler+0x248>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a8e      	ldr	r2, [pc, #568]	; (8001d10 <HAL_DMA_IRQHandler+0x24c>)
 8001ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ada:	0a9b      	lsrs	r3, r3, #10
 8001adc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aee:	2208      	movs	r2, #8
 8001af0:	409a      	lsls	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4013      	ands	r3, r2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d01a      	beq.n	8001b30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d013      	beq.n	8001b30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0204 	bic.w	r2, r2, #4
 8001b16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b1c:	2208      	movs	r2, #8
 8001b1e:	409a      	lsls	r2, r3
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b28:	f043 0201 	orr.w	r2, r3, #1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b34:	2201      	movs	r2, #1
 8001b36:	409a      	lsls	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d012      	beq.n	8001b66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00b      	beq.n	8001b66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b52:	2201      	movs	r2, #1
 8001b54:	409a      	lsls	r2, r3
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5e:	f043 0202 	orr.w	r2, r3, #2
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4013      	ands	r3, r2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d012      	beq.n	8001b9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d00b      	beq.n	8001b9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b88:	2204      	movs	r2, #4
 8001b8a:	409a      	lsls	r2, r3
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b94:	f043 0204 	orr.w	r2, r3, #4
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba0:	2210      	movs	r2, #16
 8001ba2:	409a      	lsls	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d043      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d03c      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bbe:	2210      	movs	r2, #16
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d018      	beq.n	8001c06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d108      	bne.n	8001bf4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d024      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	4798      	blx	r3
 8001bf2:	e01f      	b.n	8001c34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d01b      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	4798      	blx	r3
 8001c04:	e016      	b.n	8001c34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d107      	bne.n	8001c24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0208 	bic.w	r2, r2, #8
 8001c22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c38:	2220      	movs	r2, #32
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 808f 	beq.w	8001d64 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0310 	and.w	r3, r3, #16
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 8087 	beq.w	8001d64 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	409a      	lsls	r2, r3
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b05      	cmp	r3, #5
 8001c6c:	d136      	bne.n	8001cdc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 0216 	bic.w	r2, r2, #22
 8001c7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	695a      	ldr	r2, [r3, #20]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d103      	bne.n	8001c9e <HAL_DMA_IRQHandler+0x1da>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d007      	beq.n	8001cae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0208 	bic.w	r2, r2, #8
 8001cac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb2:	223f      	movs	r2, #63	; 0x3f
 8001cb4:	409a      	lsls	r2, r3
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d07e      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	4798      	blx	r3
        }
        return;
 8001cda:	e079      	b.n	8001dd0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d01d      	beq.n	8001d26 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d10d      	bne.n	8001d14 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d031      	beq.n	8001d64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	4798      	blx	r3
 8001d08:	e02c      	b.n	8001d64 <HAL_DMA_IRQHandler+0x2a0>
 8001d0a:	bf00      	nop
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d023      	beq.n	8001d64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	4798      	blx	r3
 8001d24:	e01e      	b.n	8001d64 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10f      	bne.n	8001d54 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0210 	bic.w	r2, r2, #16
 8001d42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d032      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d022      	beq.n	8001dbe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2205      	movs	r2, #5
 8001d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0201 	bic.w	r2, r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	3301      	adds	r3, #1
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d307      	bcc.n	8001dac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f2      	bne.n	8001d90 <HAL_DMA_IRQHandler+0x2cc>
 8001daa:	e000      	b.n	8001dae <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001dac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d005      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	4798      	blx	r3
 8001dce:	e000      	b.n	8001dd2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001dd0:	bf00      	nop
    }
  }
}
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	3b10      	subs	r3, #16
 8001de8:	4a13      	ldr	r2, [pc, #76]	; (8001e38 <DMA_CalcBaseAndBitshift+0x60>)
 8001dea:	fba2 2303 	umull	r2, r3, r2, r3
 8001dee:	091b      	lsrs	r3, r3, #4
 8001df0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001df2:	4a12      	ldr	r2, [pc, #72]	; (8001e3c <DMA_CalcBaseAndBitshift+0x64>)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4413      	add	r3, r2
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	d908      	bls.n	8001e18 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <DMA_CalcBaseAndBitshift+0x68>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	1d1a      	adds	r2, r3, #4
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	659a      	str	r2, [r3, #88]	; 0x58
 8001e16:	e006      	b.n	8001e26 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <DMA_CalcBaseAndBitshift+0x68>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	aaaaaaab 	.word	0xaaaaaaab
 8001e3c:	08006ab4 	.word	0x08006ab4
 8001e40:	fffffc00 	.word	0xfffffc00

08001e44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d11f      	bne.n	8001e9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d856      	bhi.n	8001f12 <DMA_CheckFifoParam+0xce>
 8001e64:	a201      	add	r2, pc, #4	; (adr r2, 8001e6c <DMA_CheckFifoParam+0x28>)
 8001e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e6a:	bf00      	nop
 8001e6c:	08001e7d 	.word	0x08001e7d
 8001e70:	08001e8f 	.word	0x08001e8f
 8001e74:	08001e7d 	.word	0x08001e7d
 8001e78:	08001f13 	.word	0x08001f13
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d046      	beq.n	8001f16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e8c:	e043      	b.n	8001f16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e96:	d140      	bne.n	8001f1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e9c:	e03d      	b.n	8001f1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ea6:	d121      	bne.n	8001eec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	d837      	bhi.n	8001f1e <DMA_CheckFifoParam+0xda>
 8001eae:	a201      	add	r2, pc, #4	; (adr r2, 8001eb4 <DMA_CheckFifoParam+0x70>)
 8001eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb4:	08001ec5 	.word	0x08001ec5
 8001eb8:	08001ecb 	.word	0x08001ecb
 8001ebc:	08001ec5 	.word	0x08001ec5
 8001ec0:	08001edd 	.word	0x08001edd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ec8:	e030      	b.n	8001f2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ece:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d025      	beq.n	8001f22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eda:	e022      	b.n	8001f22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ee4:	d11f      	bne.n	8001f26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001eea:	e01c      	b.n	8001f26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d903      	bls.n	8001efa <DMA_CheckFifoParam+0xb6>
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d003      	beq.n	8001f00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ef8:	e018      	b.n	8001f2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	73fb      	strb	r3, [r7, #15]
      break;
 8001efe:	e015      	b.n	8001f2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00e      	beq.n	8001f2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f10:	e00b      	b.n	8001f2a <DMA_CheckFifoParam+0xe6>
      break;
 8001f12:	bf00      	nop
 8001f14:	e00a      	b.n	8001f2c <DMA_CheckFifoParam+0xe8>
      break;
 8001f16:	bf00      	nop
 8001f18:	e008      	b.n	8001f2c <DMA_CheckFifoParam+0xe8>
      break;
 8001f1a:	bf00      	nop
 8001f1c:	e006      	b.n	8001f2c <DMA_CheckFifoParam+0xe8>
      break;
 8001f1e:	bf00      	nop
 8001f20:	e004      	b.n	8001f2c <DMA_CheckFifoParam+0xe8>
      break;
 8001f22:	bf00      	nop
 8001f24:	e002      	b.n	8001f2c <DMA_CheckFifoParam+0xe8>
      break;   
 8001f26:	bf00      	nop
 8001f28:	e000      	b.n	8001f2c <DMA_CheckFifoParam+0xe8>
      break;
 8001f2a:	bf00      	nop
    }
  } 
  
  return status; 
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop

08001f3c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e06a      	b.n	8002024 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d106      	bne.n	8001f66 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2223      	movs	r2, #35	; 0x23
 8001f5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7fe ff7b 	bl	8000e5c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f66:	4b31      	ldr	r3, [pc, #196]	; (800202c <HAL_ETH_Init+0xf0>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	4a30      	ldr	r2, [pc, #192]	; (800202c <HAL_ETH_Init+0xf0>)
 8001f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f70:	6453      	str	r3, [r2, #68]	; 0x44
 8001f72:	4b2e      	ldr	r3, [pc, #184]	; (800202c <HAL_ETH_Init+0xf0>)
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001f7e:	4b2c      	ldr	r3, [pc, #176]	; (8002030 <HAL_ETH_Init+0xf4>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	4a2b      	ldr	r2, [pc, #172]	; (8002030 <HAL_ETH_Init+0xf4>)
 8001f84:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f88:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001f8a:	4b29      	ldr	r3, [pc, #164]	; (8002030 <HAL_ETH_Init+0xf4>)
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	4927      	ldr	r1, [pc, #156]	; (8002030 <HAL_ETH_Init+0xf4>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001f98:	4b25      	ldr	r3, [pc, #148]	; (8002030 <HAL_ETH_Init+0xf4>)
 8001f9a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6812      	ldr	r2, [r2, #0]
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fb2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fb4:	f7ff fad4 	bl	8001560 <HAL_GetTick>
 8001fb8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001fba:	e011      	b.n	8001fe0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001fbc:	f7ff fad0 	bl	8001560 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001fca:	d909      	bls.n	8001fe0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2204      	movs	r2, #4
 8001fd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	22e0      	movs	r2, #224	; 0xe0
 8001fd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e021      	b.n	8002024 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1e4      	bne.n	8001fbc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f958 	bl	80022a8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f9ff 	bl	80023fc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 fa55 	bl	80024ae <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	461a      	mov	r2, r3
 800200a:	2100      	movs	r1, #0
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f9bd 	bl	800238c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2210      	movs	r2, #16
 800201e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40023800 	.word	0x40023800
 8002030:	40013800 	.word	0x40013800

08002034 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	4b51      	ldr	r3, [pc, #324]	; (8002190 <ETH_SetMACConfig+0x15c>)
 800204a:	4013      	ands	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	7c1b      	ldrb	r3, [r3, #16]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d102      	bne.n	800205c <ETH_SetMACConfig+0x28>
 8002056:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800205a:	e000      	b.n	800205e <ETH_SetMACConfig+0x2a>
 800205c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	7c5b      	ldrb	r3, [r3, #17]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d102      	bne.n	800206c <ETH_SetMACConfig+0x38>
 8002066:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800206a:	e000      	b.n	800206e <ETH_SetMACConfig+0x3a>
 800206c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800206e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002074:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	7fdb      	ldrb	r3, [r3, #31]
 800207a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800207c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002082:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	7f92      	ldrb	r2, [r2, #30]
 8002088:	2a00      	cmp	r2, #0
 800208a:	d102      	bne.n	8002092 <ETH_SetMACConfig+0x5e>
 800208c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002090:	e000      	b.n	8002094 <ETH_SetMACConfig+0x60>
 8002092:	2200      	movs	r2, #0
                        macconf->Speed |
 8002094:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	7f1b      	ldrb	r3, [r3, #28]
 800209a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800209c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80020a2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	791b      	ldrb	r3, [r3, #4]
 80020a8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80020aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	f892 2020 	ldrb.w	r2, [r2, #32]
 80020b2:	2a00      	cmp	r2, #0
 80020b4:	d102      	bne.n	80020bc <ETH_SetMACConfig+0x88>
 80020b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ba:	e000      	b.n	80020be <ETH_SetMACConfig+0x8a>
 80020bc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80020be:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	7bdb      	ldrb	r3, [r3, #15]
 80020c4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80020c6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80020cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80020d4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80020d6:	4313      	orrs	r3, r2
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	4313      	orrs	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020ee:	2001      	movs	r0, #1
 80020f0:	f7ff fa42 	bl	8001578 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	f64f 7341 	movw	r3, #65345	; 0xff41
 800210a:	4013      	ands	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002112:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800211a:	2a00      	cmp	r2, #0
 800211c:	d101      	bne.n	8002122 <ETH_SetMACConfig+0xee>
 800211e:	2280      	movs	r2, #128	; 0x80
 8002120:	e000      	b.n	8002124 <ETH_SetMACConfig+0xf0>
 8002122:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002124:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800212a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002132:	2a01      	cmp	r2, #1
 8002134:	d101      	bne.n	800213a <ETH_SetMACConfig+0x106>
 8002136:	2208      	movs	r2, #8
 8002138:	e000      	b.n	800213c <ETH_SetMACConfig+0x108>
 800213a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800213c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002144:	2a01      	cmp	r2, #1
 8002146:	d101      	bne.n	800214c <ETH_SetMACConfig+0x118>
 8002148:	2204      	movs	r2, #4
 800214a:	e000      	b.n	800214e <ETH_SetMACConfig+0x11a>
 800214c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800214e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002156:	2a01      	cmp	r2, #1
 8002158:	d101      	bne.n	800215e <ETH_SetMACConfig+0x12a>
 800215a:	2202      	movs	r2, #2
 800215c:	e000      	b.n	8002160 <ETH_SetMACConfig+0x12c>
 800215e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002160:	4313      	orrs	r3, r2
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	4313      	orrs	r3, r2
 8002166:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002178:	2001      	movs	r0, #1
 800217a:	f7ff f9fd 	bl	8001578 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	619a      	str	r2, [r3, #24]
}
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	ff20810f 	.word	0xff20810f

08002194 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	4b3d      	ldr	r3, [pc, #244]	; (80022a4 <ETH_SetDMAConfig+0x110>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	7b1b      	ldrb	r3, [r3, #12]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d102      	bne.n	80021c0 <ETH_SetDMAConfig+0x2c>
 80021ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80021be:	e000      	b.n	80021c2 <ETH_SetDMAConfig+0x2e>
 80021c0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	7b5b      	ldrb	r3, [r3, #13]
 80021c6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021c8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	7f52      	ldrb	r2, [r2, #29]
 80021ce:	2a00      	cmp	r2, #0
 80021d0:	d102      	bne.n	80021d8 <ETH_SetDMAConfig+0x44>
 80021d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80021d6:	e000      	b.n	80021da <ETH_SetDMAConfig+0x46>
 80021d8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80021da:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	7b9b      	ldrb	r3, [r3, #14]
 80021e0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80021e2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80021e8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	7f1b      	ldrb	r3, [r3, #28]
 80021ee:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80021f0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	7f9b      	ldrb	r3, [r3, #30]
 80021f6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80021f8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80021fe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002206:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002208:	4313      	orrs	r3, r2
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	4313      	orrs	r3, r2
 800220e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002218:	461a      	mov	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800222a:	2001      	movs	r0, #1
 800222c:	f7ff f9a4 	bl	8001578 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002238:	461a      	mov	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	791b      	ldrb	r3, [r3, #4]
 8002242:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002248:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800224e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002254:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800225c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800225e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002264:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002266:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800226c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6812      	ldr	r2, [r2, #0]
 8002272:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002276:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800227a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002288:	2001      	movs	r0, #1
 800228a:	f7ff f975 	bl	8001578 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002296:	461a      	mov	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6013      	str	r3, [r2, #0]
}
 800229c:	bf00      	nop
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	f8de3f23 	.word	0xf8de3f23

080022a8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b0a6      	sub	sp, #152	; 0x98
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80022b0:	2301      	movs	r3, #1
 80022b2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80022b6:	2301      	movs	r3, #1
 80022b8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80022bc:	2300      	movs	r3, #0
 80022be:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80022c0:	2300      	movs	r3, #0
 80022c2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80022c6:	2301      	movs	r3, #1
 80022c8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80022cc:	2300      	movs	r3, #0
 80022ce:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80022d2:	2301      	movs	r3, #1
 80022d4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80022d8:	2300      	movs	r3, #0
 80022da:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80022de:	2300      	movs	r3, #0
 80022e0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80022e4:	2300      	movs	r3, #0
 80022e6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80022e8:	2300      	movs	r3, #0
 80022ea:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80022fe:	2300      	movs	r3, #0
 8002300:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002304:	2300      	movs	r3, #0
 8002306:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800230a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800230e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002310:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002314:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002316:	2300      	movs	r3, #0
 8002318:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800231c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002320:	4619      	mov	r1, r3
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff fe86 	bl	8002034 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002328:	2301      	movs	r3, #1
 800232a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800232c:	2301      	movs	r3, #1
 800232e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002330:	2301      	movs	r3, #1
 8002332:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002336:	2301      	movs	r3, #1
 8002338:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800233e:	2300      	movs	r3, #0
 8002340:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002344:	2300      	movs	r3, #0
 8002346:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800234a:	2300      	movs	r3, #0
 800234c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800234e:	2301      	movs	r3, #1
 8002350:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002354:	2301      	movs	r3, #1
 8002356:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002358:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800235c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800235e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002362:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002364:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002368:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800236a:	2301      	movs	r3, #1
 800236c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002370:	2300      	movs	r3, #0
 8002372:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002374:	2300      	movs	r3, #0
 8002376:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002378:	f107 0308 	add.w	r3, r7, #8
 800237c:	4619      	mov	r1, r3
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff ff08 	bl	8002194 <ETH_SetDMAConfig>
}
 8002384:	bf00      	nop
 8002386:	3798      	adds	r7, #152	; 0x98
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800238c:	b480      	push	{r7}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3305      	adds	r3, #5
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	021b      	lsls	r3, r3, #8
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	3204      	adds	r2, #4
 80023a4:	7812      	ldrb	r2, [r2, #0]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <ETH_MACAddressConfig+0x68>)
 80023ae:	4413      	add	r3, r2
 80023b0:	461a      	mov	r2, r3
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3303      	adds	r3, #3
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	061a      	lsls	r2, r3, #24
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3302      	adds	r3, #2
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	041b      	lsls	r3, r3, #16
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3301      	adds	r3, #1
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	4313      	orrs	r3, r2
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	7812      	ldrb	r2, [r2, #0]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <ETH_MACAddressConfig+0x6c>)
 80023de:	4413      	add	r3, r2
 80023e0:	461a      	mov	r2, r3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	6013      	str	r3, [r2, #0]
}
 80023e6:	bf00      	nop
 80023e8:	371c      	adds	r7, #28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	40028040 	.word	0x40028040
 80023f8:	40028044 	.word	0x40028044

080023fc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002404:	2300      	movs	r3, #0
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	e03e      	b.n	8002488 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68d9      	ldr	r1, [r3, #12]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	440b      	add	r3, r1
 800241a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2200      	movs	r2, #0
 8002426:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2200      	movs	r2, #0
 8002432:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	3206      	adds	r2, #6
 800243c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d80c      	bhi.n	800246c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68d9      	ldr	r1, [r3, #12]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	440b      	add	r3, r1
 8002464:	461a      	mov	r2, r3
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	e004      	b.n	8002476 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	461a      	mov	r2, r3
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	3301      	adds	r3, #1
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2b03      	cmp	r3, #3
 800248c:	d9bd      	bls.n	800240a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a0:	611a      	str	r2, [r3, #16]
}
 80024a2:	bf00      	nop
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b085      	sub	sp, #20
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	e046      	b.n	800254a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6919      	ldr	r1, [r3, #16]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	440b      	add	r3, r1
 80024cc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2200      	movs	r2, #0
 80024d8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	2200      	movs	r2, #0
 80024de:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2200      	movs	r2, #0
 80024e4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	2200      	movs	r2, #0
 80024ea:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2200      	movs	r2, #0
 80024f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80024f8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002500:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800250e:	68b9      	ldr	r1, [r7, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	3212      	adds	r2, #18
 8002516:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2b02      	cmp	r3, #2
 800251e:	d80c      	bhi.n	800253a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6919      	ldr	r1, [r3, #16]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	440b      	add	r3, r1
 8002532:	461a      	mov	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	60da      	str	r2, [r3, #12]
 8002538:	e004      	b.n	8002544 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	461a      	mov	r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	3301      	adds	r3, #1
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2b03      	cmp	r3, #3
 800254e:	d9b5      	bls.n	80024bc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691a      	ldr	r2, [r3, #16]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800257a:	60da      	str	r2, [r3, #12]
}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002588:	b480      	push	{r7}
 800258a:	b089      	sub	sp, #36	; 0x24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800259a:	2300      	movs	r3, #0
 800259c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800259e:	2300      	movs	r3, #0
 80025a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80025a2:	2300      	movs	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
 80025a6:	e175      	b.n	8002894 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80025a8:	2201      	movs	r2, #1
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	4013      	ands	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	f040 8164 	bne.w	800288e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d005      	beq.n	80025de <HAL_GPIO_Init+0x56>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d130      	bne.n	8002640 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	2203      	movs	r2, #3
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4013      	ands	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4313      	orrs	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002614:	2201      	movs	r2, #1
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	091b      	lsrs	r3, r3, #4
 800262a:	f003 0201 	and.w	r2, r3, #1
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	2b03      	cmp	r3, #3
 800264a:	d017      	beq.n	800267c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	2203      	movs	r2, #3
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4313      	orrs	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d123      	bne.n	80026d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	08da      	lsrs	r2, r3, #3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3208      	adds	r2, #8
 8002690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	220f      	movs	r2, #15
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	691a      	ldr	r2, [r3, #16]
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	08da      	lsrs	r2, r3, #3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3208      	adds	r2, #8
 80026ca:	69b9      	ldr	r1, [r7, #24]
 80026cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	2203      	movs	r2, #3
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 0203 	and.w	r2, r3, #3
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80be 	beq.w	800288e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002712:	4b66      	ldr	r3, [pc, #408]	; (80028ac <HAL_GPIO_Init+0x324>)
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	4a65      	ldr	r2, [pc, #404]	; (80028ac <HAL_GPIO_Init+0x324>)
 8002718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800271c:	6453      	str	r3, [r2, #68]	; 0x44
 800271e:	4b63      	ldr	r3, [pc, #396]	; (80028ac <HAL_GPIO_Init+0x324>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800272a:	4a61      	ldr	r2, [pc, #388]	; (80028b0 <HAL_GPIO_Init+0x328>)
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	089b      	lsrs	r3, r3, #2
 8002730:	3302      	adds	r3, #2
 8002732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	220f      	movs	r2, #15
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a58      	ldr	r2, [pc, #352]	; (80028b4 <HAL_GPIO_Init+0x32c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d037      	beq.n	80027c6 <HAL_GPIO_Init+0x23e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a57      	ldr	r2, [pc, #348]	; (80028b8 <HAL_GPIO_Init+0x330>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d031      	beq.n	80027c2 <HAL_GPIO_Init+0x23a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a56      	ldr	r2, [pc, #344]	; (80028bc <HAL_GPIO_Init+0x334>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d02b      	beq.n	80027be <HAL_GPIO_Init+0x236>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a55      	ldr	r2, [pc, #340]	; (80028c0 <HAL_GPIO_Init+0x338>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d025      	beq.n	80027ba <HAL_GPIO_Init+0x232>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a54      	ldr	r2, [pc, #336]	; (80028c4 <HAL_GPIO_Init+0x33c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d01f      	beq.n	80027b6 <HAL_GPIO_Init+0x22e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a53      	ldr	r2, [pc, #332]	; (80028c8 <HAL_GPIO_Init+0x340>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d019      	beq.n	80027b2 <HAL_GPIO_Init+0x22a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a52      	ldr	r2, [pc, #328]	; (80028cc <HAL_GPIO_Init+0x344>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d013      	beq.n	80027ae <HAL_GPIO_Init+0x226>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a51      	ldr	r2, [pc, #324]	; (80028d0 <HAL_GPIO_Init+0x348>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d00d      	beq.n	80027aa <HAL_GPIO_Init+0x222>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a50      	ldr	r2, [pc, #320]	; (80028d4 <HAL_GPIO_Init+0x34c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d007      	beq.n	80027a6 <HAL_GPIO_Init+0x21e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a4f      	ldr	r2, [pc, #316]	; (80028d8 <HAL_GPIO_Init+0x350>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d101      	bne.n	80027a2 <HAL_GPIO_Init+0x21a>
 800279e:	2309      	movs	r3, #9
 80027a0:	e012      	b.n	80027c8 <HAL_GPIO_Init+0x240>
 80027a2:	230a      	movs	r3, #10
 80027a4:	e010      	b.n	80027c8 <HAL_GPIO_Init+0x240>
 80027a6:	2308      	movs	r3, #8
 80027a8:	e00e      	b.n	80027c8 <HAL_GPIO_Init+0x240>
 80027aa:	2307      	movs	r3, #7
 80027ac:	e00c      	b.n	80027c8 <HAL_GPIO_Init+0x240>
 80027ae:	2306      	movs	r3, #6
 80027b0:	e00a      	b.n	80027c8 <HAL_GPIO_Init+0x240>
 80027b2:	2305      	movs	r3, #5
 80027b4:	e008      	b.n	80027c8 <HAL_GPIO_Init+0x240>
 80027b6:	2304      	movs	r3, #4
 80027b8:	e006      	b.n	80027c8 <HAL_GPIO_Init+0x240>
 80027ba:	2303      	movs	r3, #3
 80027bc:	e004      	b.n	80027c8 <HAL_GPIO_Init+0x240>
 80027be:	2302      	movs	r3, #2
 80027c0:	e002      	b.n	80027c8 <HAL_GPIO_Init+0x240>
 80027c2:	2301      	movs	r3, #1
 80027c4:	e000      	b.n	80027c8 <HAL_GPIO_Init+0x240>
 80027c6:	2300      	movs	r3, #0
 80027c8:	69fa      	ldr	r2, [r7, #28]
 80027ca:	f002 0203 	and.w	r2, r2, #3
 80027ce:	0092      	lsls	r2, r2, #2
 80027d0:	4093      	lsls	r3, r2
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80027d8:	4935      	ldr	r1, [pc, #212]	; (80028b0 <HAL_GPIO_Init+0x328>)
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	089b      	lsrs	r3, r3, #2
 80027de:	3302      	adds	r3, #2
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027e6:	4b3d      	ldr	r3, [pc, #244]	; (80028dc <HAL_GPIO_Init+0x354>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	43db      	mvns	r3, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4013      	ands	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800280a:	4a34      	ldr	r2, [pc, #208]	; (80028dc <HAL_GPIO_Init+0x354>)
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002810:	4b32      	ldr	r3, [pc, #200]	; (80028dc <HAL_GPIO_Init+0x354>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002834:	4a29      	ldr	r2, [pc, #164]	; (80028dc <HAL_GPIO_Init+0x354>)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800283a:	4b28      	ldr	r3, [pc, #160]	; (80028dc <HAL_GPIO_Init+0x354>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	43db      	mvns	r3, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4013      	ands	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4313      	orrs	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800285e:	4a1f      	ldr	r2, [pc, #124]	; (80028dc <HAL_GPIO_Init+0x354>)
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002864:	4b1d      	ldr	r3, [pc, #116]	; (80028dc <HAL_GPIO_Init+0x354>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	43db      	mvns	r3, r3
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4013      	ands	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002888:	4a14      	ldr	r2, [pc, #80]	; (80028dc <HAL_GPIO_Init+0x354>)
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	3301      	adds	r3, #1
 8002892:	61fb      	str	r3, [r7, #28]
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	2b0f      	cmp	r3, #15
 8002898:	f67f ae86 	bls.w	80025a8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800289c:	bf00      	nop
 800289e:	bf00      	nop
 80028a0:	3724      	adds	r7, #36	; 0x24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40013800 	.word	0x40013800
 80028b4:	40020000 	.word	0x40020000
 80028b8:	40020400 	.word	0x40020400
 80028bc:	40020800 	.word	0x40020800
 80028c0:	40020c00 	.word	0x40020c00
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40021400 	.word	0x40021400
 80028cc:	40021800 	.word	0x40021800
 80028d0:	40021c00 	.word	0x40021c00
 80028d4:	40022000 	.word	0x40022000
 80028d8:	40022400 	.word	0x40022400
 80028dc:	40013c00 	.word	0x40013c00

080028e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	807b      	strh	r3, [r7, #2]
 80028ec:	4613      	mov	r3, r2
 80028ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028f0:	787b      	ldrb	r3, [r7, #1]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028f6:	887a      	ldrh	r2, [r7, #2]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80028fc:	e003      	b.n	8002906 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80028fe:	887b      	ldrh	r3, [r7, #2]
 8002900:	041a      	lsls	r2, r3, #16
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	619a      	str	r2, [r3, #24]
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
	...

08002914 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e07f      	b.n	8002a26 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7fe fb46 	bl	8000fcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2224      	movs	r2, #36	; 0x24
 8002944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0201 	bic.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002964:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002974:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d107      	bne.n	800298e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	e006      	b.n	800299c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800299a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d104      	bne.n	80029ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6859      	ldr	r1, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	4b1d      	ldr	r3, [pc, #116]	; (8002a30 <HAL_I2C_Init+0x11c>)
 80029ba:	430b      	orrs	r3, r1
 80029bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691a      	ldr	r2, [r3, #16]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	69d9      	ldr	r1, [r3, #28]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a1a      	ldr	r2, [r3, #32]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2220      	movs	r2, #32
 8002a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	02008000 	.word	0x02008000

08002a34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b20      	cmp	r3, #32
 8002a48:	d138      	bne.n	8002abc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a54:	2302      	movs	r3, #2
 8002a56:	e032      	b.n	8002abe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2224      	movs	r2, #36	; 0x24
 8002a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0201 	bic.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6819      	ldr	r1, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0201 	orr.w	r2, r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	e000      	b.n	8002abe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002abc:	2302      	movs	r3, #2
  }
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b085      	sub	sp, #20
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b20      	cmp	r3, #32
 8002ade:	d139      	bne.n	8002b54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d101      	bne.n	8002aee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002aea:	2302      	movs	r3, #2
 8002aec:	e033      	b.n	8002b56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2224      	movs	r2, #36	; 0x24
 8002afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0201 	bic.w	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	021b      	lsls	r3, r3, #8
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0201 	orr.w	r2, r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2220      	movs	r2, #32
 8002b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	e000      	b.n	8002b56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b54:	2302      	movs	r3, #2
  }
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b64:	b08f      	sub	sp, #60	; 0x3c
 8002b66:	af0a      	add	r7, sp, #40	; 0x28
 8002b68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e116      	b.n	8002da2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d106      	bne.n	8002b94 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7fe fb76 	bl	8001280 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2203      	movs	r2, #3
 8002b98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d102      	bne.n	8002bae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f003 f81a 	bl	8005bec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	603b      	str	r3, [r7, #0]
 8002bbe:	687e      	ldr	r6, [r7, #4]
 8002bc0:	466d      	mov	r5, sp
 8002bc2:	f106 0410 	add.w	r4, r6, #16
 8002bc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bd6:	1d33      	adds	r3, r6, #4
 8002bd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bda:	6838      	ldr	r0, [r7, #0]
 8002bdc:	f002 ffae 	bl	8005b3c <USB_CoreInit>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d005      	beq.n	8002bf2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2202      	movs	r2, #2
 8002bea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e0d7      	b.n	8002da2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f003 f808 	bl	8005c0e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bfe:	2300      	movs	r3, #0
 8002c00:	73fb      	strb	r3, [r7, #15]
 8002c02:	e04a      	b.n	8002c9a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	333d      	adds	r3, #61	; 0x3d
 8002c14:	2201      	movs	r2, #1
 8002c16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c18:	7bfa      	ldrb	r2, [r7, #15]
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	333c      	adds	r3, #60	; 0x3c
 8002c28:	7bfa      	ldrb	r2, [r7, #15]
 8002c2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c2c:	7bfa      	ldrb	r2, [r7, #15]
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
 8002c30:	b298      	uxth	r0, r3
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4413      	add	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	3344      	adds	r3, #68	; 0x44
 8002c40:	4602      	mov	r2, r0
 8002c42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c44:	7bfa      	ldrb	r2, [r7, #15]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	3340      	adds	r3, #64	; 0x40
 8002c54:	2200      	movs	r2, #0
 8002c56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c58:	7bfa      	ldrb	r2, [r7, #15]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	3348      	adds	r3, #72	; 0x48
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c6c:	7bfa      	ldrb	r2, [r7, #15]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	334c      	adds	r3, #76	; 0x4c
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c80:	7bfa      	ldrb	r2, [r7, #15]
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4413      	add	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	3354      	adds	r3, #84	; 0x54
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
 8002c96:	3301      	adds	r3, #1
 8002c98:	73fb      	strb	r3, [r7, #15]
 8002c9a:	7bfa      	ldrb	r2, [r7, #15]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d3af      	bcc.n	8002c04 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	73fb      	strb	r3, [r7, #15]
 8002ca8:	e044      	b.n	8002d34 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002caa:	7bfa      	ldrb	r2, [r7, #15]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002cc0:	7bfa      	ldrb	r2, [r7, #15]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002cd2:	7bfa      	ldrb	r2, [r7, #15]
 8002cd4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cd6:	7bfa      	ldrb	r2, [r7, #15]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	4413      	add	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cec:	7bfa      	ldrb	r2, [r7, #15]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d02:	7bfa      	ldrb	r2, [r7, #15]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d18:	7bfa      	ldrb	r2, [r7, #15]
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4413      	add	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
 8002d30:	3301      	adds	r3, #1
 8002d32:	73fb      	strb	r3, [r7, #15]
 8002d34:	7bfa      	ldrb	r2, [r7, #15]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d3b5      	bcc.n	8002caa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	603b      	str	r3, [r7, #0]
 8002d44:	687e      	ldr	r6, [r7, #4]
 8002d46:	466d      	mov	r5, sp
 8002d48:	f106 0410 	add.w	r4, r6, #16
 8002d4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d58:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d5c:	1d33      	adds	r3, r6, #4
 8002d5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d60:	6838      	ldr	r0, [r7, #0]
 8002d62:	f002 ffa1 	bl	8005ca8 <USB_DevInit>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d005      	beq.n	8002d78 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e014      	b.n	8002da2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d102      	bne.n	8002d96 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f80b 	bl	8002dac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f003 f95f 	bl	800605e <USB_DevDisconnect>

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002dac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002dda:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <HAL_PCDEx_ActivateLPM+0x44>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	10000003 	.word	0x10000003

08002df4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002df8:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a04      	ldr	r2, [pc, #16]	; (8002e10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e02:	6013      	str	r3, [r2, #0]
}
 8002e04:	bf00      	nop
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	40007000 	.word	0x40007000

08002e14 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e1e:	4b23      	ldr	r3, [pc, #140]	; (8002eac <HAL_PWREx_EnableOverDrive+0x98>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	4a22      	ldr	r2, [pc, #136]	; (8002eac <HAL_PWREx_EnableOverDrive+0x98>)
 8002e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e28:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2a:	4b20      	ldr	r3, [pc, #128]	; (8002eac <HAL_PWREx_EnableOverDrive+0x98>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e32:	603b      	str	r3, [r7, #0]
 8002e34:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e36:	4b1e      	ldr	r3, [pc, #120]	; (8002eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a1d      	ldr	r2, [pc, #116]	; (8002eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e40:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e42:	f7fe fb8d 	bl	8001560 <HAL_GetTick>
 8002e46:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e48:	e009      	b.n	8002e5e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e4a:	f7fe fb89 	bl	8001560 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e58:	d901      	bls.n	8002e5e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e022      	b.n	8002ea4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e5e:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e6a:	d1ee      	bne.n	8002e4a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e6c:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a0f      	ldr	r2, [pc, #60]	; (8002eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e76:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e78:	f7fe fb72 	bl	8001560 <HAL_GetTick>
 8002e7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e7e:	e009      	b.n	8002e94 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e80:	f7fe fb6e 	bl	8001560 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e8e:	d901      	bls.n	8002e94 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e007      	b.n	8002ea4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e94:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ea0:	d1ee      	bne.n	8002e80 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	40007000 	.word	0x40007000

08002eb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e29b      	b.n	8003402 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 8087 	beq.w	8002fe6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ed8:	4b96      	ldr	r3, [pc, #600]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 030c 	and.w	r3, r3, #12
 8002ee0:	2b04      	cmp	r3, #4
 8002ee2:	d00c      	beq.n	8002efe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ee4:	4b93      	ldr	r3, [pc, #588]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 030c 	and.w	r3, r3, #12
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d112      	bne.n	8002f16 <HAL_RCC_OscConfig+0x62>
 8002ef0:	4b90      	ldr	r3, [pc, #576]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ef8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002efc:	d10b      	bne.n	8002f16 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002efe:	4b8d      	ldr	r3, [pc, #564]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d06c      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x130>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d168      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e275      	b.n	8003402 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f1e:	d106      	bne.n	8002f2e <HAL_RCC_OscConfig+0x7a>
 8002f20:	4b84      	ldr	r3, [pc, #528]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a83      	ldr	r2, [pc, #524]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	e02e      	b.n	8002f8c <HAL_RCC_OscConfig+0xd8>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10c      	bne.n	8002f50 <HAL_RCC_OscConfig+0x9c>
 8002f36:	4b7f      	ldr	r3, [pc, #508]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a7e      	ldr	r2, [pc, #504]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	4b7c      	ldr	r3, [pc, #496]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a7b      	ldr	r2, [pc, #492]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002f48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	e01d      	b.n	8002f8c <HAL_RCC_OscConfig+0xd8>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f58:	d10c      	bne.n	8002f74 <HAL_RCC_OscConfig+0xc0>
 8002f5a:	4b76      	ldr	r3, [pc, #472]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a75      	ldr	r2, [pc, #468]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	4b73      	ldr	r3, [pc, #460]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a72      	ldr	r2, [pc, #456]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	e00b      	b.n	8002f8c <HAL_RCC_OscConfig+0xd8>
 8002f74:	4b6f      	ldr	r3, [pc, #444]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a6e      	ldr	r2, [pc, #440]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f7e:	6013      	str	r3, [r2, #0]
 8002f80:	4b6c      	ldr	r3, [pc, #432]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a6b      	ldr	r2, [pc, #428]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d013      	beq.n	8002fbc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f94:	f7fe fae4 	bl	8001560 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f9c:	f7fe fae0 	bl	8001560 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b64      	cmp	r3, #100	; 0x64
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e229      	b.n	8003402 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fae:	4b61      	ldr	r3, [pc, #388]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0f0      	beq.n	8002f9c <HAL_RCC_OscConfig+0xe8>
 8002fba:	e014      	b.n	8002fe6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fbc:	f7fe fad0 	bl	8001560 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fc4:	f7fe facc 	bl	8001560 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b64      	cmp	r3, #100	; 0x64
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e215      	b.n	8003402 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fd6:	4b57      	ldr	r3, [pc, #348]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f0      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x110>
 8002fe2:	e000      	b.n	8002fe6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d069      	beq.n	80030c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ff2:	4b50      	ldr	r3, [pc, #320]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00b      	beq.n	8003016 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ffe:	4b4d      	ldr	r3, [pc, #308]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 030c 	and.w	r3, r3, #12
 8003006:	2b08      	cmp	r3, #8
 8003008:	d11c      	bne.n	8003044 <HAL_RCC_OscConfig+0x190>
 800300a:	4b4a      	ldr	r3, [pc, #296]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d116      	bne.n	8003044 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003016:	4b47      	ldr	r3, [pc, #284]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d005      	beq.n	800302e <HAL_RCC_OscConfig+0x17a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d001      	beq.n	800302e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e1e9      	b.n	8003402 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800302e:	4b41      	ldr	r3, [pc, #260]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	493d      	ldr	r1, [pc, #244]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 800303e:	4313      	orrs	r3, r2
 8003040:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003042:	e040      	b.n	80030c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d023      	beq.n	8003094 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800304c:	4b39      	ldr	r3, [pc, #228]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a38      	ldr	r2, [pc, #224]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003058:	f7fe fa82 	bl	8001560 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003060:	f7fe fa7e 	bl	8001560 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e1c7      	b.n	8003402 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003072:	4b30      	ldr	r3, [pc, #192]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d0f0      	beq.n	8003060 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307e:	4b2d      	ldr	r3, [pc, #180]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	4929      	ldr	r1, [pc, #164]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 800308e:	4313      	orrs	r3, r2
 8003090:	600b      	str	r3, [r1, #0]
 8003092:	e018      	b.n	80030c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003094:	4b27      	ldr	r3, [pc, #156]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a26      	ldr	r2, [pc, #152]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 800309a:	f023 0301 	bic.w	r3, r3, #1
 800309e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a0:	f7fe fa5e 	bl	8001560 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a8:	f7fe fa5a 	bl	8001560 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e1a3      	b.n	8003402 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ba:	4b1e      	ldr	r3, [pc, #120]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f0      	bne.n	80030a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d038      	beq.n	8003144 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d019      	beq.n	800310e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030da:	4b16      	ldr	r3, [pc, #88]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 80030dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030de:	4a15      	ldr	r2, [pc, #84]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e6:	f7fe fa3b 	bl	8001560 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ee:	f7fe fa37 	bl	8001560 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e180      	b.n	8003402 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003100:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8003102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0f0      	beq.n	80030ee <HAL_RCC_OscConfig+0x23a>
 800310c:	e01a      	b.n	8003144 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800310e:	4b09      	ldr	r3, [pc, #36]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8003110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003112:	4a08      	ldr	r2, [pc, #32]	; (8003134 <HAL_RCC_OscConfig+0x280>)
 8003114:	f023 0301 	bic.w	r3, r3, #1
 8003118:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800311a:	f7fe fa21 	bl	8001560 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003120:	e00a      	b.n	8003138 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003122:	f7fe fa1d 	bl	8001560 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d903      	bls.n	8003138 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e166      	b.n	8003402 <HAL_RCC_OscConfig+0x54e>
 8003134:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003138:	4b92      	ldr	r3, [pc, #584]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 800313a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1ee      	bne.n	8003122 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 80a4 	beq.w	800329a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003152:	4b8c      	ldr	r3, [pc, #560]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10d      	bne.n	800317a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800315e:	4b89      	ldr	r3, [pc, #548]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	4a88      	ldr	r2, [pc, #544]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 8003164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003168:	6413      	str	r3, [r2, #64]	; 0x40
 800316a:	4b86      	ldr	r3, [pc, #536]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003172:	60bb      	str	r3, [r7, #8]
 8003174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003176:	2301      	movs	r3, #1
 8003178:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800317a:	4b83      	ldr	r3, [pc, #524]	; (8003388 <HAL_RCC_OscConfig+0x4d4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003182:	2b00      	cmp	r3, #0
 8003184:	d118      	bne.n	80031b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003186:	4b80      	ldr	r3, [pc, #512]	; (8003388 <HAL_RCC_OscConfig+0x4d4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a7f      	ldr	r2, [pc, #508]	; (8003388 <HAL_RCC_OscConfig+0x4d4>)
 800318c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003192:	f7fe f9e5 	bl	8001560 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800319a:	f7fe f9e1 	bl	8001560 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b64      	cmp	r3, #100	; 0x64
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e12a      	b.n	8003402 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031ac:	4b76      	ldr	r3, [pc, #472]	; (8003388 <HAL_RCC_OscConfig+0x4d4>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0f0      	beq.n	800319a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d106      	bne.n	80031ce <HAL_RCC_OscConfig+0x31a>
 80031c0:	4b70      	ldr	r3, [pc, #448]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 80031c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c4:	4a6f      	ldr	r2, [pc, #444]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	6713      	str	r3, [r2, #112]	; 0x70
 80031cc:	e02d      	b.n	800322a <HAL_RCC_OscConfig+0x376>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10c      	bne.n	80031f0 <HAL_RCC_OscConfig+0x33c>
 80031d6:	4b6b      	ldr	r3, [pc, #428]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 80031d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031da:	4a6a      	ldr	r2, [pc, #424]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 80031dc:	f023 0301 	bic.w	r3, r3, #1
 80031e0:	6713      	str	r3, [r2, #112]	; 0x70
 80031e2:	4b68      	ldr	r3, [pc, #416]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 80031e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e6:	4a67      	ldr	r2, [pc, #412]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 80031e8:	f023 0304 	bic.w	r3, r3, #4
 80031ec:	6713      	str	r3, [r2, #112]	; 0x70
 80031ee:	e01c      	b.n	800322a <HAL_RCC_OscConfig+0x376>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	2b05      	cmp	r3, #5
 80031f6:	d10c      	bne.n	8003212 <HAL_RCC_OscConfig+0x35e>
 80031f8:	4b62      	ldr	r3, [pc, #392]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 80031fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fc:	4a61      	ldr	r2, [pc, #388]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 80031fe:	f043 0304 	orr.w	r3, r3, #4
 8003202:	6713      	str	r3, [r2, #112]	; 0x70
 8003204:	4b5f      	ldr	r3, [pc, #380]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 8003206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003208:	4a5e      	ldr	r2, [pc, #376]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	6713      	str	r3, [r2, #112]	; 0x70
 8003210:	e00b      	b.n	800322a <HAL_RCC_OscConfig+0x376>
 8003212:	4b5c      	ldr	r3, [pc, #368]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 8003214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003216:	4a5b      	ldr	r2, [pc, #364]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 8003218:	f023 0301 	bic.w	r3, r3, #1
 800321c:	6713      	str	r3, [r2, #112]	; 0x70
 800321e:	4b59      	ldr	r3, [pc, #356]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 8003220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003222:	4a58      	ldr	r2, [pc, #352]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 8003224:	f023 0304 	bic.w	r3, r3, #4
 8003228:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d015      	beq.n	800325e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003232:	f7fe f995 	bl	8001560 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003238:	e00a      	b.n	8003250 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800323a:	f7fe f991 	bl	8001560 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	f241 3288 	movw	r2, #5000	; 0x1388
 8003248:	4293      	cmp	r3, r2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e0d8      	b.n	8003402 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003250:	4b4c      	ldr	r3, [pc, #304]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 8003252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0ee      	beq.n	800323a <HAL_RCC_OscConfig+0x386>
 800325c:	e014      	b.n	8003288 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800325e:	f7fe f97f 	bl	8001560 <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003264:	e00a      	b.n	800327c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003266:	f7fe f97b 	bl	8001560 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	f241 3288 	movw	r2, #5000	; 0x1388
 8003274:	4293      	cmp	r3, r2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e0c2      	b.n	8003402 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800327c:	4b41      	ldr	r3, [pc, #260]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 800327e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1ee      	bne.n	8003266 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003288:	7dfb      	ldrb	r3, [r7, #23]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d105      	bne.n	800329a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800328e:	4b3d      	ldr	r3, [pc, #244]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	4a3c      	ldr	r2, [pc, #240]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 8003294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003298:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 80ae 	beq.w	8003400 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032a4:	4b37      	ldr	r3, [pc, #220]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 030c 	and.w	r3, r3, #12
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d06d      	beq.n	800338c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d14b      	bne.n	8003350 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b8:	4b32      	ldr	r3, [pc, #200]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a31      	ldr	r2, [pc, #196]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 80032be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fe f94c 	bl	8001560 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032cc:	f7fe f948 	bl	8001560 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e091      	b.n	8003402 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032de:	4b29      	ldr	r3, [pc, #164]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69da      	ldr	r2, [r3, #28]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	019b      	lsls	r3, r3, #6
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003300:	085b      	lsrs	r3, r3, #1
 8003302:	3b01      	subs	r3, #1
 8003304:	041b      	lsls	r3, r3, #16
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330c:	061b      	lsls	r3, r3, #24
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003314:	071b      	lsls	r3, r3, #28
 8003316:	491b      	ldr	r1, [pc, #108]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 8003318:	4313      	orrs	r3, r2
 800331a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800331c:	4b19      	ldr	r3, [pc, #100]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a18      	ldr	r2, [pc, #96]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 8003322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003328:	f7fe f91a 	bl	8001560 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003330:	f7fe f916 	bl	8001560 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e05f      	b.n	8003402 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003342:	4b10      	ldr	r3, [pc, #64]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0f0      	beq.n	8003330 <HAL_RCC_OscConfig+0x47c>
 800334e:	e057      	b.n	8003400 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003350:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a0b      	ldr	r2, [pc, #44]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 8003356:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800335a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335c:	f7fe f900 	bl	8001560 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003364:	f7fe f8fc 	bl	8001560 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e045      	b.n	8003402 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003376:	4b03      	ldr	r3, [pc, #12]	; (8003384 <HAL_RCC_OscConfig+0x4d0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1f0      	bne.n	8003364 <HAL_RCC_OscConfig+0x4b0>
 8003382:	e03d      	b.n	8003400 <HAL_RCC_OscConfig+0x54c>
 8003384:	40023800 	.word	0x40023800
 8003388:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800338c:	4b1f      	ldr	r3, [pc, #124]	; (800340c <HAL_RCC_OscConfig+0x558>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d030      	beq.n	80033fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d129      	bne.n	80033fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d122      	bne.n	80033fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033bc:	4013      	ands	r3, r2
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d119      	bne.n	80033fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d2:	085b      	lsrs	r3, r3, #1
 80033d4:	3b01      	subs	r3, #1
 80033d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033d8:	429a      	cmp	r2, r3
 80033da:	d10f      	bne.n	80033fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d107      	bne.n	80033fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d001      	beq.n	8003400 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e000      	b.n	8003402 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40023800 	.word	0x40023800

08003410 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800341a:	2300      	movs	r3, #0
 800341c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0d0      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003428:	4b6a      	ldr	r3, [pc, #424]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 030f 	and.w	r3, r3, #15
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	429a      	cmp	r2, r3
 8003434:	d910      	bls.n	8003458 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003436:	4b67      	ldr	r3, [pc, #412]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 020f 	bic.w	r2, r3, #15
 800343e:	4965      	ldr	r1, [pc, #404]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	4313      	orrs	r3, r2
 8003444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003446:	4b63      	ldr	r3, [pc, #396]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d001      	beq.n	8003458 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e0b8      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d020      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003470:	4b59      	ldr	r3, [pc, #356]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	4a58      	ldr	r2, [pc, #352]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003476:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800347a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0308 	and.w	r3, r3, #8
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003488:	4b53      	ldr	r3, [pc, #332]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	4a52      	ldr	r2, [pc, #328]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 800348e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003492:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003494:	4b50      	ldr	r3, [pc, #320]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	494d      	ldr	r1, [pc, #308]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d040      	beq.n	8003534 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d107      	bne.n	80034ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ba:	4b47      	ldr	r3, [pc, #284]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d115      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e07f      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d107      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d2:	4b41      	ldr	r3, [pc, #260]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d109      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e073      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e2:	4b3d      	ldr	r3, [pc, #244]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e06b      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034f2:	4b39      	ldr	r3, [pc, #228]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f023 0203 	bic.w	r2, r3, #3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	4936      	ldr	r1, [pc, #216]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003500:	4313      	orrs	r3, r2
 8003502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003504:	f7fe f82c 	bl	8001560 <HAL_GetTick>
 8003508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350a:	e00a      	b.n	8003522 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800350c:	f7fe f828 	bl	8001560 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	f241 3288 	movw	r2, #5000	; 0x1388
 800351a:	4293      	cmp	r3, r2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e053      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003522:	4b2d      	ldr	r3, [pc, #180]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 020c 	and.w	r2, r3, #12
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	429a      	cmp	r2, r3
 8003532:	d1eb      	bne.n	800350c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003534:	4b27      	ldr	r3, [pc, #156]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 030f 	and.w	r3, r3, #15
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d210      	bcs.n	8003564 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003542:	4b24      	ldr	r3, [pc, #144]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f023 020f 	bic.w	r2, r3, #15
 800354a:	4922      	ldr	r1, [pc, #136]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	4313      	orrs	r3, r2
 8003550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003552:	4b20      	ldr	r3, [pc, #128]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	429a      	cmp	r2, r3
 800355e:	d001      	beq.n	8003564 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e032      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003570:	4b19      	ldr	r3, [pc, #100]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4916      	ldr	r1, [pc, #88]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 800357e:	4313      	orrs	r3, r2
 8003580:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	2b00      	cmp	r3, #0
 800358c:	d009      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800358e:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	490e      	ldr	r1, [pc, #56]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035a2:	f000 f821 	bl	80035e8 <HAL_RCC_GetSysClockFreq>
 80035a6:	4602      	mov	r2, r0
 80035a8:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	091b      	lsrs	r3, r3, #4
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	490a      	ldr	r1, [pc, #40]	; (80035dc <HAL_RCC_ClockConfig+0x1cc>)
 80035b4:	5ccb      	ldrb	r3, [r1, r3]
 80035b6:	fa22 f303 	lsr.w	r3, r2, r3
 80035ba:	4a09      	ldr	r2, [pc, #36]	; (80035e0 <HAL_RCC_ClockConfig+0x1d0>)
 80035bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035be:	4b09      	ldr	r3, [pc, #36]	; (80035e4 <HAL_RCC_ClockConfig+0x1d4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fd ff88 	bl	80014d8 <HAL_InitTick>

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40023c00 	.word	0x40023c00
 80035d8:	40023800 	.word	0x40023800
 80035dc:	08006a9c 	.word	0x08006a9c
 80035e0:	20000000 	.word	0x20000000
 80035e4:	20000004 	.word	0x20000004

080035e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035ec:	b094      	sub	sp, #80	; 0x50
 80035ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	647b      	str	r3, [r7, #68]	; 0x44
 80035f4:	2300      	movs	r3, #0
 80035f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035f8:	2300      	movs	r3, #0
 80035fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80035fc:	2300      	movs	r3, #0
 80035fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003600:	4b79      	ldr	r3, [pc, #484]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 030c 	and.w	r3, r3, #12
 8003608:	2b08      	cmp	r3, #8
 800360a:	d00d      	beq.n	8003628 <HAL_RCC_GetSysClockFreq+0x40>
 800360c:	2b08      	cmp	r3, #8
 800360e:	f200 80e1 	bhi.w	80037d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <HAL_RCC_GetSysClockFreq+0x34>
 8003616:	2b04      	cmp	r3, #4
 8003618:	d003      	beq.n	8003622 <HAL_RCC_GetSysClockFreq+0x3a>
 800361a:	e0db      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800361c:	4b73      	ldr	r3, [pc, #460]	; (80037ec <HAL_RCC_GetSysClockFreq+0x204>)
 800361e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003620:	e0db      	b.n	80037da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003622:	4b73      	ldr	r3, [pc, #460]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003624:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003626:	e0d8      	b.n	80037da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003628:	4b6f      	ldr	r3, [pc, #444]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003630:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003632:	4b6d      	ldr	r3, [pc, #436]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d063      	beq.n	8003706 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800363e:	4b6a      	ldr	r3, [pc, #424]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	099b      	lsrs	r3, r3, #6
 8003644:	2200      	movs	r2, #0
 8003646:	63bb      	str	r3, [r7, #56]	; 0x38
 8003648:	63fa      	str	r2, [r7, #60]	; 0x3c
 800364a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003650:	633b      	str	r3, [r7, #48]	; 0x30
 8003652:	2300      	movs	r3, #0
 8003654:	637b      	str	r3, [r7, #52]	; 0x34
 8003656:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800365a:	4622      	mov	r2, r4
 800365c:	462b      	mov	r3, r5
 800365e:	f04f 0000 	mov.w	r0, #0
 8003662:	f04f 0100 	mov.w	r1, #0
 8003666:	0159      	lsls	r1, r3, #5
 8003668:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800366c:	0150      	lsls	r0, r2, #5
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4621      	mov	r1, r4
 8003674:	1a51      	subs	r1, r2, r1
 8003676:	6139      	str	r1, [r7, #16]
 8003678:	4629      	mov	r1, r5
 800367a:	eb63 0301 	sbc.w	r3, r3, r1
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800368c:	4659      	mov	r1, fp
 800368e:	018b      	lsls	r3, r1, #6
 8003690:	4651      	mov	r1, sl
 8003692:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003696:	4651      	mov	r1, sl
 8003698:	018a      	lsls	r2, r1, #6
 800369a:	4651      	mov	r1, sl
 800369c:	ebb2 0801 	subs.w	r8, r2, r1
 80036a0:	4659      	mov	r1, fp
 80036a2:	eb63 0901 	sbc.w	r9, r3, r1
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	f04f 0300 	mov.w	r3, #0
 80036ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036ba:	4690      	mov	r8, r2
 80036bc:	4699      	mov	r9, r3
 80036be:	4623      	mov	r3, r4
 80036c0:	eb18 0303 	adds.w	r3, r8, r3
 80036c4:	60bb      	str	r3, [r7, #8]
 80036c6:	462b      	mov	r3, r5
 80036c8:	eb49 0303 	adc.w	r3, r9, r3
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	f04f 0200 	mov.w	r2, #0
 80036d2:	f04f 0300 	mov.w	r3, #0
 80036d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036da:	4629      	mov	r1, r5
 80036dc:	024b      	lsls	r3, r1, #9
 80036de:	4621      	mov	r1, r4
 80036e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036e4:	4621      	mov	r1, r4
 80036e6:	024a      	lsls	r2, r1, #9
 80036e8:	4610      	mov	r0, r2
 80036ea:	4619      	mov	r1, r3
 80036ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036ee:	2200      	movs	r2, #0
 80036f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80036f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036f8:	f7fc fdfa 	bl	80002f0 <__aeabi_uldivmod>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4613      	mov	r3, r2
 8003702:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003704:	e058      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003706:	4b38      	ldr	r3, [pc, #224]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	099b      	lsrs	r3, r3, #6
 800370c:	2200      	movs	r2, #0
 800370e:	4618      	mov	r0, r3
 8003710:	4611      	mov	r1, r2
 8003712:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003716:	623b      	str	r3, [r7, #32]
 8003718:	2300      	movs	r3, #0
 800371a:	627b      	str	r3, [r7, #36]	; 0x24
 800371c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003720:	4642      	mov	r2, r8
 8003722:	464b      	mov	r3, r9
 8003724:	f04f 0000 	mov.w	r0, #0
 8003728:	f04f 0100 	mov.w	r1, #0
 800372c:	0159      	lsls	r1, r3, #5
 800372e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003732:	0150      	lsls	r0, r2, #5
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	4641      	mov	r1, r8
 800373a:	ebb2 0a01 	subs.w	sl, r2, r1
 800373e:	4649      	mov	r1, r9
 8003740:	eb63 0b01 	sbc.w	fp, r3, r1
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	f04f 0300 	mov.w	r3, #0
 800374c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003750:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003754:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003758:	ebb2 040a 	subs.w	r4, r2, sl
 800375c:	eb63 050b 	sbc.w	r5, r3, fp
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	00eb      	lsls	r3, r5, #3
 800376a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800376e:	00e2      	lsls	r2, r4, #3
 8003770:	4614      	mov	r4, r2
 8003772:	461d      	mov	r5, r3
 8003774:	4643      	mov	r3, r8
 8003776:	18e3      	adds	r3, r4, r3
 8003778:	603b      	str	r3, [r7, #0]
 800377a:	464b      	mov	r3, r9
 800377c:	eb45 0303 	adc.w	r3, r5, r3
 8003780:	607b      	str	r3, [r7, #4]
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800378e:	4629      	mov	r1, r5
 8003790:	028b      	lsls	r3, r1, #10
 8003792:	4621      	mov	r1, r4
 8003794:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003798:	4621      	mov	r1, r4
 800379a:	028a      	lsls	r2, r1, #10
 800379c:	4610      	mov	r0, r2
 800379e:	4619      	mov	r1, r3
 80037a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037a2:	2200      	movs	r2, #0
 80037a4:	61bb      	str	r3, [r7, #24]
 80037a6:	61fa      	str	r2, [r7, #28]
 80037a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037ac:	f7fc fda0 	bl	80002f0 <__aeabi_uldivmod>
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	4613      	mov	r3, r2
 80037b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80037b8:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	0c1b      	lsrs	r3, r3, #16
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	3301      	adds	r3, #1
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80037c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037d2:	e002      	b.n	80037da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037d4:	4b05      	ldr	r3, [pc, #20]	; (80037ec <HAL_RCC_GetSysClockFreq+0x204>)
 80037d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3750      	adds	r7, #80	; 0x50
 80037e0:	46bd      	mov	sp, r7
 80037e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037e6:	bf00      	nop
 80037e8:	40023800 	.word	0x40023800
 80037ec:	00f42400 	.word	0x00f42400
 80037f0:	007a1200 	.word	0x007a1200

080037f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037f8:	4b03      	ldr	r3, [pc, #12]	; (8003808 <HAL_RCC_GetHCLKFreq+0x14>)
 80037fa:	681b      	ldr	r3, [r3, #0]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	20000000 	.word	0x20000000

0800380c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003810:	f7ff fff0 	bl	80037f4 <HAL_RCC_GetHCLKFreq>
 8003814:	4602      	mov	r2, r0
 8003816:	4b05      	ldr	r3, [pc, #20]	; (800382c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	0a9b      	lsrs	r3, r3, #10
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	4903      	ldr	r1, [pc, #12]	; (8003830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003822:	5ccb      	ldrb	r3, [r1, r3]
 8003824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003828:	4618      	mov	r0, r3
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40023800 	.word	0x40023800
 8003830:	08006aac 	.word	0x08006aac

08003834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003838:	f7ff ffdc 	bl	80037f4 <HAL_RCC_GetHCLKFreq>
 800383c:	4602      	mov	r2, r0
 800383e:	4b05      	ldr	r3, [pc, #20]	; (8003854 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	0b5b      	lsrs	r3, r3, #13
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	4903      	ldr	r1, [pc, #12]	; (8003858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800384a:	5ccb      	ldrb	r3, [r1, r3]
 800384c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003850:	4618      	mov	r0, r3
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40023800 	.word	0x40023800
 8003858:	08006aac 	.word	0x08006aac

0800385c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b088      	sub	sp, #32
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003864:	2300      	movs	r3, #0
 8003866:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003868:	2300      	movs	r3, #0
 800386a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800386c:	2300      	movs	r3, #0
 800386e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003870:	2300      	movs	r3, #0
 8003872:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003874:	2300      	movs	r3, #0
 8003876:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b00      	cmp	r3, #0
 8003882:	d012      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003884:	4b69      	ldr	r3, [pc, #420]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	4a68      	ldr	r2, [pc, #416]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800388a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800388e:	6093      	str	r3, [r2, #8]
 8003890:	4b66      	ldr	r3, [pc, #408]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003898:	4964      	ldr	r1, [pc, #400]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800389a:	4313      	orrs	r3, r2
 800389c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80038a6:	2301      	movs	r3, #1
 80038a8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d017      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038b6:	4b5d      	ldr	r3, [pc, #372]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c4:	4959      	ldr	r1, [pc, #356]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038d4:	d101      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80038d6:	2301      	movs	r3, #1
 80038d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80038e2:	2301      	movs	r3, #1
 80038e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d017      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038f2:	4b4e      	ldr	r3, [pc, #312]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	494a      	ldr	r1, [pc, #296]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003910:	d101      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003912:	2301      	movs	r3, #1
 8003914:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800391e:	2301      	movs	r3, #1
 8003920:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800392e:	2301      	movs	r3, #1
 8003930:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 808b 	beq.w	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003940:	4b3a      	ldr	r3, [pc, #232]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	4a39      	ldr	r2, [pc, #228]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800394a:	6413      	str	r3, [r2, #64]	; 0x40
 800394c:	4b37      	ldr	r3, [pc, #220]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800394e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003958:	4b35      	ldr	r3, [pc, #212]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a34      	ldr	r2, [pc, #208]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800395e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003962:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003964:	f7fd fdfc 	bl	8001560 <HAL_GetTick>
 8003968:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800396a:	e008      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800396c:	f7fd fdf8 	bl	8001560 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b64      	cmp	r3, #100	; 0x64
 8003978:	d901      	bls.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e38f      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800397e:	4b2c      	ldr	r3, [pc, #176]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f0      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800398a:	4b28      	ldr	r3, [pc, #160]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800398c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003992:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d035      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d02e      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039a8:	4b20      	ldr	r3, [pc, #128]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039b2:	4b1e      	ldr	r3, [pc, #120]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b6:	4a1d      	ldr	r2, [pc, #116]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039bc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039be:	4b1b      	ldr	r3, [pc, #108]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c2:	4a1a      	ldr	r2, [pc, #104]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80039ca:	4a18      	ldr	r2, [pc, #96]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039d0:	4b16      	ldr	r3, [pc, #88]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d114      	bne.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039dc:	f7fd fdc0 	bl	8001560 <HAL_GetTick>
 80039e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e2:	e00a      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039e4:	f7fd fdbc 	bl	8001560 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d901      	bls.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e351      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039fa:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0ee      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a12:	d111      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a14:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a20:	4b04      	ldr	r3, [pc, #16]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a22:	400b      	ands	r3, r1
 8003a24:	4901      	ldr	r1, [pc, #4]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	608b      	str	r3, [r1, #8]
 8003a2a:	e00b      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	40007000 	.word	0x40007000
 8003a34:	0ffffcff 	.word	0x0ffffcff
 8003a38:	4bac      	ldr	r3, [pc, #688]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	4aab      	ldr	r2, [pc, #684]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a3e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a42:	6093      	str	r3, [r2, #8]
 8003a44:	4ba9      	ldr	r3, [pc, #676]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a50:	49a6      	ldr	r1, [pc, #664]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0310 	and.w	r3, r3, #16
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d010      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a62:	4ba2      	ldr	r3, [pc, #648]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a68:	4aa0      	ldr	r2, [pc, #640]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a72:	4b9e      	ldr	r3, [pc, #632]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a74:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7c:	499b      	ldr	r1, [pc, #620]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a90:	4b96      	ldr	r3, [pc, #600]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a9e:	4993      	ldr	r1, [pc, #588]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ab2:	4b8e      	ldr	r3, [pc, #568]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ac0:	498a      	ldr	r1, [pc, #552]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ad4:	4b85      	ldr	r3, [pc, #532]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ada:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ae2:	4982      	ldr	r1, [pc, #520]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003af6:	4b7d      	ldr	r3, [pc, #500]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b04:	4979      	ldr	r1, [pc, #484]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00a      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b18:	4b74      	ldr	r3, [pc, #464]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1e:	f023 0203 	bic.w	r2, r3, #3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b26:	4971      	ldr	r1, [pc, #452]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00a      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b3a:	4b6c      	ldr	r3, [pc, #432]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b40:	f023 020c 	bic.w	r2, r3, #12
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b48:	4968      	ldr	r1, [pc, #416]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00a      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b5c:	4b63      	ldr	r3, [pc, #396]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b62:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6a:	4960      	ldr	r1, [pc, #384]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b7e:	4b5b      	ldr	r3, [pc, #364]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b84:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b8c:	4957      	ldr	r1, [pc, #348]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00a      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ba0:	4b52      	ldr	r3, [pc, #328]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bae:	494f      	ldr	r1, [pc, #316]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003bc2:	4b4a      	ldr	r3, [pc, #296]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd0:	4946      	ldr	r1, [pc, #280]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00a      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003be4:	4b41      	ldr	r3, [pc, #260]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf2:	493e      	ldr	r1, [pc, #248]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00a      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003c06:	4b39      	ldr	r3, [pc, #228]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c14:	4935      	ldr	r1, [pc, #212]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00a      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c28:	4b30      	ldr	r3, [pc, #192]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c36:	492d      	ldr	r1, [pc, #180]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d011      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c4a:	4b28      	ldr	r3, [pc, #160]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c50:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c58:	4924      	ldr	r1, [pc, #144]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c68:	d101      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c8a:	4b18      	ldr	r3, [pc, #96]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c90:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c98:	4914      	ldr	r1, [pc, #80]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00b      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003cac:	4b0f      	ldr	r3, [pc, #60]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cbc:	490b      	ldr	r1, [pc, #44]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00f      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003cd0:	4b06      	ldr	r3, [pc, #24]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ce0:	4902      	ldr	r1, [pc, #8]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ce8:	e002      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003cea:	bf00      	nop
 8003cec:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00b      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cfc:	4b8a      	ldr	r3, [pc, #552]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0c:	4986      	ldr	r1, [pc, #536]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00b      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003d20:	4b81      	ldr	r3, [pc, #516]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d26:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d30:	497d      	ldr	r1, [pc, #500]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d006      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 80d6 	beq.w	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d4c:	4b76      	ldr	r3, [pc, #472]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a75      	ldr	r2, [pc, #468]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d58:	f7fd fc02 	bl	8001560 <HAL_GetTick>
 8003d5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d60:	f7fd fbfe 	bl	8001560 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b64      	cmp	r3, #100	; 0x64
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e195      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d72:	4b6d      	ldr	r3, [pc, #436]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f0      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d021      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d11d      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d92:	4b65      	ldr	r3, [pc, #404]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d98:	0c1b      	lsrs	r3, r3, #16
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003da0:	4b61      	ldr	r3, [pc, #388]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003da6:	0e1b      	lsrs	r3, r3, #24
 8003da8:	f003 030f 	and.w	r3, r3, #15
 8003dac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	019a      	lsls	r2, r3, #6
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	041b      	lsls	r3, r3, #16
 8003db8:	431a      	orrs	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	061b      	lsls	r3, r3, #24
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	071b      	lsls	r3, r3, #28
 8003dc6:	4958      	ldr	r1, [pc, #352]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d004      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003de2:	d00a      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d02e      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003df8:	d129      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003dfa:	4b4b      	ldr	r3, [pc, #300]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e00:	0c1b      	lsrs	r3, r3, #16
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e08:	4b47      	ldr	r3, [pc, #284]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e0e:	0f1b      	lsrs	r3, r3, #28
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	019a      	lsls	r2, r3, #6
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	041b      	lsls	r3, r3, #16
 8003e20:	431a      	orrs	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	061b      	lsls	r3, r3, #24
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	071b      	lsls	r3, r3, #28
 8003e2e:	493e      	ldr	r1, [pc, #248]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e36:	4b3c      	ldr	r3, [pc, #240]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e3c:	f023 021f 	bic.w	r2, r3, #31
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	3b01      	subs	r3, #1
 8003e46:	4938      	ldr	r1, [pc, #224]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d01d      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e5a:	4b33      	ldr	r3, [pc, #204]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e60:	0e1b      	lsrs	r3, r3, #24
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e68:	4b2f      	ldr	r3, [pc, #188]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e6e:	0f1b      	lsrs	r3, r3, #28
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	019a      	lsls	r2, r3, #6
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	041b      	lsls	r3, r3, #16
 8003e82:	431a      	orrs	r2, r3
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	061b      	lsls	r3, r3, #24
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	071b      	lsls	r3, r3, #28
 8003e8e:	4926      	ldr	r1, [pc, #152]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d011      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	019a      	lsls	r2, r3, #6
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	041b      	lsls	r3, r3, #16
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	061b      	lsls	r3, r3, #24
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	071b      	lsls	r3, r3, #28
 8003ebe:	491a      	ldr	r1, [pc, #104]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ec6:	4b18      	ldr	r3, [pc, #96]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a17      	ldr	r2, [pc, #92]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ecc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ed0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed2:	f7fd fb45 	bl	8001560 <HAL_GetTick>
 8003ed6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ed8:	e008      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003eda:	f7fd fb41 	bl	8001560 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b64      	cmp	r3, #100	; 0x64
 8003ee6:	d901      	bls.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e0d8      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003eec:	4b0e      	ldr	r3, [pc, #56]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0f0      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	f040 80ce 	bne.w	800409c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f00:	4b09      	ldr	r3, [pc, #36]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a08      	ldr	r2, [pc, #32]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f0c:	f7fd fb28 	bl	8001560 <HAL_GetTick>
 8003f10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f12:	e00b      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f14:	f7fd fb24 	bl	8001560 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b64      	cmp	r3, #100	; 0x64
 8003f20:	d904      	bls.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e0bb      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003f26:	bf00      	nop
 8003f28:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f2c:	4b5e      	ldr	r3, [pc, #376]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f38:	d0ec      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d009      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d02e      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d12a      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f62:	4b51      	ldr	r3, [pc, #324]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f68:	0c1b      	lsrs	r3, r3, #16
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f70:	4b4d      	ldr	r3, [pc, #308]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f76:	0f1b      	lsrs	r3, r3, #28
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	019a      	lsls	r2, r3, #6
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	041b      	lsls	r3, r3, #16
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	061b      	lsls	r3, r3, #24
 8003f90:	431a      	orrs	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	071b      	lsls	r3, r3, #28
 8003f96:	4944      	ldr	r1, [pc, #272]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f9e:	4b42      	ldr	r3, [pc, #264]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fa4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fac:	3b01      	subs	r3, #1
 8003fae:	021b      	lsls	r3, r3, #8
 8003fb0:	493d      	ldr	r1, [pc, #244]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d022      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fcc:	d11d      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fce:	4b36      	ldr	r3, [pc, #216]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd4:	0e1b      	lsrs	r3, r3, #24
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fdc:	4b32      	ldr	r3, [pc, #200]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe2:	0f1b      	lsrs	r3, r3, #28
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	019a      	lsls	r2, r3, #6
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	041b      	lsls	r3, r3, #16
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	061b      	lsls	r3, r3, #24
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	071b      	lsls	r3, r3, #28
 8004002:	4929      	ldr	r1, [pc, #164]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d028      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004016:	4b24      	ldr	r3, [pc, #144]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401c:	0e1b      	lsrs	r3, r3, #24
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004024:	4b20      	ldr	r3, [pc, #128]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402a:	0c1b      	lsrs	r3, r3, #16
 800402c:	f003 0303 	and.w	r3, r3, #3
 8004030:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	019a      	lsls	r2, r3, #6
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	041b      	lsls	r3, r3, #16
 800403c:	431a      	orrs	r2, r3
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	061b      	lsls	r3, r3, #24
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	071b      	lsls	r3, r3, #28
 800404a:	4917      	ldr	r1, [pc, #92]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800404c:	4313      	orrs	r3, r2
 800404e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004052:	4b15      	ldr	r3, [pc, #84]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004054:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004058:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	4911      	ldr	r1, [pc, #68]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004062:	4313      	orrs	r3, r2
 8004064:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004068:	4b0f      	ldr	r3, [pc, #60]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a0e      	ldr	r2, [pc, #56]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800406e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004072:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004074:	f7fd fa74 	bl	8001560 <HAL_GetTick>
 8004078:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800407a:	e008      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800407c:	f7fd fa70 	bl	8001560 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b64      	cmp	r3, #100	; 0x64
 8004088:	d901      	bls.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e007      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800408e:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004096:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800409a:	d1ef      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3720      	adds	r7, #32
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40023800 	.word	0x40023800

080040ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e049      	b.n	8004152 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d106      	bne.n	80040d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7fc ffda 	bl	800108c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3304      	adds	r3, #4
 80040e8:	4619      	mov	r1, r3
 80040ea:	4610      	mov	r0, r2
 80040ec:	f000 fbee 	bl	80048cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b082      	sub	sp, #8
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e049      	b.n	8004200 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d106      	bne.n	8004186 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f841 	bl	8004208 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2202      	movs	r2, #2
 800418a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	3304      	adds	r3, #4
 8004196:	4619      	mov	r1, r3
 8004198:	4610      	mov	r0, r2
 800419a:	f000 fb97 	bl	80048cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d109      	bne.n	8004240 <HAL_TIM_PWM_Start+0x24>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b01      	cmp	r3, #1
 8004236:	bf14      	ite	ne
 8004238:	2301      	movne	r3, #1
 800423a:	2300      	moveq	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	e03c      	b.n	80042ba <HAL_TIM_PWM_Start+0x9e>
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2b04      	cmp	r3, #4
 8004244:	d109      	bne.n	800425a <HAL_TIM_PWM_Start+0x3e>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b01      	cmp	r3, #1
 8004250:	bf14      	ite	ne
 8004252:	2301      	movne	r3, #1
 8004254:	2300      	moveq	r3, #0
 8004256:	b2db      	uxtb	r3, r3
 8004258:	e02f      	b.n	80042ba <HAL_TIM_PWM_Start+0x9e>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b08      	cmp	r3, #8
 800425e:	d109      	bne.n	8004274 <HAL_TIM_PWM_Start+0x58>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b01      	cmp	r3, #1
 800426a:	bf14      	ite	ne
 800426c:	2301      	movne	r3, #1
 800426e:	2300      	moveq	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	e022      	b.n	80042ba <HAL_TIM_PWM_Start+0x9e>
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	2b0c      	cmp	r3, #12
 8004278:	d109      	bne.n	800428e <HAL_TIM_PWM_Start+0x72>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b01      	cmp	r3, #1
 8004284:	bf14      	ite	ne
 8004286:	2301      	movne	r3, #1
 8004288:	2300      	moveq	r3, #0
 800428a:	b2db      	uxtb	r3, r3
 800428c:	e015      	b.n	80042ba <HAL_TIM_PWM_Start+0x9e>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b10      	cmp	r3, #16
 8004292:	d109      	bne.n	80042a8 <HAL_TIM_PWM_Start+0x8c>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b01      	cmp	r3, #1
 800429e:	bf14      	ite	ne
 80042a0:	2301      	movne	r3, #1
 80042a2:	2300      	moveq	r3, #0
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	e008      	b.n	80042ba <HAL_TIM_PWM_Start+0x9e>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	bf14      	ite	ne
 80042b4:	2301      	movne	r3, #1
 80042b6:	2300      	moveq	r3, #0
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e092      	b.n	80043e8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d104      	bne.n	80042d2 <HAL_TIM_PWM_Start+0xb6>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2202      	movs	r2, #2
 80042cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042d0:	e023      	b.n	800431a <HAL_TIM_PWM_Start+0xfe>
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b04      	cmp	r3, #4
 80042d6:	d104      	bne.n	80042e2 <HAL_TIM_PWM_Start+0xc6>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042e0:	e01b      	b.n	800431a <HAL_TIM_PWM_Start+0xfe>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b08      	cmp	r3, #8
 80042e6:	d104      	bne.n	80042f2 <HAL_TIM_PWM_Start+0xd6>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042f0:	e013      	b.n	800431a <HAL_TIM_PWM_Start+0xfe>
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2b0c      	cmp	r3, #12
 80042f6:	d104      	bne.n	8004302 <HAL_TIM_PWM_Start+0xe6>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2202      	movs	r2, #2
 80042fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004300:	e00b      	b.n	800431a <HAL_TIM_PWM_Start+0xfe>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b10      	cmp	r3, #16
 8004306:	d104      	bne.n	8004312 <HAL_TIM_PWM_Start+0xf6>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2202      	movs	r2, #2
 800430c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004310:	e003      	b.n	800431a <HAL_TIM_PWM_Start+0xfe>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2202      	movs	r2, #2
 8004316:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2201      	movs	r2, #1
 8004320:	6839      	ldr	r1, [r7, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f000 fe6a 	bl	8004ffc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a30      	ldr	r2, [pc, #192]	; (80043f0 <HAL_TIM_PWM_Start+0x1d4>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d004      	beq.n	800433c <HAL_TIM_PWM_Start+0x120>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a2f      	ldr	r2, [pc, #188]	; (80043f4 <HAL_TIM_PWM_Start+0x1d8>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d101      	bne.n	8004340 <HAL_TIM_PWM_Start+0x124>
 800433c:	2301      	movs	r3, #1
 800433e:	e000      	b.n	8004342 <HAL_TIM_PWM_Start+0x126>
 8004340:	2300      	movs	r3, #0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d007      	beq.n	8004356 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004354:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a25      	ldr	r2, [pc, #148]	; (80043f0 <HAL_TIM_PWM_Start+0x1d4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d022      	beq.n	80043a6 <HAL_TIM_PWM_Start+0x18a>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004368:	d01d      	beq.n	80043a6 <HAL_TIM_PWM_Start+0x18a>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a22      	ldr	r2, [pc, #136]	; (80043f8 <HAL_TIM_PWM_Start+0x1dc>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d018      	beq.n	80043a6 <HAL_TIM_PWM_Start+0x18a>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a20      	ldr	r2, [pc, #128]	; (80043fc <HAL_TIM_PWM_Start+0x1e0>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d013      	beq.n	80043a6 <HAL_TIM_PWM_Start+0x18a>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a1f      	ldr	r2, [pc, #124]	; (8004400 <HAL_TIM_PWM_Start+0x1e4>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d00e      	beq.n	80043a6 <HAL_TIM_PWM_Start+0x18a>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a19      	ldr	r2, [pc, #100]	; (80043f4 <HAL_TIM_PWM_Start+0x1d8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d009      	beq.n	80043a6 <HAL_TIM_PWM_Start+0x18a>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a1b      	ldr	r2, [pc, #108]	; (8004404 <HAL_TIM_PWM_Start+0x1e8>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d004      	beq.n	80043a6 <HAL_TIM_PWM_Start+0x18a>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a19      	ldr	r2, [pc, #100]	; (8004408 <HAL_TIM_PWM_Start+0x1ec>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d115      	bne.n	80043d2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	4b17      	ldr	r3, [pc, #92]	; (800440c <HAL_TIM_PWM_Start+0x1f0>)
 80043ae:	4013      	ands	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2b06      	cmp	r3, #6
 80043b6:	d015      	beq.n	80043e4 <HAL_TIM_PWM_Start+0x1c8>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043be:	d011      	beq.n	80043e4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0201 	orr.w	r2, r2, #1
 80043ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d0:	e008      	b.n	80043e4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f042 0201 	orr.w	r2, r2, #1
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	e000      	b.n	80043e6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40010000 	.word	0x40010000
 80043f4:	40010400 	.word	0x40010400
 80043f8:	40000400 	.word	0x40000400
 80043fc:	40000800 	.word	0x40000800
 8004400:	40000c00 	.word	0x40000c00
 8004404:	40014000 	.word	0x40014000
 8004408:	40001800 	.word	0x40001800
 800440c:	00010007 	.word	0x00010007

08004410 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2200      	movs	r2, #0
 8004420:	6839      	ldr	r1, [r7, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f000 fdea 	bl	8004ffc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a36      	ldr	r2, [pc, #216]	; (8004508 <HAL_TIM_PWM_Stop+0xf8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d004      	beq.n	800443c <HAL_TIM_PWM_Stop+0x2c>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a35      	ldr	r2, [pc, #212]	; (800450c <HAL_TIM_PWM_Stop+0xfc>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d101      	bne.n	8004440 <HAL_TIM_PWM_Stop+0x30>
 800443c:	2301      	movs	r3, #1
 800443e:	e000      	b.n	8004442 <HAL_TIM_PWM_Stop+0x32>
 8004440:	2300      	movs	r3, #0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d017      	beq.n	8004476 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6a1a      	ldr	r2, [r3, #32]
 800444c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004450:	4013      	ands	r3, r2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10f      	bne.n	8004476 <HAL_TIM_PWM_Stop+0x66>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6a1a      	ldr	r2, [r3, #32]
 800445c:	f240 4344 	movw	r3, #1092	; 0x444
 8004460:	4013      	ands	r3, r2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d107      	bne.n	8004476 <HAL_TIM_PWM_Stop+0x66>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004474:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6a1a      	ldr	r2, [r3, #32]
 800447c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004480:	4013      	ands	r3, r2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10f      	bne.n	80044a6 <HAL_TIM_PWM_Stop+0x96>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6a1a      	ldr	r2, [r3, #32]
 800448c:	f240 4344 	movw	r3, #1092	; 0x444
 8004490:	4013      	ands	r3, r2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d107      	bne.n	80044a6 <HAL_TIM_PWM_Stop+0x96>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0201 	bic.w	r2, r2, #1
 80044a4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d104      	bne.n	80044b6 <HAL_TIM_PWM_Stop+0xa6>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044b4:	e023      	b.n	80044fe <HAL_TIM_PWM_Stop+0xee>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b04      	cmp	r3, #4
 80044ba:	d104      	bne.n	80044c6 <HAL_TIM_PWM_Stop+0xb6>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044c4:	e01b      	b.n	80044fe <HAL_TIM_PWM_Stop+0xee>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d104      	bne.n	80044d6 <HAL_TIM_PWM_Stop+0xc6>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044d4:	e013      	b.n	80044fe <HAL_TIM_PWM_Stop+0xee>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b0c      	cmp	r3, #12
 80044da:	d104      	bne.n	80044e6 <HAL_TIM_PWM_Stop+0xd6>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044e4:	e00b      	b.n	80044fe <HAL_TIM_PWM_Stop+0xee>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b10      	cmp	r3, #16
 80044ea:	d104      	bne.n	80044f6 <HAL_TIM_PWM_Stop+0xe6>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044f4:	e003      	b.n	80044fe <HAL_TIM_PWM_Stop+0xee>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3708      	adds	r7, #8
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	40010000 	.word	0x40010000
 800450c:	40010400 	.word	0x40010400

08004510 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800451c:	2300      	movs	r3, #0
 800451e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004526:	2b01      	cmp	r3, #1
 8004528:	d101      	bne.n	800452e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800452a:	2302      	movs	r3, #2
 800452c:	e0ff      	b.n	800472e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b14      	cmp	r3, #20
 800453a:	f200 80f0 	bhi.w	800471e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800453e:	a201      	add	r2, pc, #4	; (adr r2, 8004544 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004544:	08004599 	.word	0x08004599
 8004548:	0800471f 	.word	0x0800471f
 800454c:	0800471f 	.word	0x0800471f
 8004550:	0800471f 	.word	0x0800471f
 8004554:	080045d9 	.word	0x080045d9
 8004558:	0800471f 	.word	0x0800471f
 800455c:	0800471f 	.word	0x0800471f
 8004560:	0800471f 	.word	0x0800471f
 8004564:	0800461b 	.word	0x0800461b
 8004568:	0800471f 	.word	0x0800471f
 800456c:	0800471f 	.word	0x0800471f
 8004570:	0800471f 	.word	0x0800471f
 8004574:	0800465b 	.word	0x0800465b
 8004578:	0800471f 	.word	0x0800471f
 800457c:	0800471f 	.word	0x0800471f
 8004580:	0800471f 	.word	0x0800471f
 8004584:	0800469d 	.word	0x0800469d
 8004588:	0800471f 	.word	0x0800471f
 800458c:	0800471f 	.word	0x0800471f
 8004590:	0800471f 	.word	0x0800471f
 8004594:	080046dd 	.word	0x080046dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68b9      	ldr	r1, [r7, #8]
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 fa34 	bl	8004a0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	699a      	ldr	r2, [r3, #24]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0208 	orr.w	r2, r2, #8
 80045b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	699a      	ldr	r2, [r3, #24]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0204 	bic.w	r2, r2, #4
 80045c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6999      	ldr	r1, [r3, #24]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	691a      	ldr	r2, [r3, #16]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	619a      	str	r2, [r3, #24]
      break;
 80045d6:	e0a5      	b.n	8004724 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68b9      	ldr	r1, [r7, #8]
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 fa86 	bl	8004af0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699a      	ldr	r2, [r3, #24]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699a      	ldr	r2, [r3, #24]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004602:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6999      	ldr	r1, [r3, #24]
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	021a      	lsls	r2, r3, #8
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	619a      	str	r2, [r3, #24]
      break;
 8004618:	e084      	b.n	8004724 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68b9      	ldr	r1, [r7, #8]
 8004620:	4618      	mov	r0, r3
 8004622:	f000 fadd 	bl	8004be0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69da      	ldr	r2, [r3, #28]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f042 0208 	orr.w	r2, r2, #8
 8004634:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	69da      	ldr	r2, [r3, #28]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0204 	bic.w	r2, r2, #4
 8004644:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	69d9      	ldr	r1, [r3, #28]
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	61da      	str	r2, [r3, #28]
      break;
 8004658:	e064      	b.n	8004724 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68b9      	ldr	r1, [r7, #8]
 8004660:	4618      	mov	r0, r3
 8004662:	f000 fb33 	bl	8004ccc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69da      	ldr	r2, [r3, #28]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004674:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69da      	ldr	r2, [r3, #28]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004684:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	69d9      	ldr	r1, [r3, #28]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	021a      	lsls	r2, r3, #8
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	61da      	str	r2, [r3, #28]
      break;
 800469a:	e043      	b.n	8004724 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68b9      	ldr	r1, [r7, #8]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fb6a 	bl	8004d7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0208 	orr.w	r2, r2, #8
 80046b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0204 	bic.w	r2, r2, #4
 80046c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	691a      	ldr	r2, [r3, #16]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80046da:	e023      	b.n	8004724 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68b9      	ldr	r1, [r7, #8]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fb9c 	bl	8004e20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004706:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	021a      	lsls	r2, r3, #8
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800471c:	e002      	b.n	8004724 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	75fb      	strb	r3, [r7, #23]
      break;
 8004722:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800472c:	7dfb      	ldrb	r3, [r7, #23]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop

08004738 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_TIM_ConfigClockSource+0x1c>
 8004750:	2302      	movs	r3, #2
 8004752:	e0b4      	b.n	80048be <HAL_TIM_ConfigClockSource+0x186>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	4b56      	ldr	r3, [pc, #344]	; (80048c8 <HAL_TIM_ConfigClockSource+0x190>)
 8004770:	4013      	ands	r3, r2
 8004772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800477a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800478c:	d03e      	beq.n	800480c <HAL_TIM_ConfigClockSource+0xd4>
 800478e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004792:	f200 8087 	bhi.w	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
 8004796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800479a:	f000 8086 	beq.w	80048aa <HAL_TIM_ConfigClockSource+0x172>
 800479e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a2:	d87f      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
 80047a4:	2b70      	cmp	r3, #112	; 0x70
 80047a6:	d01a      	beq.n	80047de <HAL_TIM_ConfigClockSource+0xa6>
 80047a8:	2b70      	cmp	r3, #112	; 0x70
 80047aa:	d87b      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
 80047ac:	2b60      	cmp	r3, #96	; 0x60
 80047ae:	d050      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x11a>
 80047b0:	2b60      	cmp	r3, #96	; 0x60
 80047b2:	d877      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
 80047b4:	2b50      	cmp	r3, #80	; 0x50
 80047b6:	d03c      	beq.n	8004832 <HAL_TIM_ConfigClockSource+0xfa>
 80047b8:	2b50      	cmp	r3, #80	; 0x50
 80047ba:	d873      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
 80047bc:	2b40      	cmp	r3, #64	; 0x40
 80047be:	d058      	beq.n	8004872 <HAL_TIM_ConfigClockSource+0x13a>
 80047c0:	2b40      	cmp	r3, #64	; 0x40
 80047c2:	d86f      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
 80047c4:	2b30      	cmp	r3, #48	; 0x30
 80047c6:	d064      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0x15a>
 80047c8:	2b30      	cmp	r3, #48	; 0x30
 80047ca:	d86b      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
 80047cc:	2b20      	cmp	r3, #32
 80047ce:	d060      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0x15a>
 80047d0:	2b20      	cmp	r3, #32
 80047d2:	d867      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d05c      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0x15a>
 80047d8:	2b10      	cmp	r3, #16
 80047da:	d05a      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0x15a>
 80047dc:	e062      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047ee:	f000 fbe5 	bl	8004fbc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004800:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	609a      	str	r2, [r3, #8]
      break;
 800480a:	e04f      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800481c:	f000 fbce 	bl	8004fbc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800482e:	609a      	str	r2, [r3, #8]
      break;
 8004830:	e03c      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800483e:	461a      	mov	r2, r3
 8004840:	f000 fb42 	bl	8004ec8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2150      	movs	r1, #80	; 0x50
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fb9b 	bl	8004f86 <TIM_ITRx_SetConfig>
      break;
 8004850:	e02c      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800485e:	461a      	mov	r2, r3
 8004860:	f000 fb61 	bl	8004f26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2160      	movs	r1, #96	; 0x60
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fb8b 	bl	8004f86 <TIM_ITRx_SetConfig>
      break;
 8004870:	e01c      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800487e:	461a      	mov	r2, r3
 8004880:	f000 fb22 	bl	8004ec8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2140      	movs	r1, #64	; 0x40
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fb7b 	bl	8004f86 <TIM_ITRx_SetConfig>
      break;
 8004890:	e00c      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4619      	mov	r1, r3
 800489c:	4610      	mov	r0, r2
 800489e:	f000 fb72 	bl	8004f86 <TIM_ITRx_SetConfig>
      break;
 80048a2:	e003      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	73fb      	strb	r3, [r7, #15]
      break;
 80048a8:	e000      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	fffeff88 	.word	0xfffeff88

080048cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a40      	ldr	r2, [pc, #256]	; (80049e0 <TIM_Base_SetConfig+0x114>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d013      	beq.n	800490c <TIM_Base_SetConfig+0x40>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ea:	d00f      	beq.n	800490c <TIM_Base_SetConfig+0x40>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a3d      	ldr	r2, [pc, #244]	; (80049e4 <TIM_Base_SetConfig+0x118>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d00b      	beq.n	800490c <TIM_Base_SetConfig+0x40>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a3c      	ldr	r2, [pc, #240]	; (80049e8 <TIM_Base_SetConfig+0x11c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d007      	beq.n	800490c <TIM_Base_SetConfig+0x40>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a3b      	ldr	r2, [pc, #236]	; (80049ec <TIM_Base_SetConfig+0x120>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d003      	beq.n	800490c <TIM_Base_SetConfig+0x40>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a3a      	ldr	r2, [pc, #232]	; (80049f0 <TIM_Base_SetConfig+0x124>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d108      	bne.n	800491e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004912:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a2f      	ldr	r2, [pc, #188]	; (80049e0 <TIM_Base_SetConfig+0x114>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d02b      	beq.n	800497e <TIM_Base_SetConfig+0xb2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800492c:	d027      	beq.n	800497e <TIM_Base_SetConfig+0xb2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a2c      	ldr	r2, [pc, #176]	; (80049e4 <TIM_Base_SetConfig+0x118>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d023      	beq.n	800497e <TIM_Base_SetConfig+0xb2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a2b      	ldr	r2, [pc, #172]	; (80049e8 <TIM_Base_SetConfig+0x11c>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d01f      	beq.n	800497e <TIM_Base_SetConfig+0xb2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a2a      	ldr	r2, [pc, #168]	; (80049ec <TIM_Base_SetConfig+0x120>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d01b      	beq.n	800497e <TIM_Base_SetConfig+0xb2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a29      	ldr	r2, [pc, #164]	; (80049f0 <TIM_Base_SetConfig+0x124>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d017      	beq.n	800497e <TIM_Base_SetConfig+0xb2>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a28      	ldr	r2, [pc, #160]	; (80049f4 <TIM_Base_SetConfig+0x128>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d013      	beq.n	800497e <TIM_Base_SetConfig+0xb2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a27      	ldr	r2, [pc, #156]	; (80049f8 <TIM_Base_SetConfig+0x12c>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d00f      	beq.n	800497e <TIM_Base_SetConfig+0xb2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a26      	ldr	r2, [pc, #152]	; (80049fc <TIM_Base_SetConfig+0x130>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d00b      	beq.n	800497e <TIM_Base_SetConfig+0xb2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a25      	ldr	r2, [pc, #148]	; (8004a00 <TIM_Base_SetConfig+0x134>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d007      	beq.n	800497e <TIM_Base_SetConfig+0xb2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a24      	ldr	r2, [pc, #144]	; (8004a04 <TIM_Base_SetConfig+0x138>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d003      	beq.n	800497e <TIM_Base_SetConfig+0xb2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a23      	ldr	r2, [pc, #140]	; (8004a08 <TIM_Base_SetConfig+0x13c>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d108      	bne.n	8004990 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	4313      	orrs	r3, r2
 800498e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	4313      	orrs	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a0a      	ldr	r2, [pc, #40]	; (80049e0 <TIM_Base_SetConfig+0x114>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d003      	beq.n	80049c4 <TIM_Base_SetConfig+0xf8>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a0c      	ldr	r2, [pc, #48]	; (80049f0 <TIM_Base_SetConfig+0x124>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d103      	bne.n	80049cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	691a      	ldr	r2, [r3, #16]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	615a      	str	r2, [r3, #20]
}
 80049d2:	bf00      	nop
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	40010000 	.word	0x40010000
 80049e4:	40000400 	.word	0x40000400
 80049e8:	40000800 	.word	0x40000800
 80049ec:	40000c00 	.word	0x40000c00
 80049f0:	40010400 	.word	0x40010400
 80049f4:	40014000 	.word	0x40014000
 80049f8:	40014400 	.word	0x40014400
 80049fc:	40014800 	.word	0x40014800
 8004a00:	40001800 	.word	0x40001800
 8004a04:	40001c00 	.word	0x40001c00
 8004a08:	40002000 	.word	0x40002000

08004a0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	f023 0201 	bic.w	r2, r3, #1
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	4b2b      	ldr	r3, [pc, #172]	; (8004ae4 <TIM_OC1_SetConfig+0xd8>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 0303 	bic.w	r3, r3, #3
 8004a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f023 0302 	bic.w	r3, r3, #2
 8004a54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a21      	ldr	r2, [pc, #132]	; (8004ae8 <TIM_OC1_SetConfig+0xdc>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d003      	beq.n	8004a70 <TIM_OC1_SetConfig+0x64>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a20      	ldr	r2, [pc, #128]	; (8004aec <TIM_OC1_SetConfig+0xe0>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d10c      	bne.n	8004a8a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f023 0308 	bic.w	r3, r3, #8
 8004a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f023 0304 	bic.w	r3, r3, #4
 8004a88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a16      	ldr	r2, [pc, #88]	; (8004ae8 <TIM_OC1_SetConfig+0xdc>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d003      	beq.n	8004a9a <TIM_OC1_SetConfig+0x8e>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a15      	ldr	r2, [pc, #84]	; (8004aec <TIM_OC1_SetConfig+0xe0>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d111      	bne.n	8004abe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	621a      	str	r2, [r3, #32]
}
 8004ad8:	bf00      	nop
 8004ada:	371c      	adds	r7, #28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	fffeff8f 	.word	0xfffeff8f
 8004ae8:	40010000 	.word	0x40010000
 8004aec:	40010400 	.word	0x40010400

08004af0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b087      	sub	sp, #28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	f023 0210 	bic.w	r2, r3, #16
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	4b2e      	ldr	r3, [pc, #184]	; (8004bd4 <TIM_OC2_SetConfig+0xe4>)
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	021b      	lsls	r3, r3, #8
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f023 0320 	bic.w	r3, r3, #32
 8004b3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	011b      	lsls	r3, r3, #4
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a23      	ldr	r2, [pc, #140]	; (8004bd8 <TIM_OC2_SetConfig+0xe8>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d003      	beq.n	8004b58 <TIM_OC2_SetConfig+0x68>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a22      	ldr	r2, [pc, #136]	; (8004bdc <TIM_OC2_SetConfig+0xec>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d10d      	bne.n	8004b74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	011b      	lsls	r3, r3, #4
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a18      	ldr	r2, [pc, #96]	; (8004bd8 <TIM_OC2_SetConfig+0xe8>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d003      	beq.n	8004b84 <TIM_OC2_SetConfig+0x94>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a17      	ldr	r2, [pc, #92]	; (8004bdc <TIM_OC2_SetConfig+0xec>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d113      	bne.n	8004bac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	621a      	str	r2, [r3, #32]
}
 8004bc6:	bf00      	nop
 8004bc8:	371c      	adds	r7, #28
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	feff8fff 	.word	0xfeff8fff
 8004bd8:	40010000 	.word	0x40010000
 8004bdc:	40010400 	.word	0x40010400

08004be0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b087      	sub	sp, #28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	4b2d      	ldr	r3, [pc, #180]	; (8004cc0 <TIM_OC3_SetConfig+0xe0>)
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f023 0303 	bic.w	r3, r3, #3
 8004c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	021b      	lsls	r3, r3, #8
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a22      	ldr	r2, [pc, #136]	; (8004cc4 <TIM_OC3_SetConfig+0xe4>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d003      	beq.n	8004c46 <TIM_OC3_SetConfig+0x66>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a21      	ldr	r2, [pc, #132]	; (8004cc8 <TIM_OC3_SetConfig+0xe8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d10d      	bne.n	8004c62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	021b      	lsls	r3, r3, #8
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a17      	ldr	r2, [pc, #92]	; (8004cc4 <TIM_OC3_SetConfig+0xe4>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d003      	beq.n	8004c72 <TIM_OC3_SetConfig+0x92>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a16      	ldr	r2, [pc, #88]	; (8004cc8 <TIM_OC3_SetConfig+0xe8>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d113      	bne.n	8004c9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	011b      	lsls	r3, r3, #4
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	011b      	lsls	r3, r3, #4
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	621a      	str	r2, [r3, #32]
}
 8004cb4:	bf00      	nop
 8004cb6:	371c      	adds	r7, #28
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	fffeff8f 	.word	0xfffeff8f
 8004cc4:	40010000 	.word	0x40010000
 8004cc8:	40010400 	.word	0x40010400

08004ccc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	4b1e      	ldr	r3, [pc, #120]	; (8004d70 <TIM_OC4_SetConfig+0xa4>)
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	021b      	lsls	r3, r3, #8
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	031b      	lsls	r3, r3, #12
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a13      	ldr	r2, [pc, #76]	; (8004d74 <TIM_OC4_SetConfig+0xa8>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d003      	beq.n	8004d34 <TIM_OC4_SetConfig+0x68>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a12      	ldr	r2, [pc, #72]	; (8004d78 <TIM_OC4_SetConfig+0xac>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d109      	bne.n	8004d48 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	019b      	lsls	r3, r3, #6
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	621a      	str	r2, [r3, #32]
}
 8004d62:	bf00      	nop
 8004d64:	371c      	adds	r7, #28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	feff8fff 	.word	0xfeff8fff
 8004d74:	40010000 	.word	0x40010000
 8004d78:	40010400 	.word	0x40010400

08004d7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	4b1b      	ldr	r3, [pc, #108]	; (8004e14 <TIM_OC5_SetConfig+0x98>)
 8004da8:	4013      	ands	r3, r2
 8004daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004dbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	041b      	lsls	r3, r3, #16
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a12      	ldr	r2, [pc, #72]	; (8004e18 <TIM_OC5_SetConfig+0x9c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d003      	beq.n	8004dda <TIM_OC5_SetConfig+0x5e>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a11      	ldr	r2, [pc, #68]	; (8004e1c <TIM_OC5_SetConfig+0xa0>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d109      	bne.n	8004dee <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004de0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	021b      	lsls	r3, r3, #8
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	621a      	str	r2, [r3, #32]
}
 8004e08:	bf00      	nop
 8004e0a:	371c      	adds	r7, #28
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr
 8004e14:	fffeff8f 	.word	0xfffeff8f
 8004e18:	40010000 	.word	0x40010000
 8004e1c:	40010400 	.word	0x40010400

08004e20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	4b1c      	ldr	r3, [pc, #112]	; (8004ebc <TIM_OC6_SetConfig+0x9c>)
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	021b      	lsls	r3, r3, #8
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	051b      	lsls	r3, r3, #20
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a13      	ldr	r2, [pc, #76]	; (8004ec0 <TIM_OC6_SetConfig+0xa0>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d003      	beq.n	8004e80 <TIM_OC6_SetConfig+0x60>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a12      	ldr	r2, [pc, #72]	; (8004ec4 <TIM_OC6_SetConfig+0xa4>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d109      	bne.n	8004e94 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	029b      	lsls	r3, r3, #10
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	621a      	str	r2, [r3, #32]
}
 8004eae:	bf00      	nop
 8004eb0:	371c      	adds	r7, #28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	feff8fff 	.word	0xfeff8fff
 8004ec0:	40010000 	.word	0x40010000
 8004ec4:	40010400 	.word	0x40010400

08004ec8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b087      	sub	sp, #28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	f023 0201 	bic.w	r2, r3, #1
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ef2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f023 030a 	bic.w	r3, r3, #10
 8004f04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	621a      	str	r2, [r3, #32]
}
 8004f1a:	bf00      	nop
 8004f1c:	371c      	adds	r7, #28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b087      	sub	sp, #28
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	60f8      	str	r0, [r7, #12]
 8004f2e:	60b9      	str	r1, [r7, #8]
 8004f30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	f023 0210 	bic.w	r2, r3, #16
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	031b      	lsls	r3, r3, #12
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	011b      	lsls	r3, r3, #4
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	621a      	str	r2, [r3, #32]
}
 8004f7a:	bf00      	nop
 8004f7c:	371c      	adds	r7, #28
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b085      	sub	sp, #20
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	f043 0307 	orr.w	r3, r3, #7
 8004fa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	609a      	str	r2, [r3, #8]
}
 8004fb0:	bf00      	nop
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b087      	sub	sp, #28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	021a      	lsls	r2, r3, #8
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	609a      	str	r2, [r3, #8]
}
 8004ff0:	bf00      	nop
 8004ff2:	371c      	adds	r7, #28
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	f003 031f 	and.w	r3, r3, #31
 800500e:	2201      	movs	r2, #1
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6a1a      	ldr	r2, [r3, #32]
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	43db      	mvns	r3, r3
 800501e:	401a      	ands	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6a1a      	ldr	r2, [r3, #32]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	f003 031f 	and.w	r3, r3, #31
 800502e:	6879      	ldr	r1, [r7, #4]
 8005030:	fa01 f303 	lsl.w	r3, r1, r3
 8005034:	431a      	orrs	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	621a      	str	r2, [r3, #32]
}
 800503a:	bf00      	nop
 800503c:	371c      	adds	r7, #28
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
	...

08005048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005058:	2b01      	cmp	r3, #1
 800505a:	d101      	bne.n	8005060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800505c:	2302      	movs	r3, #2
 800505e:	e06d      	b.n	800513c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a30      	ldr	r2, [pc, #192]	; (8005148 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d004      	beq.n	8005094 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a2f      	ldr	r2, [pc, #188]	; (800514c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d108      	bne.n	80050a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800509a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a20      	ldr	r2, [pc, #128]	; (8005148 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d022      	beq.n	8005110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d2:	d01d      	beq.n	8005110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a1d      	ldr	r2, [pc, #116]	; (8005150 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d018      	beq.n	8005110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a1c      	ldr	r2, [pc, #112]	; (8005154 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d013      	beq.n	8005110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a1a      	ldr	r2, [pc, #104]	; (8005158 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d00e      	beq.n	8005110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a15      	ldr	r2, [pc, #84]	; (800514c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d009      	beq.n	8005110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a16      	ldr	r2, [pc, #88]	; (800515c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d004      	beq.n	8005110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a15      	ldr	r2, [pc, #84]	; (8005160 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d10c      	bne.n	800512a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005116:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	4313      	orrs	r3, r2
 8005120:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	40010000 	.word	0x40010000
 800514c:	40010400 	.word	0x40010400
 8005150:	40000400 	.word	0x40000400
 8005154:	40000800 	.word	0x40000800
 8005158:	40000c00 	.word	0x40000c00
 800515c:	40014000 	.word	0x40014000
 8005160:	40001800 	.word	0x40001800

08005164 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e040      	b.n	80051f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800517a:	2b00      	cmp	r3, #0
 800517c:	d106      	bne.n	800518c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7fb ffd4 	bl	8001134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2224      	movs	r2, #36	; 0x24
 8005190:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 0201 	bic.w	r2, r2, #1
 80051a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f8b0 	bl	8005308 <UART_SetConfig>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d101      	bne.n	80051b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e022      	b.n	80051f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d002      	beq.n	80051c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 fb08 	bl	80057d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689a      	ldr	r2, [r3, #8]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f042 0201 	orr.w	r2, r2, #1
 80051ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 fb8f 	bl	8005914 <UART_CheckIdleState>
 80051f6:	4603      	mov	r3, r0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3708      	adds	r7, #8
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b08a      	sub	sp, #40	; 0x28
 8005204:	af02      	add	r7, sp, #8
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	603b      	str	r3, [r7, #0]
 800520c:	4613      	mov	r3, r2
 800520e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005214:	2b20      	cmp	r3, #32
 8005216:	d171      	bne.n	80052fc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d002      	beq.n	8005224 <HAL_UART_Transmit+0x24>
 800521e:	88fb      	ldrh	r3, [r7, #6]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d101      	bne.n	8005228 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e06a      	b.n	80052fe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2221      	movs	r2, #33	; 0x21
 8005234:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005236:	f7fc f993 	bl	8001560 <HAL_GetTick>
 800523a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	88fa      	ldrh	r2, [r7, #6]
 8005240:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	88fa      	ldrh	r2, [r7, #6]
 8005248:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005254:	d108      	bne.n	8005268 <HAL_UART_Transmit+0x68>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d104      	bne.n	8005268 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800525e:	2300      	movs	r3, #0
 8005260:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	61bb      	str	r3, [r7, #24]
 8005266:	e003      	b.n	8005270 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800526c:	2300      	movs	r3, #0
 800526e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005270:	e02c      	b.n	80052cc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	2200      	movs	r2, #0
 800527a:	2180      	movs	r1, #128	; 0x80
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 fb96 	bl	80059ae <UART_WaitOnFlagUntilTimeout>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e038      	b.n	80052fe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10b      	bne.n	80052aa <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	881b      	ldrh	r3, [r3, #0]
 8005296:	461a      	mov	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	3302      	adds	r3, #2
 80052a6:	61bb      	str	r3, [r7, #24]
 80052a8:	e007      	b.n	80052ba <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	781a      	ldrb	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	3301      	adds	r3, #1
 80052b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	3b01      	subs	r3, #1
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1cc      	bne.n	8005272 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	2200      	movs	r2, #0
 80052e0:	2140      	movs	r1, #64	; 0x40
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f000 fb63 	bl	80059ae <UART_WaitOnFlagUntilTimeout>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e005      	b.n	80052fe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2220      	movs	r2, #32
 80052f6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80052f8:	2300      	movs	r3, #0
 80052fa:	e000      	b.n	80052fe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80052fc:	2302      	movs	r3, #2
  }
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3720      	adds	r7, #32
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
	...

08005308 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b088      	sub	sp, #32
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005310:	2300      	movs	r3, #0
 8005312:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	431a      	orrs	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	4313      	orrs	r3, r2
 800532a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	4ba6      	ldr	r3, [pc, #664]	; (80055cc <UART_SetConfig+0x2c4>)
 8005334:	4013      	ands	r3, r2
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6812      	ldr	r2, [r2, #0]
 800533a:	6979      	ldr	r1, [r7, #20]
 800533c:	430b      	orrs	r3, r1
 800533e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	430a      	orrs	r2, r1
 8005354:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	4313      	orrs	r3, r2
 8005364:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	430a      	orrs	r2, r1
 8005378:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a94      	ldr	r2, [pc, #592]	; (80055d0 <UART_SetConfig+0x2c8>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d120      	bne.n	80053c6 <UART_SetConfig+0xbe>
 8005384:	4b93      	ldr	r3, [pc, #588]	; (80055d4 <UART_SetConfig+0x2cc>)
 8005386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	2b03      	cmp	r3, #3
 8005390:	d816      	bhi.n	80053c0 <UART_SetConfig+0xb8>
 8005392:	a201      	add	r2, pc, #4	; (adr r2, 8005398 <UART_SetConfig+0x90>)
 8005394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005398:	080053a9 	.word	0x080053a9
 800539c:	080053b5 	.word	0x080053b5
 80053a0:	080053af 	.word	0x080053af
 80053a4:	080053bb 	.word	0x080053bb
 80053a8:	2301      	movs	r3, #1
 80053aa:	77fb      	strb	r3, [r7, #31]
 80053ac:	e150      	b.n	8005650 <UART_SetConfig+0x348>
 80053ae:	2302      	movs	r3, #2
 80053b0:	77fb      	strb	r3, [r7, #31]
 80053b2:	e14d      	b.n	8005650 <UART_SetConfig+0x348>
 80053b4:	2304      	movs	r3, #4
 80053b6:	77fb      	strb	r3, [r7, #31]
 80053b8:	e14a      	b.n	8005650 <UART_SetConfig+0x348>
 80053ba:	2308      	movs	r3, #8
 80053bc:	77fb      	strb	r3, [r7, #31]
 80053be:	e147      	b.n	8005650 <UART_SetConfig+0x348>
 80053c0:	2310      	movs	r3, #16
 80053c2:	77fb      	strb	r3, [r7, #31]
 80053c4:	e144      	b.n	8005650 <UART_SetConfig+0x348>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a83      	ldr	r2, [pc, #524]	; (80055d8 <UART_SetConfig+0x2d0>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d132      	bne.n	8005436 <UART_SetConfig+0x12e>
 80053d0:	4b80      	ldr	r3, [pc, #512]	; (80055d4 <UART_SetConfig+0x2cc>)
 80053d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d6:	f003 030c 	and.w	r3, r3, #12
 80053da:	2b0c      	cmp	r3, #12
 80053dc:	d828      	bhi.n	8005430 <UART_SetConfig+0x128>
 80053de:	a201      	add	r2, pc, #4	; (adr r2, 80053e4 <UART_SetConfig+0xdc>)
 80053e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e4:	08005419 	.word	0x08005419
 80053e8:	08005431 	.word	0x08005431
 80053ec:	08005431 	.word	0x08005431
 80053f0:	08005431 	.word	0x08005431
 80053f4:	08005425 	.word	0x08005425
 80053f8:	08005431 	.word	0x08005431
 80053fc:	08005431 	.word	0x08005431
 8005400:	08005431 	.word	0x08005431
 8005404:	0800541f 	.word	0x0800541f
 8005408:	08005431 	.word	0x08005431
 800540c:	08005431 	.word	0x08005431
 8005410:	08005431 	.word	0x08005431
 8005414:	0800542b 	.word	0x0800542b
 8005418:	2300      	movs	r3, #0
 800541a:	77fb      	strb	r3, [r7, #31]
 800541c:	e118      	b.n	8005650 <UART_SetConfig+0x348>
 800541e:	2302      	movs	r3, #2
 8005420:	77fb      	strb	r3, [r7, #31]
 8005422:	e115      	b.n	8005650 <UART_SetConfig+0x348>
 8005424:	2304      	movs	r3, #4
 8005426:	77fb      	strb	r3, [r7, #31]
 8005428:	e112      	b.n	8005650 <UART_SetConfig+0x348>
 800542a:	2308      	movs	r3, #8
 800542c:	77fb      	strb	r3, [r7, #31]
 800542e:	e10f      	b.n	8005650 <UART_SetConfig+0x348>
 8005430:	2310      	movs	r3, #16
 8005432:	77fb      	strb	r3, [r7, #31]
 8005434:	e10c      	b.n	8005650 <UART_SetConfig+0x348>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a68      	ldr	r2, [pc, #416]	; (80055dc <UART_SetConfig+0x2d4>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d120      	bne.n	8005482 <UART_SetConfig+0x17a>
 8005440:	4b64      	ldr	r3, [pc, #400]	; (80055d4 <UART_SetConfig+0x2cc>)
 8005442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005446:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800544a:	2b30      	cmp	r3, #48	; 0x30
 800544c:	d013      	beq.n	8005476 <UART_SetConfig+0x16e>
 800544e:	2b30      	cmp	r3, #48	; 0x30
 8005450:	d814      	bhi.n	800547c <UART_SetConfig+0x174>
 8005452:	2b20      	cmp	r3, #32
 8005454:	d009      	beq.n	800546a <UART_SetConfig+0x162>
 8005456:	2b20      	cmp	r3, #32
 8005458:	d810      	bhi.n	800547c <UART_SetConfig+0x174>
 800545a:	2b00      	cmp	r3, #0
 800545c:	d002      	beq.n	8005464 <UART_SetConfig+0x15c>
 800545e:	2b10      	cmp	r3, #16
 8005460:	d006      	beq.n	8005470 <UART_SetConfig+0x168>
 8005462:	e00b      	b.n	800547c <UART_SetConfig+0x174>
 8005464:	2300      	movs	r3, #0
 8005466:	77fb      	strb	r3, [r7, #31]
 8005468:	e0f2      	b.n	8005650 <UART_SetConfig+0x348>
 800546a:	2302      	movs	r3, #2
 800546c:	77fb      	strb	r3, [r7, #31]
 800546e:	e0ef      	b.n	8005650 <UART_SetConfig+0x348>
 8005470:	2304      	movs	r3, #4
 8005472:	77fb      	strb	r3, [r7, #31]
 8005474:	e0ec      	b.n	8005650 <UART_SetConfig+0x348>
 8005476:	2308      	movs	r3, #8
 8005478:	77fb      	strb	r3, [r7, #31]
 800547a:	e0e9      	b.n	8005650 <UART_SetConfig+0x348>
 800547c:	2310      	movs	r3, #16
 800547e:	77fb      	strb	r3, [r7, #31]
 8005480:	e0e6      	b.n	8005650 <UART_SetConfig+0x348>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a56      	ldr	r2, [pc, #344]	; (80055e0 <UART_SetConfig+0x2d8>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d120      	bne.n	80054ce <UART_SetConfig+0x1c6>
 800548c:	4b51      	ldr	r3, [pc, #324]	; (80055d4 <UART_SetConfig+0x2cc>)
 800548e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005492:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005496:	2bc0      	cmp	r3, #192	; 0xc0
 8005498:	d013      	beq.n	80054c2 <UART_SetConfig+0x1ba>
 800549a:	2bc0      	cmp	r3, #192	; 0xc0
 800549c:	d814      	bhi.n	80054c8 <UART_SetConfig+0x1c0>
 800549e:	2b80      	cmp	r3, #128	; 0x80
 80054a0:	d009      	beq.n	80054b6 <UART_SetConfig+0x1ae>
 80054a2:	2b80      	cmp	r3, #128	; 0x80
 80054a4:	d810      	bhi.n	80054c8 <UART_SetConfig+0x1c0>
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d002      	beq.n	80054b0 <UART_SetConfig+0x1a8>
 80054aa:	2b40      	cmp	r3, #64	; 0x40
 80054ac:	d006      	beq.n	80054bc <UART_SetConfig+0x1b4>
 80054ae:	e00b      	b.n	80054c8 <UART_SetConfig+0x1c0>
 80054b0:	2300      	movs	r3, #0
 80054b2:	77fb      	strb	r3, [r7, #31]
 80054b4:	e0cc      	b.n	8005650 <UART_SetConfig+0x348>
 80054b6:	2302      	movs	r3, #2
 80054b8:	77fb      	strb	r3, [r7, #31]
 80054ba:	e0c9      	b.n	8005650 <UART_SetConfig+0x348>
 80054bc:	2304      	movs	r3, #4
 80054be:	77fb      	strb	r3, [r7, #31]
 80054c0:	e0c6      	b.n	8005650 <UART_SetConfig+0x348>
 80054c2:	2308      	movs	r3, #8
 80054c4:	77fb      	strb	r3, [r7, #31]
 80054c6:	e0c3      	b.n	8005650 <UART_SetConfig+0x348>
 80054c8:	2310      	movs	r3, #16
 80054ca:	77fb      	strb	r3, [r7, #31]
 80054cc:	e0c0      	b.n	8005650 <UART_SetConfig+0x348>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a44      	ldr	r2, [pc, #272]	; (80055e4 <UART_SetConfig+0x2dc>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d125      	bne.n	8005524 <UART_SetConfig+0x21c>
 80054d8:	4b3e      	ldr	r3, [pc, #248]	; (80055d4 <UART_SetConfig+0x2cc>)
 80054da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054e6:	d017      	beq.n	8005518 <UART_SetConfig+0x210>
 80054e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054ec:	d817      	bhi.n	800551e <UART_SetConfig+0x216>
 80054ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054f2:	d00b      	beq.n	800550c <UART_SetConfig+0x204>
 80054f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054f8:	d811      	bhi.n	800551e <UART_SetConfig+0x216>
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d003      	beq.n	8005506 <UART_SetConfig+0x1fe>
 80054fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005502:	d006      	beq.n	8005512 <UART_SetConfig+0x20a>
 8005504:	e00b      	b.n	800551e <UART_SetConfig+0x216>
 8005506:	2300      	movs	r3, #0
 8005508:	77fb      	strb	r3, [r7, #31]
 800550a:	e0a1      	b.n	8005650 <UART_SetConfig+0x348>
 800550c:	2302      	movs	r3, #2
 800550e:	77fb      	strb	r3, [r7, #31]
 8005510:	e09e      	b.n	8005650 <UART_SetConfig+0x348>
 8005512:	2304      	movs	r3, #4
 8005514:	77fb      	strb	r3, [r7, #31]
 8005516:	e09b      	b.n	8005650 <UART_SetConfig+0x348>
 8005518:	2308      	movs	r3, #8
 800551a:	77fb      	strb	r3, [r7, #31]
 800551c:	e098      	b.n	8005650 <UART_SetConfig+0x348>
 800551e:	2310      	movs	r3, #16
 8005520:	77fb      	strb	r3, [r7, #31]
 8005522:	e095      	b.n	8005650 <UART_SetConfig+0x348>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a2f      	ldr	r2, [pc, #188]	; (80055e8 <UART_SetConfig+0x2e0>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d125      	bne.n	800557a <UART_SetConfig+0x272>
 800552e:	4b29      	ldr	r3, [pc, #164]	; (80055d4 <UART_SetConfig+0x2cc>)
 8005530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005534:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005538:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800553c:	d017      	beq.n	800556e <UART_SetConfig+0x266>
 800553e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005542:	d817      	bhi.n	8005574 <UART_SetConfig+0x26c>
 8005544:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005548:	d00b      	beq.n	8005562 <UART_SetConfig+0x25a>
 800554a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800554e:	d811      	bhi.n	8005574 <UART_SetConfig+0x26c>
 8005550:	2b00      	cmp	r3, #0
 8005552:	d003      	beq.n	800555c <UART_SetConfig+0x254>
 8005554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005558:	d006      	beq.n	8005568 <UART_SetConfig+0x260>
 800555a:	e00b      	b.n	8005574 <UART_SetConfig+0x26c>
 800555c:	2301      	movs	r3, #1
 800555e:	77fb      	strb	r3, [r7, #31]
 8005560:	e076      	b.n	8005650 <UART_SetConfig+0x348>
 8005562:	2302      	movs	r3, #2
 8005564:	77fb      	strb	r3, [r7, #31]
 8005566:	e073      	b.n	8005650 <UART_SetConfig+0x348>
 8005568:	2304      	movs	r3, #4
 800556a:	77fb      	strb	r3, [r7, #31]
 800556c:	e070      	b.n	8005650 <UART_SetConfig+0x348>
 800556e:	2308      	movs	r3, #8
 8005570:	77fb      	strb	r3, [r7, #31]
 8005572:	e06d      	b.n	8005650 <UART_SetConfig+0x348>
 8005574:	2310      	movs	r3, #16
 8005576:	77fb      	strb	r3, [r7, #31]
 8005578:	e06a      	b.n	8005650 <UART_SetConfig+0x348>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a1b      	ldr	r2, [pc, #108]	; (80055ec <UART_SetConfig+0x2e4>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d138      	bne.n	80055f6 <UART_SetConfig+0x2ee>
 8005584:	4b13      	ldr	r3, [pc, #76]	; (80055d4 <UART_SetConfig+0x2cc>)
 8005586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800558a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800558e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005592:	d017      	beq.n	80055c4 <UART_SetConfig+0x2bc>
 8005594:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005598:	d82a      	bhi.n	80055f0 <UART_SetConfig+0x2e8>
 800559a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800559e:	d00b      	beq.n	80055b8 <UART_SetConfig+0x2b0>
 80055a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055a4:	d824      	bhi.n	80055f0 <UART_SetConfig+0x2e8>
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <UART_SetConfig+0x2aa>
 80055aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ae:	d006      	beq.n	80055be <UART_SetConfig+0x2b6>
 80055b0:	e01e      	b.n	80055f0 <UART_SetConfig+0x2e8>
 80055b2:	2300      	movs	r3, #0
 80055b4:	77fb      	strb	r3, [r7, #31]
 80055b6:	e04b      	b.n	8005650 <UART_SetConfig+0x348>
 80055b8:	2302      	movs	r3, #2
 80055ba:	77fb      	strb	r3, [r7, #31]
 80055bc:	e048      	b.n	8005650 <UART_SetConfig+0x348>
 80055be:	2304      	movs	r3, #4
 80055c0:	77fb      	strb	r3, [r7, #31]
 80055c2:	e045      	b.n	8005650 <UART_SetConfig+0x348>
 80055c4:	2308      	movs	r3, #8
 80055c6:	77fb      	strb	r3, [r7, #31]
 80055c8:	e042      	b.n	8005650 <UART_SetConfig+0x348>
 80055ca:	bf00      	nop
 80055cc:	efff69f3 	.word	0xefff69f3
 80055d0:	40011000 	.word	0x40011000
 80055d4:	40023800 	.word	0x40023800
 80055d8:	40004400 	.word	0x40004400
 80055dc:	40004800 	.word	0x40004800
 80055e0:	40004c00 	.word	0x40004c00
 80055e4:	40005000 	.word	0x40005000
 80055e8:	40011400 	.word	0x40011400
 80055ec:	40007800 	.word	0x40007800
 80055f0:	2310      	movs	r3, #16
 80055f2:	77fb      	strb	r3, [r7, #31]
 80055f4:	e02c      	b.n	8005650 <UART_SetConfig+0x348>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a72      	ldr	r2, [pc, #456]	; (80057c4 <UART_SetConfig+0x4bc>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d125      	bne.n	800564c <UART_SetConfig+0x344>
 8005600:	4b71      	ldr	r3, [pc, #452]	; (80057c8 <UART_SetConfig+0x4c0>)
 8005602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005606:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800560a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800560e:	d017      	beq.n	8005640 <UART_SetConfig+0x338>
 8005610:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005614:	d817      	bhi.n	8005646 <UART_SetConfig+0x33e>
 8005616:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800561a:	d00b      	beq.n	8005634 <UART_SetConfig+0x32c>
 800561c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005620:	d811      	bhi.n	8005646 <UART_SetConfig+0x33e>
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <UART_SetConfig+0x326>
 8005626:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800562a:	d006      	beq.n	800563a <UART_SetConfig+0x332>
 800562c:	e00b      	b.n	8005646 <UART_SetConfig+0x33e>
 800562e:	2300      	movs	r3, #0
 8005630:	77fb      	strb	r3, [r7, #31]
 8005632:	e00d      	b.n	8005650 <UART_SetConfig+0x348>
 8005634:	2302      	movs	r3, #2
 8005636:	77fb      	strb	r3, [r7, #31]
 8005638:	e00a      	b.n	8005650 <UART_SetConfig+0x348>
 800563a:	2304      	movs	r3, #4
 800563c:	77fb      	strb	r3, [r7, #31]
 800563e:	e007      	b.n	8005650 <UART_SetConfig+0x348>
 8005640:	2308      	movs	r3, #8
 8005642:	77fb      	strb	r3, [r7, #31]
 8005644:	e004      	b.n	8005650 <UART_SetConfig+0x348>
 8005646:	2310      	movs	r3, #16
 8005648:	77fb      	strb	r3, [r7, #31]
 800564a:	e001      	b.n	8005650 <UART_SetConfig+0x348>
 800564c:	2310      	movs	r3, #16
 800564e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	69db      	ldr	r3, [r3, #28]
 8005654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005658:	d15b      	bne.n	8005712 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800565a:	7ffb      	ldrb	r3, [r7, #31]
 800565c:	2b08      	cmp	r3, #8
 800565e:	d828      	bhi.n	80056b2 <UART_SetConfig+0x3aa>
 8005660:	a201      	add	r2, pc, #4	; (adr r2, 8005668 <UART_SetConfig+0x360>)
 8005662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005666:	bf00      	nop
 8005668:	0800568d 	.word	0x0800568d
 800566c:	08005695 	.word	0x08005695
 8005670:	0800569d 	.word	0x0800569d
 8005674:	080056b3 	.word	0x080056b3
 8005678:	080056a3 	.word	0x080056a3
 800567c:	080056b3 	.word	0x080056b3
 8005680:	080056b3 	.word	0x080056b3
 8005684:	080056b3 	.word	0x080056b3
 8005688:	080056ab 	.word	0x080056ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800568c:	f7fe f8be 	bl	800380c <HAL_RCC_GetPCLK1Freq>
 8005690:	61b8      	str	r0, [r7, #24]
        break;
 8005692:	e013      	b.n	80056bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005694:	f7fe f8ce 	bl	8003834 <HAL_RCC_GetPCLK2Freq>
 8005698:	61b8      	str	r0, [r7, #24]
        break;
 800569a:	e00f      	b.n	80056bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800569c:	4b4b      	ldr	r3, [pc, #300]	; (80057cc <UART_SetConfig+0x4c4>)
 800569e:	61bb      	str	r3, [r7, #24]
        break;
 80056a0:	e00c      	b.n	80056bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056a2:	f7fd ffa1 	bl	80035e8 <HAL_RCC_GetSysClockFreq>
 80056a6:	61b8      	str	r0, [r7, #24]
        break;
 80056a8:	e008      	b.n	80056bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ae:	61bb      	str	r3, [r7, #24]
        break;
 80056b0:	e004      	b.n	80056bc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80056b2:	2300      	movs	r3, #0
 80056b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	77bb      	strb	r3, [r7, #30]
        break;
 80056ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d074      	beq.n	80057ac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	005a      	lsls	r2, r3, #1
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	085b      	lsrs	r3, r3, #1
 80056cc:	441a      	add	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	2b0f      	cmp	r3, #15
 80056dc:	d916      	bls.n	800570c <UART_SetConfig+0x404>
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056e4:	d212      	bcs.n	800570c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	f023 030f 	bic.w	r3, r3, #15
 80056ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	085b      	lsrs	r3, r3, #1
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	89fb      	ldrh	r3, [r7, #14]
 80056fe:	4313      	orrs	r3, r2
 8005700:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	89fa      	ldrh	r2, [r7, #14]
 8005708:	60da      	str	r2, [r3, #12]
 800570a:	e04f      	b.n	80057ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	77bb      	strb	r3, [r7, #30]
 8005710:	e04c      	b.n	80057ac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005712:	7ffb      	ldrb	r3, [r7, #31]
 8005714:	2b08      	cmp	r3, #8
 8005716:	d828      	bhi.n	800576a <UART_SetConfig+0x462>
 8005718:	a201      	add	r2, pc, #4	; (adr r2, 8005720 <UART_SetConfig+0x418>)
 800571a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571e:	bf00      	nop
 8005720:	08005745 	.word	0x08005745
 8005724:	0800574d 	.word	0x0800574d
 8005728:	08005755 	.word	0x08005755
 800572c:	0800576b 	.word	0x0800576b
 8005730:	0800575b 	.word	0x0800575b
 8005734:	0800576b 	.word	0x0800576b
 8005738:	0800576b 	.word	0x0800576b
 800573c:	0800576b 	.word	0x0800576b
 8005740:	08005763 	.word	0x08005763
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005744:	f7fe f862 	bl	800380c <HAL_RCC_GetPCLK1Freq>
 8005748:	61b8      	str	r0, [r7, #24]
        break;
 800574a:	e013      	b.n	8005774 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800574c:	f7fe f872 	bl	8003834 <HAL_RCC_GetPCLK2Freq>
 8005750:	61b8      	str	r0, [r7, #24]
        break;
 8005752:	e00f      	b.n	8005774 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005754:	4b1d      	ldr	r3, [pc, #116]	; (80057cc <UART_SetConfig+0x4c4>)
 8005756:	61bb      	str	r3, [r7, #24]
        break;
 8005758:	e00c      	b.n	8005774 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800575a:	f7fd ff45 	bl	80035e8 <HAL_RCC_GetSysClockFreq>
 800575e:	61b8      	str	r0, [r7, #24]
        break;
 8005760:	e008      	b.n	8005774 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005766:	61bb      	str	r3, [r7, #24]
        break;
 8005768:	e004      	b.n	8005774 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800576a:	2300      	movs	r3, #0
 800576c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	77bb      	strb	r3, [r7, #30]
        break;
 8005772:	bf00      	nop
    }

    if (pclk != 0U)
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d018      	beq.n	80057ac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	085a      	lsrs	r2, r3, #1
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	441a      	add	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	fbb2 f3f3 	udiv	r3, r2, r3
 800578c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	2b0f      	cmp	r3, #15
 8005792:	d909      	bls.n	80057a8 <UART_SetConfig+0x4a0>
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800579a:	d205      	bcs.n	80057a8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	b29a      	uxth	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	60da      	str	r2, [r3, #12]
 80057a6:	e001      	b.n	80057ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80057b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3720      	adds	r7, #32
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	40007c00 	.word	0x40007c00
 80057c8:	40023800 	.word	0x40023800
 80057cc:	00f42400 	.word	0x00f42400

080057d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00a      	beq.n	80057fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00a      	beq.n	800581c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	430a      	orrs	r2, r1
 800581a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005820:	f003 0304 	and.w	r3, r3, #4
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00a      	beq.n	800583e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	f003 0308 	and.w	r3, r3, #8
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00a      	beq.n	8005860 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	430a      	orrs	r2, r1
 800585e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	f003 0310 	and.w	r3, r3, #16
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00a      	beq.n	8005882 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	430a      	orrs	r2, r1
 8005880:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005886:	f003 0320 	and.w	r3, r3, #32
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00a      	beq.n	80058a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	430a      	orrs	r2, r1
 80058a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d01a      	beq.n	80058e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058ce:	d10a      	bne.n	80058e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	430a      	orrs	r2, r1
 80058e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00a      	beq.n	8005908 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	430a      	orrs	r2, r1
 8005906:	605a      	str	r2, [r3, #4]
  }
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af02      	add	r7, sp, #8
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005924:	f7fb fe1c 	bl	8001560 <HAL_GetTick>
 8005928:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0308 	and.w	r3, r3, #8
 8005934:	2b08      	cmp	r3, #8
 8005936:	d10e      	bne.n	8005956 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005938:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f831 	bl	80059ae <UART_WaitOnFlagUntilTimeout>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d001      	beq.n	8005956 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e027      	b.n	80059a6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b04      	cmp	r3, #4
 8005962:	d10e      	bne.n	8005982 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005964:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f81b 	bl	80059ae <UART_WaitOnFlagUntilTimeout>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d001      	beq.n	8005982 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e011      	b.n	80059a6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2220      	movs	r2, #32
 8005986:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2220      	movs	r2, #32
 800598c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b09c      	sub	sp, #112	; 0x70
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	60f8      	str	r0, [r7, #12]
 80059b6:	60b9      	str	r1, [r7, #8]
 80059b8:	603b      	str	r3, [r7, #0]
 80059ba:	4613      	mov	r3, r2
 80059bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059be:	e0a7      	b.n	8005b10 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c6:	f000 80a3 	beq.w	8005b10 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ca:	f7fb fdc9 	bl	8001560 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d302      	bcc.n	80059e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80059da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d13f      	bne.n	8005a60 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059e8:	e853 3f00 	ldrex	r3, [r3]
 80059ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80059ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059f4:	667b      	str	r3, [r7, #100]	; 0x64
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	461a      	mov	r2, r3
 80059fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a00:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a06:	e841 2300 	strex	r3, r2, [r1]
 8005a0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005a0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1e6      	bne.n	80059e0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3308      	adds	r3, #8
 8005a18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a1c:	e853 3f00 	ldrex	r3, [r3]
 8005a20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a24:	f023 0301 	bic.w	r3, r3, #1
 8005a28:	663b      	str	r3, [r7, #96]	; 0x60
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3308      	adds	r3, #8
 8005a30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a32:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a3a:	e841 2300 	strex	r3, r2, [r1]
 8005a3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1e5      	bne.n	8005a12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e068      	b.n	8005b32 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0304 	and.w	r3, r3, #4
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d050      	beq.n	8005b10 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	69db      	ldr	r3, [r3, #28]
 8005a74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a7c:	d148      	bne.n	8005b10 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a86:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a90:	e853 3f00 	ldrex	r3, [r3]
 8005a94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aa6:	637b      	str	r3, [r7, #52]	; 0x34
 8005aa8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005aac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005aae:	e841 2300 	strex	r3, r2, [r1]
 8005ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1e6      	bne.n	8005a88 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	3308      	adds	r3, #8
 8005ac0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	e853 3f00 	ldrex	r3, [r3]
 8005ac8:	613b      	str	r3, [r7, #16]
   return(result);
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	f023 0301 	bic.w	r3, r3, #1
 8005ad0:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	3308      	adds	r3, #8
 8005ad8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005ada:	623a      	str	r2, [r7, #32]
 8005adc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ade:	69f9      	ldr	r1, [r7, #28]
 8005ae0:	6a3a      	ldr	r2, [r7, #32]
 8005ae2:	e841 2300 	strex	r3, r2, [r1]
 8005ae6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1e5      	bne.n	8005aba <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2220      	movs	r2, #32
 8005af2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2220      	movs	r2, #32
 8005af8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2220      	movs	r2, #32
 8005b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e010      	b.n	8005b32 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	69da      	ldr	r2, [r3, #28]
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	bf0c      	ite	eq
 8005b20:	2301      	moveq	r3, #1
 8005b22:	2300      	movne	r3, #0
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	461a      	mov	r2, r3
 8005b28:	79fb      	ldrb	r3, [r7, #7]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	f43f af48 	beq.w	80059c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3770      	adds	r7, #112	; 0x70
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
	...

08005b3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b3c:	b084      	sub	sp, #16
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b084      	sub	sp, #16
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
 8005b46:	f107 001c 	add.w	r0, r7, #28
 8005b4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d120      	bne.n	8005b96 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68da      	ldr	r2, [r3, #12]
 8005b64:	4b20      	ldr	r3, [pc, #128]	; (8005be8 <USB_CoreInit+0xac>)
 8005b66:	4013      	ands	r3, r2
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d105      	bne.n	8005b8a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 fa96 	bl	80060bc <USB_CoreReset>
 8005b90:	4603      	mov	r3, r0
 8005b92:	73fb      	strb	r3, [r7, #15]
 8005b94:	e010      	b.n	8005bb8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 fa8a 	bl	80060bc <USB_CoreReset>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d10b      	bne.n	8005bd6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f043 0206 	orr.w	r2, r3, #6
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f043 0220 	orr.w	r2, r3, #32
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005be2:	b004      	add	sp, #16
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	ffbdffbf 	.word	0xffbdffbf

08005bec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f023 0201 	bic.w	r2, r3, #1
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b084      	sub	sp, #16
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
 8005c16:	460b      	mov	r3, r1
 8005c18:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c2a:	78fb      	ldrb	r3, [r7, #3]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d115      	bne.n	8005c5c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c3c:	2001      	movs	r0, #1
 8005c3e:	f7fb fc9b 	bl	8001578 <HAL_Delay>
      ms++;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	3301      	adds	r3, #1
 8005c46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 fa29 	bl	80060a0 <USB_GetMode>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d01e      	beq.n	8005c92 <USB_SetCurrentMode+0x84>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2b31      	cmp	r3, #49	; 0x31
 8005c58:	d9f0      	bls.n	8005c3c <USB_SetCurrentMode+0x2e>
 8005c5a:	e01a      	b.n	8005c92 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c5c:	78fb      	ldrb	r3, [r7, #3]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d115      	bne.n	8005c8e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c6e:	2001      	movs	r0, #1
 8005c70:	f7fb fc82 	bl	8001578 <HAL_Delay>
      ms++;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	3301      	adds	r3, #1
 8005c78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 fa10 	bl	80060a0 <USB_GetMode>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d005      	beq.n	8005c92 <USB_SetCurrentMode+0x84>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2b31      	cmp	r3, #49	; 0x31
 8005c8a:	d9f0      	bls.n	8005c6e <USB_SetCurrentMode+0x60>
 8005c8c:	e001      	b.n	8005c92 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e005      	b.n	8005c9e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2b32      	cmp	r3, #50	; 0x32
 8005c96:	d101      	bne.n	8005c9c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e000      	b.n	8005c9e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
	...

08005ca8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ca8:	b084      	sub	sp, #16
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b086      	sub	sp, #24
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
 8005cb2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005cb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	613b      	str	r3, [r7, #16]
 8005cc6:	e009      	b.n	8005cdc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	3340      	adds	r3, #64	; 0x40
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	613b      	str	r3, [r7, #16]
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	2b0e      	cmp	r3, #14
 8005ce0:	d9f2      	bls.n	8005cc8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d11c      	bne.n	8005d22 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cf6:	f043 0302 	orr.w	r3, r3, #2
 8005cfa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d00:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	601a      	str	r2, [r3, #0]
 8005d20:	e005      	b.n	8005d2e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d34:	461a      	mov	r2, r3
 8005d36:	2300      	movs	r3, #0
 8005d38:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d40:	4619      	mov	r1, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d48:	461a      	mov	r2, r3
 8005d4a:	680b      	ldr	r3, [r1, #0]
 8005d4c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d10c      	bne.n	8005d6e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d104      	bne.n	8005d64 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 f965 	bl	800602c <USB_SetDevSpeed>
 8005d62:	e008      	b.n	8005d76 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d64:	2101      	movs	r1, #1
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f960 	bl	800602c <USB_SetDevSpeed>
 8005d6c:	e003      	b.n	8005d76 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d6e:	2103      	movs	r1, #3
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f95b 	bl	800602c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d76:	2110      	movs	r1, #16
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 f8f3 	bl	8005f64 <USB_FlushTxFifo>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 f91f 	bl	8005fcc <USB_FlushRxFifo>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d001      	beq.n	8005d98 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d9e:	461a      	mov	r2, r3
 8005da0:	2300      	movs	r3, #0
 8005da2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005daa:	461a      	mov	r2, r3
 8005dac:	2300      	movs	r3, #0
 8005dae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db6:	461a      	mov	r2, r3
 8005db8:	2300      	movs	r3, #0
 8005dba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	613b      	str	r3, [r7, #16]
 8005dc0:	e043      	b.n	8005e4a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dd8:	d118      	bne.n	8005e0c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10a      	bne.n	8005df6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	015a      	lsls	r2, r3, #5
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4413      	add	r3, r2
 8005de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dec:	461a      	mov	r2, r3
 8005dee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005df2:	6013      	str	r3, [r2, #0]
 8005df4:	e013      	b.n	8005e1e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e02:	461a      	mov	r2, r3
 8005e04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e08:	6013      	str	r3, [r2, #0]
 8005e0a:	e008      	b.n	8005e1e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e18:	461a      	mov	r2, r3
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	015a      	lsls	r2, r3, #5
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	3301      	adds	r3, #1
 8005e48:	613b      	str	r3, [r7, #16]
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d3b7      	bcc.n	8005dc2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e52:	2300      	movs	r3, #0
 8005e54:	613b      	str	r3, [r7, #16]
 8005e56:	e043      	b.n	8005ee0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e6e:	d118      	bne.n	8005ea2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10a      	bne.n	8005e8c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	015a      	lsls	r2, r3, #5
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e82:	461a      	mov	r2, r3
 8005e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e88:	6013      	str	r3, [r2, #0]
 8005e8a:	e013      	b.n	8005eb4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e98:	461a      	mov	r2, r3
 8005e9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e9e:	6013      	str	r3, [r2, #0]
 8005ea0:	e008      	b.n	8005eb4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eae:	461a      	mov	r2, r3
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ed8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	3301      	adds	r3, #1
 8005ede:	613b      	str	r3, [r7, #16]
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d3b7      	bcc.n	8005e58 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ef6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005efa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005f08:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d105      	bne.n	8005f1c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	f043 0210 	orr.w	r2, r3, #16
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	699a      	ldr	r2, [r3, #24]
 8005f20:	4b0e      	ldr	r3, [pc, #56]	; (8005f5c <USB_DevInit+0x2b4>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d005      	beq.n	8005f3a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	f043 0208 	orr.w	r2, r3, #8
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d105      	bne.n	8005f4c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	699a      	ldr	r2, [r3, #24]
 8005f44:	4b06      	ldr	r3, [pc, #24]	; (8005f60 <USB_DevInit+0x2b8>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3718      	adds	r7, #24
 8005f52:	46bd      	mov	sp, r7
 8005f54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f58:	b004      	add	sp, #16
 8005f5a:	4770      	bx	lr
 8005f5c:	803c3800 	.word	0x803c3800
 8005f60:	40000004 	.word	0x40000004

08005f64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	3301      	adds	r3, #1
 8005f76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4a13      	ldr	r2, [pc, #76]	; (8005fc8 <USB_FlushTxFifo+0x64>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d901      	bls.n	8005f84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e01b      	b.n	8005fbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	daf2      	bge.n	8005f72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	019b      	lsls	r3, r3, #6
 8005f94:	f043 0220 	orr.w	r2, r3, #32
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	4a08      	ldr	r2, [pc, #32]	; (8005fc8 <USB_FlushTxFifo+0x64>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d901      	bls.n	8005fae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e006      	b.n	8005fbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	f003 0320 	and.w	r3, r3, #32
 8005fb6:	2b20      	cmp	r3, #32
 8005fb8:	d0f0      	beq.n	8005f9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3714      	adds	r7, #20
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr
 8005fc8:	00030d40 	.word	0x00030d40

08005fcc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	4a11      	ldr	r2, [pc, #68]	; (8006028 <USB_FlushRxFifo+0x5c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d901      	bls.n	8005fea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e018      	b.n	800601c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	daf2      	bge.n	8005fd8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2210      	movs	r2, #16
 8005ffa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	3301      	adds	r3, #1
 8006000:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	4a08      	ldr	r2, [pc, #32]	; (8006028 <USB_FlushRxFifo+0x5c>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d901      	bls.n	800600e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e006      	b.n	800601c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	f003 0310 	and.w	r3, r3, #16
 8006016:	2b10      	cmp	r3, #16
 8006018:	d0f0      	beq.n	8005ffc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3714      	adds	r7, #20
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr
 8006028:	00030d40 	.word	0x00030d40

0800602c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	460b      	mov	r3, r1
 8006036:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	78fb      	ldrb	r3, [r7, #3]
 8006046:	68f9      	ldr	r1, [r7, #12]
 8006048:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800604c:	4313      	orrs	r3, r2
 800604e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800605e:	b480      	push	{r7}
 8006060:	b085      	sub	sp, #20
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006078:	f023 0303 	bic.w	r3, r3, #3
 800607c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800608c:	f043 0302 	orr.w	r3, r3, #2
 8006090:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	f003 0301 	and.w	r3, r3, #1
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060c4:	2300      	movs	r3, #0
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	3301      	adds	r3, #1
 80060cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	4a13      	ldr	r2, [pc, #76]	; (8006120 <USB_CoreReset+0x64>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d901      	bls.n	80060da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e01b      	b.n	8006112 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	daf2      	bge.n	80060c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	f043 0201 	orr.w	r2, r3, #1
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	3301      	adds	r3, #1
 80060f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4a09      	ldr	r2, [pc, #36]	; (8006120 <USB_CoreReset+0x64>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d901      	bls.n	8006104 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e006      	b.n	8006112 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	2b01      	cmp	r3, #1
 800610e:	d0f0      	beq.n	80060f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	00030d40 	.word	0x00030d40

08006124 <siprintf>:
 8006124:	b40e      	push	{r1, r2, r3}
 8006126:	b500      	push	{lr}
 8006128:	b09c      	sub	sp, #112	; 0x70
 800612a:	ab1d      	add	r3, sp, #116	; 0x74
 800612c:	9002      	str	r0, [sp, #8]
 800612e:	9006      	str	r0, [sp, #24]
 8006130:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006134:	4809      	ldr	r0, [pc, #36]	; (800615c <siprintf+0x38>)
 8006136:	9107      	str	r1, [sp, #28]
 8006138:	9104      	str	r1, [sp, #16]
 800613a:	4909      	ldr	r1, [pc, #36]	; (8006160 <siprintf+0x3c>)
 800613c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006140:	9105      	str	r1, [sp, #20]
 8006142:	6800      	ldr	r0, [r0, #0]
 8006144:	9301      	str	r3, [sp, #4]
 8006146:	a902      	add	r1, sp, #8
 8006148:	f000 f992 	bl	8006470 <_svfiprintf_r>
 800614c:	9b02      	ldr	r3, [sp, #8]
 800614e:	2200      	movs	r2, #0
 8006150:	701a      	strb	r2, [r3, #0]
 8006152:	b01c      	add	sp, #112	; 0x70
 8006154:	f85d eb04 	ldr.w	lr, [sp], #4
 8006158:	b003      	add	sp, #12
 800615a:	4770      	bx	lr
 800615c:	20000058 	.word	0x20000058
 8006160:	ffff0208 	.word	0xffff0208

08006164 <memset>:
 8006164:	4402      	add	r2, r0
 8006166:	4603      	mov	r3, r0
 8006168:	4293      	cmp	r3, r2
 800616a:	d100      	bne.n	800616e <memset+0xa>
 800616c:	4770      	bx	lr
 800616e:	f803 1b01 	strb.w	r1, [r3], #1
 8006172:	e7f9      	b.n	8006168 <memset+0x4>

08006174 <__errno>:
 8006174:	4b01      	ldr	r3, [pc, #4]	; (800617c <__errno+0x8>)
 8006176:	6818      	ldr	r0, [r3, #0]
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	20000058 	.word	0x20000058

08006180 <__libc_init_array>:
 8006180:	b570      	push	{r4, r5, r6, lr}
 8006182:	4d0d      	ldr	r5, [pc, #52]	; (80061b8 <__libc_init_array+0x38>)
 8006184:	4c0d      	ldr	r4, [pc, #52]	; (80061bc <__libc_init_array+0x3c>)
 8006186:	1b64      	subs	r4, r4, r5
 8006188:	10a4      	asrs	r4, r4, #2
 800618a:	2600      	movs	r6, #0
 800618c:	42a6      	cmp	r6, r4
 800618e:	d109      	bne.n	80061a4 <__libc_init_array+0x24>
 8006190:	4d0b      	ldr	r5, [pc, #44]	; (80061c0 <__libc_init_array+0x40>)
 8006192:	4c0c      	ldr	r4, [pc, #48]	; (80061c4 <__libc_init_array+0x44>)
 8006194:	f000 fc6a 	bl	8006a6c <_init>
 8006198:	1b64      	subs	r4, r4, r5
 800619a:	10a4      	asrs	r4, r4, #2
 800619c:	2600      	movs	r6, #0
 800619e:	42a6      	cmp	r6, r4
 80061a0:	d105      	bne.n	80061ae <__libc_init_array+0x2e>
 80061a2:	bd70      	pop	{r4, r5, r6, pc}
 80061a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80061a8:	4798      	blx	r3
 80061aa:	3601      	adds	r6, #1
 80061ac:	e7ee      	b.n	800618c <__libc_init_array+0xc>
 80061ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80061b2:	4798      	blx	r3
 80061b4:	3601      	adds	r6, #1
 80061b6:	e7f2      	b.n	800619e <__libc_init_array+0x1e>
 80061b8:	08006af8 	.word	0x08006af8
 80061bc:	08006af8 	.word	0x08006af8
 80061c0:	08006af8 	.word	0x08006af8
 80061c4:	08006afc 	.word	0x08006afc

080061c8 <__retarget_lock_acquire_recursive>:
 80061c8:	4770      	bx	lr

080061ca <__retarget_lock_release_recursive>:
 80061ca:	4770      	bx	lr

080061cc <_free_r>:
 80061cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061ce:	2900      	cmp	r1, #0
 80061d0:	d044      	beq.n	800625c <_free_r+0x90>
 80061d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061d6:	9001      	str	r0, [sp, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f1a1 0404 	sub.w	r4, r1, #4
 80061de:	bfb8      	it	lt
 80061e0:	18e4      	addlt	r4, r4, r3
 80061e2:	f000 f8df 	bl	80063a4 <__malloc_lock>
 80061e6:	4a1e      	ldr	r2, [pc, #120]	; (8006260 <_free_r+0x94>)
 80061e8:	9801      	ldr	r0, [sp, #4]
 80061ea:	6813      	ldr	r3, [r2, #0]
 80061ec:	b933      	cbnz	r3, 80061fc <_free_r+0x30>
 80061ee:	6063      	str	r3, [r4, #4]
 80061f0:	6014      	str	r4, [r2, #0]
 80061f2:	b003      	add	sp, #12
 80061f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061f8:	f000 b8da 	b.w	80063b0 <__malloc_unlock>
 80061fc:	42a3      	cmp	r3, r4
 80061fe:	d908      	bls.n	8006212 <_free_r+0x46>
 8006200:	6825      	ldr	r5, [r4, #0]
 8006202:	1961      	adds	r1, r4, r5
 8006204:	428b      	cmp	r3, r1
 8006206:	bf01      	itttt	eq
 8006208:	6819      	ldreq	r1, [r3, #0]
 800620a:	685b      	ldreq	r3, [r3, #4]
 800620c:	1949      	addeq	r1, r1, r5
 800620e:	6021      	streq	r1, [r4, #0]
 8006210:	e7ed      	b.n	80061ee <_free_r+0x22>
 8006212:	461a      	mov	r2, r3
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	b10b      	cbz	r3, 800621c <_free_r+0x50>
 8006218:	42a3      	cmp	r3, r4
 800621a:	d9fa      	bls.n	8006212 <_free_r+0x46>
 800621c:	6811      	ldr	r1, [r2, #0]
 800621e:	1855      	adds	r5, r2, r1
 8006220:	42a5      	cmp	r5, r4
 8006222:	d10b      	bne.n	800623c <_free_r+0x70>
 8006224:	6824      	ldr	r4, [r4, #0]
 8006226:	4421      	add	r1, r4
 8006228:	1854      	adds	r4, r2, r1
 800622a:	42a3      	cmp	r3, r4
 800622c:	6011      	str	r1, [r2, #0]
 800622e:	d1e0      	bne.n	80061f2 <_free_r+0x26>
 8006230:	681c      	ldr	r4, [r3, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	6053      	str	r3, [r2, #4]
 8006236:	440c      	add	r4, r1
 8006238:	6014      	str	r4, [r2, #0]
 800623a:	e7da      	b.n	80061f2 <_free_r+0x26>
 800623c:	d902      	bls.n	8006244 <_free_r+0x78>
 800623e:	230c      	movs	r3, #12
 8006240:	6003      	str	r3, [r0, #0]
 8006242:	e7d6      	b.n	80061f2 <_free_r+0x26>
 8006244:	6825      	ldr	r5, [r4, #0]
 8006246:	1961      	adds	r1, r4, r5
 8006248:	428b      	cmp	r3, r1
 800624a:	bf04      	itt	eq
 800624c:	6819      	ldreq	r1, [r3, #0]
 800624e:	685b      	ldreq	r3, [r3, #4]
 8006250:	6063      	str	r3, [r4, #4]
 8006252:	bf04      	itt	eq
 8006254:	1949      	addeq	r1, r1, r5
 8006256:	6021      	streq	r1, [r4, #0]
 8006258:	6054      	str	r4, [r2, #4]
 800625a:	e7ca      	b.n	80061f2 <_free_r+0x26>
 800625c:	b003      	add	sp, #12
 800625e:	bd30      	pop	{r4, r5, pc}
 8006260:	20000b1c 	.word	0x20000b1c

08006264 <sbrk_aligned>:
 8006264:	b570      	push	{r4, r5, r6, lr}
 8006266:	4e0e      	ldr	r6, [pc, #56]	; (80062a0 <sbrk_aligned+0x3c>)
 8006268:	460c      	mov	r4, r1
 800626a:	6831      	ldr	r1, [r6, #0]
 800626c:	4605      	mov	r5, r0
 800626e:	b911      	cbnz	r1, 8006276 <sbrk_aligned+0x12>
 8006270:	f000 fba6 	bl	80069c0 <_sbrk_r>
 8006274:	6030      	str	r0, [r6, #0]
 8006276:	4621      	mov	r1, r4
 8006278:	4628      	mov	r0, r5
 800627a:	f000 fba1 	bl	80069c0 <_sbrk_r>
 800627e:	1c43      	adds	r3, r0, #1
 8006280:	d00a      	beq.n	8006298 <sbrk_aligned+0x34>
 8006282:	1cc4      	adds	r4, r0, #3
 8006284:	f024 0403 	bic.w	r4, r4, #3
 8006288:	42a0      	cmp	r0, r4
 800628a:	d007      	beq.n	800629c <sbrk_aligned+0x38>
 800628c:	1a21      	subs	r1, r4, r0
 800628e:	4628      	mov	r0, r5
 8006290:	f000 fb96 	bl	80069c0 <_sbrk_r>
 8006294:	3001      	adds	r0, #1
 8006296:	d101      	bne.n	800629c <sbrk_aligned+0x38>
 8006298:	f04f 34ff 	mov.w	r4, #4294967295
 800629c:	4620      	mov	r0, r4
 800629e:	bd70      	pop	{r4, r5, r6, pc}
 80062a0:	20000b20 	.word	0x20000b20

080062a4 <_malloc_r>:
 80062a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062a8:	1ccd      	adds	r5, r1, #3
 80062aa:	f025 0503 	bic.w	r5, r5, #3
 80062ae:	3508      	adds	r5, #8
 80062b0:	2d0c      	cmp	r5, #12
 80062b2:	bf38      	it	cc
 80062b4:	250c      	movcc	r5, #12
 80062b6:	2d00      	cmp	r5, #0
 80062b8:	4607      	mov	r7, r0
 80062ba:	db01      	blt.n	80062c0 <_malloc_r+0x1c>
 80062bc:	42a9      	cmp	r1, r5
 80062be:	d905      	bls.n	80062cc <_malloc_r+0x28>
 80062c0:	230c      	movs	r3, #12
 80062c2:	603b      	str	r3, [r7, #0]
 80062c4:	2600      	movs	r6, #0
 80062c6:	4630      	mov	r0, r6
 80062c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80063a0 <_malloc_r+0xfc>
 80062d0:	f000 f868 	bl	80063a4 <__malloc_lock>
 80062d4:	f8d8 3000 	ldr.w	r3, [r8]
 80062d8:	461c      	mov	r4, r3
 80062da:	bb5c      	cbnz	r4, 8006334 <_malloc_r+0x90>
 80062dc:	4629      	mov	r1, r5
 80062de:	4638      	mov	r0, r7
 80062e0:	f7ff ffc0 	bl	8006264 <sbrk_aligned>
 80062e4:	1c43      	adds	r3, r0, #1
 80062e6:	4604      	mov	r4, r0
 80062e8:	d155      	bne.n	8006396 <_malloc_r+0xf2>
 80062ea:	f8d8 4000 	ldr.w	r4, [r8]
 80062ee:	4626      	mov	r6, r4
 80062f0:	2e00      	cmp	r6, #0
 80062f2:	d145      	bne.n	8006380 <_malloc_r+0xdc>
 80062f4:	2c00      	cmp	r4, #0
 80062f6:	d048      	beq.n	800638a <_malloc_r+0xe6>
 80062f8:	6823      	ldr	r3, [r4, #0]
 80062fa:	4631      	mov	r1, r6
 80062fc:	4638      	mov	r0, r7
 80062fe:	eb04 0903 	add.w	r9, r4, r3
 8006302:	f000 fb5d 	bl	80069c0 <_sbrk_r>
 8006306:	4581      	cmp	r9, r0
 8006308:	d13f      	bne.n	800638a <_malloc_r+0xe6>
 800630a:	6821      	ldr	r1, [r4, #0]
 800630c:	1a6d      	subs	r5, r5, r1
 800630e:	4629      	mov	r1, r5
 8006310:	4638      	mov	r0, r7
 8006312:	f7ff ffa7 	bl	8006264 <sbrk_aligned>
 8006316:	3001      	adds	r0, #1
 8006318:	d037      	beq.n	800638a <_malloc_r+0xe6>
 800631a:	6823      	ldr	r3, [r4, #0]
 800631c:	442b      	add	r3, r5
 800631e:	6023      	str	r3, [r4, #0]
 8006320:	f8d8 3000 	ldr.w	r3, [r8]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d038      	beq.n	800639a <_malloc_r+0xf6>
 8006328:	685a      	ldr	r2, [r3, #4]
 800632a:	42a2      	cmp	r2, r4
 800632c:	d12b      	bne.n	8006386 <_malloc_r+0xe2>
 800632e:	2200      	movs	r2, #0
 8006330:	605a      	str	r2, [r3, #4]
 8006332:	e00f      	b.n	8006354 <_malloc_r+0xb0>
 8006334:	6822      	ldr	r2, [r4, #0]
 8006336:	1b52      	subs	r2, r2, r5
 8006338:	d41f      	bmi.n	800637a <_malloc_r+0xd6>
 800633a:	2a0b      	cmp	r2, #11
 800633c:	d917      	bls.n	800636e <_malloc_r+0xca>
 800633e:	1961      	adds	r1, r4, r5
 8006340:	42a3      	cmp	r3, r4
 8006342:	6025      	str	r5, [r4, #0]
 8006344:	bf18      	it	ne
 8006346:	6059      	strne	r1, [r3, #4]
 8006348:	6863      	ldr	r3, [r4, #4]
 800634a:	bf08      	it	eq
 800634c:	f8c8 1000 	streq.w	r1, [r8]
 8006350:	5162      	str	r2, [r4, r5]
 8006352:	604b      	str	r3, [r1, #4]
 8006354:	4638      	mov	r0, r7
 8006356:	f104 060b 	add.w	r6, r4, #11
 800635a:	f000 f829 	bl	80063b0 <__malloc_unlock>
 800635e:	f026 0607 	bic.w	r6, r6, #7
 8006362:	1d23      	adds	r3, r4, #4
 8006364:	1af2      	subs	r2, r6, r3
 8006366:	d0ae      	beq.n	80062c6 <_malloc_r+0x22>
 8006368:	1b9b      	subs	r3, r3, r6
 800636a:	50a3      	str	r3, [r4, r2]
 800636c:	e7ab      	b.n	80062c6 <_malloc_r+0x22>
 800636e:	42a3      	cmp	r3, r4
 8006370:	6862      	ldr	r2, [r4, #4]
 8006372:	d1dd      	bne.n	8006330 <_malloc_r+0x8c>
 8006374:	f8c8 2000 	str.w	r2, [r8]
 8006378:	e7ec      	b.n	8006354 <_malloc_r+0xb0>
 800637a:	4623      	mov	r3, r4
 800637c:	6864      	ldr	r4, [r4, #4]
 800637e:	e7ac      	b.n	80062da <_malloc_r+0x36>
 8006380:	4634      	mov	r4, r6
 8006382:	6876      	ldr	r6, [r6, #4]
 8006384:	e7b4      	b.n	80062f0 <_malloc_r+0x4c>
 8006386:	4613      	mov	r3, r2
 8006388:	e7cc      	b.n	8006324 <_malloc_r+0x80>
 800638a:	230c      	movs	r3, #12
 800638c:	603b      	str	r3, [r7, #0]
 800638e:	4638      	mov	r0, r7
 8006390:	f000 f80e 	bl	80063b0 <__malloc_unlock>
 8006394:	e797      	b.n	80062c6 <_malloc_r+0x22>
 8006396:	6025      	str	r5, [r4, #0]
 8006398:	e7dc      	b.n	8006354 <_malloc_r+0xb0>
 800639a:	605b      	str	r3, [r3, #4]
 800639c:	deff      	udf	#255	; 0xff
 800639e:	bf00      	nop
 80063a0:	20000b1c 	.word	0x20000b1c

080063a4 <__malloc_lock>:
 80063a4:	4801      	ldr	r0, [pc, #4]	; (80063ac <__malloc_lock+0x8>)
 80063a6:	f7ff bf0f 	b.w	80061c8 <__retarget_lock_acquire_recursive>
 80063aa:	bf00      	nop
 80063ac:	20000b18 	.word	0x20000b18

080063b0 <__malloc_unlock>:
 80063b0:	4801      	ldr	r0, [pc, #4]	; (80063b8 <__malloc_unlock+0x8>)
 80063b2:	f7ff bf0a 	b.w	80061ca <__retarget_lock_release_recursive>
 80063b6:	bf00      	nop
 80063b8:	20000b18 	.word	0x20000b18

080063bc <__ssputs_r>:
 80063bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063c0:	688e      	ldr	r6, [r1, #8]
 80063c2:	461f      	mov	r7, r3
 80063c4:	42be      	cmp	r6, r7
 80063c6:	680b      	ldr	r3, [r1, #0]
 80063c8:	4682      	mov	sl, r0
 80063ca:	460c      	mov	r4, r1
 80063cc:	4690      	mov	r8, r2
 80063ce:	d82c      	bhi.n	800642a <__ssputs_r+0x6e>
 80063d0:	898a      	ldrh	r2, [r1, #12]
 80063d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063d6:	d026      	beq.n	8006426 <__ssputs_r+0x6a>
 80063d8:	6965      	ldr	r5, [r4, #20]
 80063da:	6909      	ldr	r1, [r1, #16]
 80063dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063e0:	eba3 0901 	sub.w	r9, r3, r1
 80063e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063e8:	1c7b      	adds	r3, r7, #1
 80063ea:	444b      	add	r3, r9
 80063ec:	106d      	asrs	r5, r5, #1
 80063ee:	429d      	cmp	r5, r3
 80063f0:	bf38      	it	cc
 80063f2:	461d      	movcc	r5, r3
 80063f4:	0553      	lsls	r3, r2, #21
 80063f6:	d527      	bpl.n	8006448 <__ssputs_r+0x8c>
 80063f8:	4629      	mov	r1, r5
 80063fa:	f7ff ff53 	bl	80062a4 <_malloc_r>
 80063fe:	4606      	mov	r6, r0
 8006400:	b360      	cbz	r0, 800645c <__ssputs_r+0xa0>
 8006402:	6921      	ldr	r1, [r4, #16]
 8006404:	464a      	mov	r2, r9
 8006406:	f000 faeb 	bl	80069e0 <memcpy>
 800640a:	89a3      	ldrh	r3, [r4, #12]
 800640c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006414:	81a3      	strh	r3, [r4, #12]
 8006416:	6126      	str	r6, [r4, #16]
 8006418:	6165      	str	r5, [r4, #20]
 800641a:	444e      	add	r6, r9
 800641c:	eba5 0509 	sub.w	r5, r5, r9
 8006420:	6026      	str	r6, [r4, #0]
 8006422:	60a5      	str	r5, [r4, #8]
 8006424:	463e      	mov	r6, r7
 8006426:	42be      	cmp	r6, r7
 8006428:	d900      	bls.n	800642c <__ssputs_r+0x70>
 800642a:	463e      	mov	r6, r7
 800642c:	6820      	ldr	r0, [r4, #0]
 800642e:	4632      	mov	r2, r6
 8006430:	4641      	mov	r1, r8
 8006432:	f000 faab 	bl	800698c <memmove>
 8006436:	68a3      	ldr	r3, [r4, #8]
 8006438:	1b9b      	subs	r3, r3, r6
 800643a:	60a3      	str	r3, [r4, #8]
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	4433      	add	r3, r6
 8006440:	6023      	str	r3, [r4, #0]
 8006442:	2000      	movs	r0, #0
 8006444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006448:	462a      	mov	r2, r5
 800644a:	f000 fad7 	bl	80069fc <_realloc_r>
 800644e:	4606      	mov	r6, r0
 8006450:	2800      	cmp	r0, #0
 8006452:	d1e0      	bne.n	8006416 <__ssputs_r+0x5a>
 8006454:	6921      	ldr	r1, [r4, #16]
 8006456:	4650      	mov	r0, sl
 8006458:	f7ff feb8 	bl	80061cc <_free_r>
 800645c:	230c      	movs	r3, #12
 800645e:	f8ca 3000 	str.w	r3, [sl]
 8006462:	89a3      	ldrh	r3, [r4, #12]
 8006464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006468:	81a3      	strh	r3, [r4, #12]
 800646a:	f04f 30ff 	mov.w	r0, #4294967295
 800646e:	e7e9      	b.n	8006444 <__ssputs_r+0x88>

08006470 <_svfiprintf_r>:
 8006470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006474:	4698      	mov	r8, r3
 8006476:	898b      	ldrh	r3, [r1, #12]
 8006478:	061b      	lsls	r3, r3, #24
 800647a:	b09d      	sub	sp, #116	; 0x74
 800647c:	4607      	mov	r7, r0
 800647e:	460d      	mov	r5, r1
 8006480:	4614      	mov	r4, r2
 8006482:	d50e      	bpl.n	80064a2 <_svfiprintf_r+0x32>
 8006484:	690b      	ldr	r3, [r1, #16]
 8006486:	b963      	cbnz	r3, 80064a2 <_svfiprintf_r+0x32>
 8006488:	2140      	movs	r1, #64	; 0x40
 800648a:	f7ff ff0b 	bl	80062a4 <_malloc_r>
 800648e:	6028      	str	r0, [r5, #0]
 8006490:	6128      	str	r0, [r5, #16]
 8006492:	b920      	cbnz	r0, 800649e <_svfiprintf_r+0x2e>
 8006494:	230c      	movs	r3, #12
 8006496:	603b      	str	r3, [r7, #0]
 8006498:	f04f 30ff 	mov.w	r0, #4294967295
 800649c:	e0d0      	b.n	8006640 <_svfiprintf_r+0x1d0>
 800649e:	2340      	movs	r3, #64	; 0x40
 80064a0:	616b      	str	r3, [r5, #20]
 80064a2:	2300      	movs	r3, #0
 80064a4:	9309      	str	r3, [sp, #36]	; 0x24
 80064a6:	2320      	movs	r3, #32
 80064a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80064b0:	2330      	movs	r3, #48	; 0x30
 80064b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006658 <_svfiprintf_r+0x1e8>
 80064b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064ba:	f04f 0901 	mov.w	r9, #1
 80064be:	4623      	mov	r3, r4
 80064c0:	469a      	mov	sl, r3
 80064c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064c6:	b10a      	cbz	r2, 80064cc <_svfiprintf_r+0x5c>
 80064c8:	2a25      	cmp	r2, #37	; 0x25
 80064ca:	d1f9      	bne.n	80064c0 <_svfiprintf_r+0x50>
 80064cc:	ebba 0b04 	subs.w	fp, sl, r4
 80064d0:	d00b      	beq.n	80064ea <_svfiprintf_r+0x7a>
 80064d2:	465b      	mov	r3, fp
 80064d4:	4622      	mov	r2, r4
 80064d6:	4629      	mov	r1, r5
 80064d8:	4638      	mov	r0, r7
 80064da:	f7ff ff6f 	bl	80063bc <__ssputs_r>
 80064de:	3001      	adds	r0, #1
 80064e0:	f000 80a9 	beq.w	8006636 <_svfiprintf_r+0x1c6>
 80064e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064e6:	445a      	add	r2, fp
 80064e8:	9209      	str	r2, [sp, #36]	; 0x24
 80064ea:	f89a 3000 	ldrb.w	r3, [sl]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f000 80a1 	beq.w	8006636 <_svfiprintf_r+0x1c6>
 80064f4:	2300      	movs	r3, #0
 80064f6:	f04f 32ff 	mov.w	r2, #4294967295
 80064fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064fe:	f10a 0a01 	add.w	sl, sl, #1
 8006502:	9304      	str	r3, [sp, #16]
 8006504:	9307      	str	r3, [sp, #28]
 8006506:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800650a:	931a      	str	r3, [sp, #104]	; 0x68
 800650c:	4654      	mov	r4, sl
 800650e:	2205      	movs	r2, #5
 8006510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006514:	4850      	ldr	r0, [pc, #320]	; (8006658 <_svfiprintf_r+0x1e8>)
 8006516:	f7f9 fe9b 	bl	8000250 <memchr>
 800651a:	9a04      	ldr	r2, [sp, #16]
 800651c:	b9d8      	cbnz	r0, 8006556 <_svfiprintf_r+0xe6>
 800651e:	06d0      	lsls	r0, r2, #27
 8006520:	bf44      	itt	mi
 8006522:	2320      	movmi	r3, #32
 8006524:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006528:	0711      	lsls	r1, r2, #28
 800652a:	bf44      	itt	mi
 800652c:	232b      	movmi	r3, #43	; 0x2b
 800652e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006532:	f89a 3000 	ldrb.w	r3, [sl]
 8006536:	2b2a      	cmp	r3, #42	; 0x2a
 8006538:	d015      	beq.n	8006566 <_svfiprintf_r+0xf6>
 800653a:	9a07      	ldr	r2, [sp, #28]
 800653c:	4654      	mov	r4, sl
 800653e:	2000      	movs	r0, #0
 8006540:	f04f 0c0a 	mov.w	ip, #10
 8006544:	4621      	mov	r1, r4
 8006546:	f811 3b01 	ldrb.w	r3, [r1], #1
 800654a:	3b30      	subs	r3, #48	; 0x30
 800654c:	2b09      	cmp	r3, #9
 800654e:	d94d      	bls.n	80065ec <_svfiprintf_r+0x17c>
 8006550:	b1b0      	cbz	r0, 8006580 <_svfiprintf_r+0x110>
 8006552:	9207      	str	r2, [sp, #28]
 8006554:	e014      	b.n	8006580 <_svfiprintf_r+0x110>
 8006556:	eba0 0308 	sub.w	r3, r0, r8
 800655a:	fa09 f303 	lsl.w	r3, r9, r3
 800655e:	4313      	orrs	r3, r2
 8006560:	9304      	str	r3, [sp, #16]
 8006562:	46a2      	mov	sl, r4
 8006564:	e7d2      	b.n	800650c <_svfiprintf_r+0x9c>
 8006566:	9b03      	ldr	r3, [sp, #12]
 8006568:	1d19      	adds	r1, r3, #4
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	9103      	str	r1, [sp, #12]
 800656e:	2b00      	cmp	r3, #0
 8006570:	bfbb      	ittet	lt
 8006572:	425b      	neglt	r3, r3
 8006574:	f042 0202 	orrlt.w	r2, r2, #2
 8006578:	9307      	strge	r3, [sp, #28]
 800657a:	9307      	strlt	r3, [sp, #28]
 800657c:	bfb8      	it	lt
 800657e:	9204      	strlt	r2, [sp, #16]
 8006580:	7823      	ldrb	r3, [r4, #0]
 8006582:	2b2e      	cmp	r3, #46	; 0x2e
 8006584:	d10c      	bne.n	80065a0 <_svfiprintf_r+0x130>
 8006586:	7863      	ldrb	r3, [r4, #1]
 8006588:	2b2a      	cmp	r3, #42	; 0x2a
 800658a:	d134      	bne.n	80065f6 <_svfiprintf_r+0x186>
 800658c:	9b03      	ldr	r3, [sp, #12]
 800658e:	1d1a      	adds	r2, r3, #4
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	9203      	str	r2, [sp, #12]
 8006594:	2b00      	cmp	r3, #0
 8006596:	bfb8      	it	lt
 8006598:	f04f 33ff 	movlt.w	r3, #4294967295
 800659c:	3402      	adds	r4, #2
 800659e:	9305      	str	r3, [sp, #20]
 80065a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006668 <_svfiprintf_r+0x1f8>
 80065a4:	7821      	ldrb	r1, [r4, #0]
 80065a6:	2203      	movs	r2, #3
 80065a8:	4650      	mov	r0, sl
 80065aa:	f7f9 fe51 	bl	8000250 <memchr>
 80065ae:	b138      	cbz	r0, 80065c0 <_svfiprintf_r+0x150>
 80065b0:	9b04      	ldr	r3, [sp, #16]
 80065b2:	eba0 000a 	sub.w	r0, r0, sl
 80065b6:	2240      	movs	r2, #64	; 0x40
 80065b8:	4082      	lsls	r2, r0
 80065ba:	4313      	orrs	r3, r2
 80065bc:	3401      	adds	r4, #1
 80065be:	9304      	str	r3, [sp, #16]
 80065c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065c4:	4825      	ldr	r0, [pc, #148]	; (800665c <_svfiprintf_r+0x1ec>)
 80065c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065ca:	2206      	movs	r2, #6
 80065cc:	f7f9 fe40 	bl	8000250 <memchr>
 80065d0:	2800      	cmp	r0, #0
 80065d2:	d038      	beq.n	8006646 <_svfiprintf_r+0x1d6>
 80065d4:	4b22      	ldr	r3, [pc, #136]	; (8006660 <_svfiprintf_r+0x1f0>)
 80065d6:	bb1b      	cbnz	r3, 8006620 <_svfiprintf_r+0x1b0>
 80065d8:	9b03      	ldr	r3, [sp, #12]
 80065da:	3307      	adds	r3, #7
 80065dc:	f023 0307 	bic.w	r3, r3, #7
 80065e0:	3308      	adds	r3, #8
 80065e2:	9303      	str	r3, [sp, #12]
 80065e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065e6:	4433      	add	r3, r6
 80065e8:	9309      	str	r3, [sp, #36]	; 0x24
 80065ea:	e768      	b.n	80064be <_svfiprintf_r+0x4e>
 80065ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80065f0:	460c      	mov	r4, r1
 80065f2:	2001      	movs	r0, #1
 80065f4:	e7a6      	b.n	8006544 <_svfiprintf_r+0xd4>
 80065f6:	2300      	movs	r3, #0
 80065f8:	3401      	adds	r4, #1
 80065fa:	9305      	str	r3, [sp, #20]
 80065fc:	4619      	mov	r1, r3
 80065fe:	f04f 0c0a 	mov.w	ip, #10
 8006602:	4620      	mov	r0, r4
 8006604:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006608:	3a30      	subs	r2, #48	; 0x30
 800660a:	2a09      	cmp	r2, #9
 800660c:	d903      	bls.n	8006616 <_svfiprintf_r+0x1a6>
 800660e:	2b00      	cmp	r3, #0
 8006610:	d0c6      	beq.n	80065a0 <_svfiprintf_r+0x130>
 8006612:	9105      	str	r1, [sp, #20]
 8006614:	e7c4      	b.n	80065a0 <_svfiprintf_r+0x130>
 8006616:	fb0c 2101 	mla	r1, ip, r1, r2
 800661a:	4604      	mov	r4, r0
 800661c:	2301      	movs	r3, #1
 800661e:	e7f0      	b.n	8006602 <_svfiprintf_r+0x192>
 8006620:	ab03      	add	r3, sp, #12
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	462a      	mov	r2, r5
 8006626:	4b0f      	ldr	r3, [pc, #60]	; (8006664 <_svfiprintf_r+0x1f4>)
 8006628:	a904      	add	r1, sp, #16
 800662a:	4638      	mov	r0, r7
 800662c:	f3af 8000 	nop.w
 8006630:	1c42      	adds	r2, r0, #1
 8006632:	4606      	mov	r6, r0
 8006634:	d1d6      	bne.n	80065e4 <_svfiprintf_r+0x174>
 8006636:	89ab      	ldrh	r3, [r5, #12]
 8006638:	065b      	lsls	r3, r3, #25
 800663a:	f53f af2d 	bmi.w	8006498 <_svfiprintf_r+0x28>
 800663e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006640:	b01d      	add	sp, #116	; 0x74
 8006642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006646:	ab03      	add	r3, sp, #12
 8006648:	9300      	str	r3, [sp, #0]
 800664a:	462a      	mov	r2, r5
 800664c:	4b05      	ldr	r3, [pc, #20]	; (8006664 <_svfiprintf_r+0x1f4>)
 800664e:	a904      	add	r1, sp, #16
 8006650:	4638      	mov	r0, r7
 8006652:	f000 f879 	bl	8006748 <_printf_i>
 8006656:	e7eb      	b.n	8006630 <_svfiprintf_r+0x1c0>
 8006658:	08006abc 	.word	0x08006abc
 800665c:	08006ac6 	.word	0x08006ac6
 8006660:	00000000 	.word	0x00000000
 8006664:	080063bd 	.word	0x080063bd
 8006668:	08006ac2 	.word	0x08006ac2

0800666c <_printf_common>:
 800666c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006670:	4616      	mov	r6, r2
 8006672:	4699      	mov	r9, r3
 8006674:	688a      	ldr	r2, [r1, #8]
 8006676:	690b      	ldr	r3, [r1, #16]
 8006678:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800667c:	4293      	cmp	r3, r2
 800667e:	bfb8      	it	lt
 8006680:	4613      	movlt	r3, r2
 8006682:	6033      	str	r3, [r6, #0]
 8006684:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006688:	4607      	mov	r7, r0
 800668a:	460c      	mov	r4, r1
 800668c:	b10a      	cbz	r2, 8006692 <_printf_common+0x26>
 800668e:	3301      	adds	r3, #1
 8006690:	6033      	str	r3, [r6, #0]
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	0699      	lsls	r1, r3, #26
 8006696:	bf42      	ittt	mi
 8006698:	6833      	ldrmi	r3, [r6, #0]
 800669a:	3302      	addmi	r3, #2
 800669c:	6033      	strmi	r3, [r6, #0]
 800669e:	6825      	ldr	r5, [r4, #0]
 80066a0:	f015 0506 	ands.w	r5, r5, #6
 80066a4:	d106      	bne.n	80066b4 <_printf_common+0x48>
 80066a6:	f104 0a19 	add.w	sl, r4, #25
 80066aa:	68e3      	ldr	r3, [r4, #12]
 80066ac:	6832      	ldr	r2, [r6, #0]
 80066ae:	1a9b      	subs	r3, r3, r2
 80066b0:	42ab      	cmp	r3, r5
 80066b2:	dc26      	bgt.n	8006702 <_printf_common+0x96>
 80066b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066b8:	1e13      	subs	r3, r2, #0
 80066ba:	6822      	ldr	r2, [r4, #0]
 80066bc:	bf18      	it	ne
 80066be:	2301      	movne	r3, #1
 80066c0:	0692      	lsls	r2, r2, #26
 80066c2:	d42b      	bmi.n	800671c <_printf_common+0xb0>
 80066c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066c8:	4649      	mov	r1, r9
 80066ca:	4638      	mov	r0, r7
 80066cc:	47c0      	blx	r8
 80066ce:	3001      	adds	r0, #1
 80066d0:	d01e      	beq.n	8006710 <_printf_common+0xa4>
 80066d2:	6823      	ldr	r3, [r4, #0]
 80066d4:	6922      	ldr	r2, [r4, #16]
 80066d6:	f003 0306 	and.w	r3, r3, #6
 80066da:	2b04      	cmp	r3, #4
 80066dc:	bf02      	ittt	eq
 80066de:	68e5      	ldreq	r5, [r4, #12]
 80066e0:	6833      	ldreq	r3, [r6, #0]
 80066e2:	1aed      	subeq	r5, r5, r3
 80066e4:	68a3      	ldr	r3, [r4, #8]
 80066e6:	bf0c      	ite	eq
 80066e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066ec:	2500      	movne	r5, #0
 80066ee:	4293      	cmp	r3, r2
 80066f0:	bfc4      	itt	gt
 80066f2:	1a9b      	subgt	r3, r3, r2
 80066f4:	18ed      	addgt	r5, r5, r3
 80066f6:	2600      	movs	r6, #0
 80066f8:	341a      	adds	r4, #26
 80066fa:	42b5      	cmp	r5, r6
 80066fc:	d11a      	bne.n	8006734 <_printf_common+0xc8>
 80066fe:	2000      	movs	r0, #0
 8006700:	e008      	b.n	8006714 <_printf_common+0xa8>
 8006702:	2301      	movs	r3, #1
 8006704:	4652      	mov	r2, sl
 8006706:	4649      	mov	r1, r9
 8006708:	4638      	mov	r0, r7
 800670a:	47c0      	blx	r8
 800670c:	3001      	adds	r0, #1
 800670e:	d103      	bne.n	8006718 <_printf_common+0xac>
 8006710:	f04f 30ff 	mov.w	r0, #4294967295
 8006714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006718:	3501      	adds	r5, #1
 800671a:	e7c6      	b.n	80066aa <_printf_common+0x3e>
 800671c:	18e1      	adds	r1, r4, r3
 800671e:	1c5a      	adds	r2, r3, #1
 8006720:	2030      	movs	r0, #48	; 0x30
 8006722:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006726:	4422      	add	r2, r4
 8006728:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800672c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006730:	3302      	adds	r3, #2
 8006732:	e7c7      	b.n	80066c4 <_printf_common+0x58>
 8006734:	2301      	movs	r3, #1
 8006736:	4622      	mov	r2, r4
 8006738:	4649      	mov	r1, r9
 800673a:	4638      	mov	r0, r7
 800673c:	47c0      	blx	r8
 800673e:	3001      	adds	r0, #1
 8006740:	d0e6      	beq.n	8006710 <_printf_common+0xa4>
 8006742:	3601      	adds	r6, #1
 8006744:	e7d9      	b.n	80066fa <_printf_common+0x8e>
	...

08006748 <_printf_i>:
 8006748:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800674c:	7e0f      	ldrb	r7, [r1, #24]
 800674e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006750:	2f78      	cmp	r7, #120	; 0x78
 8006752:	4691      	mov	r9, r2
 8006754:	4680      	mov	r8, r0
 8006756:	460c      	mov	r4, r1
 8006758:	469a      	mov	sl, r3
 800675a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800675e:	d807      	bhi.n	8006770 <_printf_i+0x28>
 8006760:	2f62      	cmp	r7, #98	; 0x62
 8006762:	d80a      	bhi.n	800677a <_printf_i+0x32>
 8006764:	2f00      	cmp	r7, #0
 8006766:	f000 80d4 	beq.w	8006912 <_printf_i+0x1ca>
 800676a:	2f58      	cmp	r7, #88	; 0x58
 800676c:	f000 80c0 	beq.w	80068f0 <_printf_i+0x1a8>
 8006770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006774:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006778:	e03a      	b.n	80067f0 <_printf_i+0xa8>
 800677a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800677e:	2b15      	cmp	r3, #21
 8006780:	d8f6      	bhi.n	8006770 <_printf_i+0x28>
 8006782:	a101      	add	r1, pc, #4	; (adr r1, 8006788 <_printf_i+0x40>)
 8006784:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006788:	080067e1 	.word	0x080067e1
 800678c:	080067f5 	.word	0x080067f5
 8006790:	08006771 	.word	0x08006771
 8006794:	08006771 	.word	0x08006771
 8006798:	08006771 	.word	0x08006771
 800679c:	08006771 	.word	0x08006771
 80067a0:	080067f5 	.word	0x080067f5
 80067a4:	08006771 	.word	0x08006771
 80067a8:	08006771 	.word	0x08006771
 80067ac:	08006771 	.word	0x08006771
 80067b0:	08006771 	.word	0x08006771
 80067b4:	080068f9 	.word	0x080068f9
 80067b8:	08006821 	.word	0x08006821
 80067bc:	080068b3 	.word	0x080068b3
 80067c0:	08006771 	.word	0x08006771
 80067c4:	08006771 	.word	0x08006771
 80067c8:	0800691b 	.word	0x0800691b
 80067cc:	08006771 	.word	0x08006771
 80067d0:	08006821 	.word	0x08006821
 80067d4:	08006771 	.word	0x08006771
 80067d8:	08006771 	.word	0x08006771
 80067dc:	080068bb 	.word	0x080068bb
 80067e0:	682b      	ldr	r3, [r5, #0]
 80067e2:	1d1a      	adds	r2, r3, #4
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	602a      	str	r2, [r5, #0]
 80067e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067f0:	2301      	movs	r3, #1
 80067f2:	e09f      	b.n	8006934 <_printf_i+0x1ec>
 80067f4:	6820      	ldr	r0, [r4, #0]
 80067f6:	682b      	ldr	r3, [r5, #0]
 80067f8:	0607      	lsls	r7, r0, #24
 80067fa:	f103 0104 	add.w	r1, r3, #4
 80067fe:	6029      	str	r1, [r5, #0]
 8006800:	d501      	bpl.n	8006806 <_printf_i+0xbe>
 8006802:	681e      	ldr	r6, [r3, #0]
 8006804:	e003      	b.n	800680e <_printf_i+0xc6>
 8006806:	0646      	lsls	r6, r0, #25
 8006808:	d5fb      	bpl.n	8006802 <_printf_i+0xba>
 800680a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800680e:	2e00      	cmp	r6, #0
 8006810:	da03      	bge.n	800681a <_printf_i+0xd2>
 8006812:	232d      	movs	r3, #45	; 0x2d
 8006814:	4276      	negs	r6, r6
 8006816:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800681a:	485a      	ldr	r0, [pc, #360]	; (8006984 <_printf_i+0x23c>)
 800681c:	230a      	movs	r3, #10
 800681e:	e012      	b.n	8006846 <_printf_i+0xfe>
 8006820:	682b      	ldr	r3, [r5, #0]
 8006822:	6820      	ldr	r0, [r4, #0]
 8006824:	1d19      	adds	r1, r3, #4
 8006826:	6029      	str	r1, [r5, #0]
 8006828:	0605      	lsls	r5, r0, #24
 800682a:	d501      	bpl.n	8006830 <_printf_i+0xe8>
 800682c:	681e      	ldr	r6, [r3, #0]
 800682e:	e002      	b.n	8006836 <_printf_i+0xee>
 8006830:	0641      	lsls	r1, r0, #25
 8006832:	d5fb      	bpl.n	800682c <_printf_i+0xe4>
 8006834:	881e      	ldrh	r6, [r3, #0]
 8006836:	4853      	ldr	r0, [pc, #332]	; (8006984 <_printf_i+0x23c>)
 8006838:	2f6f      	cmp	r7, #111	; 0x6f
 800683a:	bf0c      	ite	eq
 800683c:	2308      	moveq	r3, #8
 800683e:	230a      	movne	r3, #10
 8006840:	2100      	movs	r1, #0
 8006842:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006846:	6865      	ldr	r5, [r4, #4]
 8006848:	60a5      	str	r5, [r4, #8]
 800684a:	2d00      	cmp	r5, #0
 800684c:	bfa2      	ittt	ge
 800684e:	6821      	ldrge	r1, [r4, #0]
 8006850:	f021 0104 	bicge.w	r1, r1, #4
 8006854:	6021      	strge	r1, [r4, #0]
 8006856:	b90e      	cbnz	r6, 800685c <_printf_i+0x114>
 8006858:	2d00      	cmp	r5, #0
 800685a:	d04b      	beq.n	80068f4 <_printf_i+0x1ac>
 800685c:	4615      	mov	r5, r2
 800685e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006862:	fb03 6711 	mls	r7, r3, r1, r6
 8006866:	5dc7      	ldrb	r7, [r0, r7]
 8006868:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800686c:	4637      	mov	r7, r6
 800686e:	42bb      	cmp	r3, r7
 8006870:	460e      	mov	r6, r1
 8006872:	d9f4      	bls.n	800685e <_printf_i+0x116>
 8006874:	2b08      	cmp	r3, #8
 8006876:	d10b      	bne.n	8006890 <_printf_i+0x148>
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	07de      	lsls	r6, r3, #31
 800687c:	d508      	bpl.n	8006890 <_printf_i+0x148>
 800687e:	6923      	ldr	r3, [r4, #16]
 8006880:	6861      	ldr	r1, [r4, #4]
 8006882:	4299      	cmp	r1, r3
 8006884:	bfde      	ittt	le
 8006886:	2330      	movle	r3, #48	; 0x30
 8006888:	f805 3c01 	strble.w	r3, [r5, #-1]
 800688c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006890:	1b52      	subs	r2, r2, r5
 8006892:	6122      	str	r2, [r4, #16]
 8006894:	f8cd a000 	str.w	sl, [sp]
 8006898:	464b      	mov	r3, r9
 800689a:	aa03      	add	r2, sp, #12
 800689c:	4621      	mov	r1, r4
 800689e:	4640      	mov	r0, r8
 80068a0:	f7ff fee4 	bl	800666c <_printf_common>
 80068a4:	3001      	adds	r0, #1
 80068a6:	d14a      	bne.n	800693e <_printf_i+0x1f6>
 80068a8:	f04f 30ff 	mov.w	r0, #4294967295
 80068ac:	b004      	add	sp, #16
 80068ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	f043 0320 	orr.w	r3, r3, #32
 80068b8:	6023      	str	r3, [r4, #0]
 80068ba:	4833      	ldr	r0, [pc, #204]	; (8006988 <_printf_i+0x240>)
 80068bc:	2778      	movs	r7, #120	; 0x78
 80068be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80068c2:	6823      	ldr	r3, [r4, #0]
 80068c4:	6829      	ldr	r1, [r5, #0]
 80068c6:	061f      	lsls	r7, r3, #24
 80068c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80068cc:	d402      	bmi.n	80068d4 <_printf_i+0x18c>
 80068ce:	065f      	lsls	r7, r3, #25
 80068d0:	bf48      	it	mi
 80068d2:	b2b6      	uxthmi	r6, r6
 80068d4:	07df      	lsls	r7, r3, #31
 80068d6:	bf48      	it	mi
 80068d8:	f043 0320 	orrmi.w	r3, r3, #32
 80068dc:	6029      	str	r1, [r5, #0]
 80068de:	bf48      	it	mi
 80068e0:	6023      	strmi	r3, [r4, #0]
 80068e2:	b91e      	cbnz	r6, 80068ec <_printf_i+0x1a4>
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	f023 0320 	bic.w	r3, r3, #32
 80068ea:	6023      	str	r3, [r4, #0]
 80068ec:	2310      	movs	r3, #16
 80068ee:	e7a7      	b.n	8006840 <_printf_i+0xf8>
 80068f0:	4824      	ldr	r0, [pc, #144]	; (8006984 <_printf_i+0x23c>)
 80068f2:	e7e4      	b.n	80068be <_printf_i+0x176>
 80068f4:	4615      	mov	r5, r2
 80068f6:	e7bd      	b.n	8006874 <_printf_i+0x12c>
 80068f8:	682b      	ldr	r3, [r5, #0]
 80068fa:	6826      	ldr	r6, [r4, #0]
 80068fc:	6961      	ldr	r1, [r4, #20]
 80068fe:	1d18      	adds	r0, r3, #4
 8006900:	6028      	str	r0, [r5, #0]
 8006902:	0635      	lsls	r5, r6, #24
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	d501      	bpl.n	800690c <_printf_i+0x1c4>
 8006908:	6019      	str	r1, [r3, #0]
 800690a:	e002      	b.n	8006912 <_printf_i+0x1ca>
 800690c:	0670      	lsls	r0, r6, #25
 800690e:	d5fb      	bpl.n	8006908 <_printf_i+0x1c0>
 8006910:	8019      	strh	r1, [r3, #0]
 8006912:	2300      	movs	r3, #0
 8006914:	6123      	str	r3, [r4, #16]
 8006916:	4615      	mov	r5, r2
 8006918:	e7bc      	b.n	8006894 <_printf_i+0x14c>
 800691a:	682b      	ldr	r3, [r5, #0]
 800691c:	1d1a      	adds	r2, r3, #4
 800691e:	602a      	str	r2, [r5, #0]
 8006920:	681d      	ldr	r5, [r3, #0]
 8006922:	6862      	ldr	r2, [r4, #4]
 8006924:	2100      	movs	r1, #0
 8006926:	4628      	mov	r0, r5
 8006928:	f7f9 fc92 	bl	8000250 <memchr>
 800692c:	b108      	cbz	r0, 8006932 <_printf_i+0x1ea>
 800692e:	1b40      	subs	r0, r0, r5
 8006930:	6060      	str	r0, [r4, #4]
 8006932:	6863      	ldr	r3, [r4, #4]
 8006934:	6123      	str	r3, [r4, #16]
 8006936:	2300      	movs	r3, #0
 8006938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800693c:	e7aa      	b.n	8006894 <_printf_i+0x14c>
 800693e:	6923      	ldr	r3, [r4, #16]
 8006940:	462a      	mov	r2, r5
 8006942:	4649      	mov	r1, r9
 8006944:	4640      	mov	r0, r8
 8006946:	47d0      	blx	sl
 8006948:	3001      	adds	r0, #1
 800694a:	d0ad      	beq.n	80068a8 <_printf_i+0x160>
 800694c:	6823      	ldr	r3, [r4, #0]
 800694e:	079b      	lsls	r3, r3, #30
 8006950:	d413      	bmi.n	800697a <_printf_i+0x232>
 8006952:	68e0      	ldr	r0, [r4, #12]
 8006954:	9b03      	ldr	r3, [sp, #12]
 8006956:	4298      	cmp	r0, r3
 8006958:	bfb8      	it	lt
 800695a:	4618      	movlt	r0, r3
 800695c:	e7a6      	b.n	80068ac <_printf_i+0x164>
 800695e:	2301      	movs	r3, #1
 8006960:	4632      	mov	r2, r6
 8006962:	4649      	mov	r1, r9
 8006964:	4640      	mov	r0, r8
 8006966:	47d0      	blx	sl
 8006968:	3001      	adds	r0, #1
 800696a:	d09d      	beq.n	80068a8 <_printf_i+0x160>
 800696c:	3501      	adds	r5, #1
 800696e:	68e3      	ldr	r3, [r4, #12]
 8006970:	9903      	ldr	r1, [sp, #12]
 8006972:	1a5b      	subs	r3, r3, r1
 8006974:	42ab      	cmp	r3, r5
 8006976:	dcf2      	bgt.n	800695e <_printf_i+0x216>
 8006978:	e7eb      	b.n	8006952 <_printf_i+0x20a>
 800697a:	2500      	movs	r5, #0
 800697c:	f104 0619 	add.w	r6, r4, #25
 8006980:	e7f5      	b.n	800696e <_printf_i+0x226>
 8006982:	bf00      	nop
 8006984:	08006acd 	.word	0x08006acd
 8006988:	08006ade 	.word	0x08006ade

0800698c <memmove>:
 800698c:	4288      	cmp	r0, r1
 800698e:	b510      	push	{r4, lr}
 8006990:	eb01 0402 	add.w	r4, r1, r2
 8006994:	d902      	bls.n	800699c <memmove+0x10>
 8006996:	4284      	cmp	r4, r0
 8006998:	4623      	mov	r3, r4
 800699a:	d807      	bhi.n	80069ac <memmove+0x20>
 800699c:	1e43      	subs	r3, r0, #1
 800699e:	42a1      	cmp	r1, r4
 80069a0:	d008      	beq.n	80069b4 <memmove+0x28>
 80069a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069aa:	e7f8      	b.n	800699e <memmove+0x12>
 80069ac:	4402      	add	r2, r0
 80069ae:	4601      	mov	r1, r0
 80069b0:	428a      	cmp	r2, r1
 80069b2:	d100      	bne.n	80069b6 <memmove+0x2a>
 80069b4:	bd10      	pop	{r4, pc}
 80069b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069be:	e7f7      	b.n	80069b0 <memmove+0x24>

080069c0 <_sbrk_r>:
 80069c0:	b538      	push	{r3, r4, r5, lr}
 80069c2:	4d06      	ldr	r5, [pc, #24]	; (80069dc <_sbrk_r+0x1c>)
 80069c4:	2300      	movs	r3, #0
 80069c6:	4604      	mov	r4, r0
 80069c8:	4608      	mov	r0, r1
 80069ca:	602b      	str	r3, [r5, #0]
 80069cc:	f7fa fd06 	bl	80013dc <_sbrk>
 80069d0:	1c43      	adds	r3, r0, #1
 80069d2:	d102      	bne.n	80069da <_sbrk_r+0x1a>
 80069d4:	682b      	ldr	r3, [r5, #0]
 80069d6:	b103      	cbz	r3, 80069da <_sbrk_r+0x1a>
 80069d8:	6023      	str	r3, [r4, #0]
 80069da:	bd38      	pop	{r3, r4, r5, pc}
 80069dc:	20000b14 	.word	0x20000b14

080069e0 <memcpy>:
 80069e0:	440a      	add	r2, r1
 80069e2:	4291      	cmp	r1, r2
 80069e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80069e8:	d100      	bne.n	80069ec <memcpy+0xc>
 80069ea:	4770      	bx	lr
 80069ec:	b510      	push	{r4, lr}
 80069ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069f6:	4291      	cmp	r1, r2
 80069f8:	d1f9      	bne.n	80069ee <memcpy+0xe>
 80069fa:	bd10      	pop	{r4, pc}

080069fc <_realloc_r>:
 80069fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a00:	4680      	mov	r8, r0
 8006a02:	4614      	mov	r4, r2
 8006a04:	460e      	mov	r6, r1
 8006a06:	b921      	cbnz	r1, 8006a12 <_realloc_r+0x16>
 8006a08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a0c:	4611      	mov	r1, r2
 8006a0e:	f7ff bc49 	b.w	80062a4 <_malloc_r>
 8006a12:	b92a      	cbnz	r2, 8006a20 <_realloc_r+0x24>
 8006a14:	f7ff fbda 	bl	80061cc <_free_r>
 8006a18:	4625      	mov	r5, r4
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a20:	f000 f81b 	bl	8006a5a <_malloc_usable_size_r>
 8006a24:	4284      	cmp	r4, r0
 8006a26:	4607      	mov	r7, r0
 8006a28:	d802      	bhi.n	8006a30 <_realloc_r+0x34>
 8006a2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a2e:	d812      	bhi.n	8006a56 <_realloc_r+0x5a>
 8006a30:	4621      	mov	r1, r4
 8006a32:	4640      	mov	r0, r8
 8006a34:	f7ff fc36 	bl	80062a4 <_malloc_r>
 8006a38:	4605      	mov	r5, r0
 8006a3a:	2800      	cmp	r0, #0
 8006a3c:	d0ed      	beq.n	8006a1a <_realloc_r+0x1e>
 8006a3e:	42bc      	cmp	r4, r7
 8006a40:	4622      	mov	r2, r4
 8006a42:	4631      	mov	r1, r6
 8006a44:	bf28      	it	cs
 8006a46:	463a      	movcs	r2, r7
 8006a48:	f7ff ffca 	bl	80069e0 <memcpy>
 8006a4c:	4631      	mov	r1, r6
 8006a4e:	4640      	mov	r0, r8
 8006a50:	f7ff fbbc 	bl	80061cc <_free_r>
 8006a54:	e7e1      	b.n	8006a1a <_realloc_r+0x1e>
 8006a56:	4635      	mov	r5, r6
 8006a58:	e7df      	b.n	8006a1a <_realloc_r+0x1e>

08006a5a <_malloc_usable_size_r>:
 8006a5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a5e:	1f18      	subs	r0, r3, #4
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	bfbc      	itt	lt
 8006a64:	580b      	ldrlt	r3, [r1, r0]
 8006a66:	18c0      	addlt	r0, r0, r3
 8006a68:	4770      	bx	lr
	...

08006a6c <_init>:
 8006a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a6e:	bf00      	nop
 8006a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a72:	bc08      	pop	{r3}
 8006a74:	469e      	mov	lr, r3
 8006a76:	4770      	bx	lr

08006a78 <_fini>:
 8006a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7a:	bf00      	nop
 8006a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a7e:	bc08      	pop	{r3}
 8006a80:	469e      	mov	lr, r3
 8006a82:	4770      	bx	lr
